<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
  <topic id="topic_abq_gfk_qfb">
    <title>日期/时间类型</title>
    <body><section id="datatype-datetime">
   

   <p>Greenplum 完整支持全部 SQL 日期和时间类型, 参见 <xref
      href="#topic_abq_gfk_qfb/datatype-datetime-table" format="dita"/>。对于这些数据类型可用的操作说明, 参见 PostgreSQL 文档 <xref
      href="https://www.postgresql.org/docs/9.4/functions-datetime.html" format="html"
      scope="external">日期/时间函数和运算符</xref>。
     日期根据罗马日历计算，在日历引入之前的年也这样计算 (参见 PostgreSQL 文档 <xref
      href="https://www.postgresql.org/docs/9.4/datetime-units-history.html" format="html"
      scope="external">日期单位的历史</xref>了解更多信息)。</p>

    <table id="datatype-datetime-table">
     <title>日期/时间类型</title>
     <tgroup cols="6">
      <thead>
       <row>
        <entry>名称</entry>
        <entry>存储大小</entry>
        <entry>描述</entry>
        <entry>最小值</entry>
        <entry>最大值</entry>
        <entry>精度</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>timestamp [ (<varname>p</varname>) ] [ without time zone ]</entry>
        <entry>8 字节</entry>
        <entry>包括时间和日期 (无时区)</entry>
        <entry>4713 BC</entry>
        <entry>294276 AD</entry>
        <entry>1 微秒 / 14 位数字</entry>
       </row>
       <row>
        <entry>timestamp [ (<varname>p</varname>) ] with time zone</entry>
        <entry>8 字节</entry>
        <entry>包括时间和日期 (有时区)</entry>
        <entry>4713 BC</entry>
        <entry>294276 AD</entry>
        <entry>1 微秒 / 14 位数字</entry>
       </row>
       <row>
        <entry>date</entry>
        <entry>4 字节</entry>
        <entry>日期 (无一天内的时间)</entry>
        <entry>4713 BC</entry>
        <entry>5874897 AD</entry>
        <entry>1 天</entry>
       </row>
       <row>
        <entry>time [ (<varname>p</varname>) ] [ without time zone ]</entry>
        <entry>8 字节</entry>
        <entry>一天内的时间 (无日期和时区)</entry>
        <entry>00:00:00</entry>
        <entry>24:00:00</entry>
        <entry>1 微秒 / 14 位数字</entry>
       </row>
       <row>
        <entry>time [ (<varname>p</varname>) ] with time zone</entry>
        <entry>12 字节</entry>
        <entry>一天内的时间, 无日期, 有时区</entry>
        <entry>00:00:00+1459</entry>
        <entry>24:00:00-1459</entry>
        <entry>1 微秒 / 14 位数字</entry>
       </row>
       <row>
        <entry>interval [ <varname>fields</varname> ] [ (<varname>p</varname>) ]</entry>
        <entry>16 字节</entry>
        <entry>时间间隔</entry>
        <entry>-178000000 年</entry>
        <entry>178000000 年</entry>
        <entry>1 微秒 / 14 位数字</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <note>SQL 标准要求 <codeph>timestamp</codeph> 与 <codeph>timestamp without time zone</codeph> 写法一致, Greenplum 实现了这一点。
      <codeph>timestamptz</codeph> 是 <codeph>timestamp with time
      zone</codeph> 的缩写; 这是 PostgreSQL 的一点扩展。 </note>

   <p><codeph>time</codeph>, <codeph>timestamp</codeph>, 和 <codeph>interval</codeph> 接受一个可选的精度值 <varname>p</varname>，来指定秒的小数部分数字。默认情况下, 没有明确精度指定。对于 <codeph>timestamp</codeph> 和
      <codeph>interval</codeph> 类型, 允许的 <varname>p</varname> 值范围为 0 到 6。</p>

   <note>当 <codeph>timestamp</codeph> 值按八字节整数存储(当前默认), 精度可全范围(0 到 6 位)任意设置。当
      <codeph>timestamp</codeph> 值按双精度浮点数存储(一个过时的编译选项), 精度有效值可能小于 6 位。<codeph>timestamp</codeph> 值存储的是从 2000-01-01 午夜开始的秒的数值。
      当 <codeph>timestamp</codeph> 值按浮点数实现时，2000-01-01 附近的一些年可以达到微秒精度，但是距离这个日期稍远的一些时间精度就会有所降低。注意：浮点存储的<codeph>timestamp</codeph> 值允许更大的日期范围，比上表中给出的要大，即可以表示从 4713 BC 到
     5874897 AD 的日期。<p>同样的编译选项也决定 <codeph>time</codeph> 和
       <codeph>interval</codeph> 类型值存储为浮点数还是八字节整数。
      当存储位浮点数的时候, 当时间间隔增大时，<codeph>interval</codeph> 的精度有所降低。</p></note>

   <p>对于 <codeph>time</codeph> 类型, 使用八字节整数存储时，允许的
    <varname>p</varname> 值范围从 0 到 6；使用浮点数存储时，允许的<varname>p</varname> 值范围从 0 到 10。</p>

   <p>另外，<codeph>interval</codeph> 数据类型还有一个附加选项，可以通过书写以下时间单位后缀(<varname>fields</varname>)来来限制存储内容:
<codeblock>
YEAR
MONTH
DAY
HOUR
MINUTE
SECOND
YEAR TO MONTH
DAY TO HOUR
DAY TO MINUTE
DAY TO SECOND
HOUR TO MINUTE
HOUR TO SECOND
MINUTE TO SECOND
</codeblock>
    注意：如果同时指定 <varname>fields</varname> 与
    <varname>p</varname> 参数, 
    <varname>fields</varname> 必须包含 <codeph>SECOND</codeph>,
    因为精度参数 <varname>p</varname> 只对秒起作用。</p>

   <p><codeph>time with time zone</codeph> 类型由 SQL 标准定义，
    但是定义给出的属性导致人们怀疑它的有用性。
    大部分情况下，复合使用
    <codeph>date</codeph>, <codeph>time</codeph>, <codeph>timestamp without time
    zone</codeph>, 以及 <codeph>timestamp with time zone</codeph> 已经提供了任何应用程序所需的完整日期/时间功能。</p>

   <p><codeph>abstime</codeph> 
    和 <codeph>reltime</codeph> 是内部使用的低精度数据类型。
    不建议你在应用程序中使用; 这些内部数据类型可能在未来的某一个版本中消失。</p>

    </section>
   <section id="datatype-datetime-input">
    <title>日期/时间输入</title>

    <p>几乎任何合理的日期/时间输入格式都可以被接受。包括 ISO 8601,
     SQL-兼任格式, 传统 POSTGRES 格式, 等等。对于一些格式, 数据输入中的年、月、日的顺序非常含糊，所以支持指定这些字段的期望顺序。参见 <xref href="config_params/guc-list.xml#DateStyle"/> 通过参数
      <codeph>MDY</codeph> 指定 月-日-年 格式, <codeph>DMY</codeph> 指定 日-月-年 格式，或者 <codeph>YMD</codeph> 指定 年-月-日 格式。</p>

    <p>Greenplum 在处理日期/时间输入上比 SQL 标准要求的更加弹性。参见 PostgreSQL 文档
      <xref href="https://www.postgresql.org/docs/9.4/datetime-appendix.html" format="html"
      scope="external">附录 B. 时间/日期支持</xref>，了解时间/日期输入的确切解析规则，以及如何识别文本字段，包括月份, 星期和时区。</p>

    <p>记住，任何日期或时间字面值需要用单引号引起来, 就像字符串一样. SQL 需要这样的语法
     <codeblock>
<varname>type</varname> [ (<varname>p</varname>) ] '<varname>value</varname>'
</codeblock>
     这里， <varname>p</varname> 是一个可选精度参数，指定秒的小数位数。它对以下类型起作用， <codeph>time</codeph>,
      <codeph>timestamp</codeph>, 以及 <codeph>interval</codeph> 类型。
      允许设定的值范围已经在上面文档中说明； 如果没有指定精度，默认为字面值的精度。</p>

   </section>
    <section>
    <title>日期</title>

    <p><xref href="#topic_abq_gfk_qfb/table_owm_dfr_qfb" format="dita"/> 一些可能的 <codeph>date</codeph> 类型输入格式.</p>

     <table id="table_owm_dfr_qfb">
     <title>日期输入</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>举例</entry>
        <entry>说明</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>1999-01-08</entry>
        <entry>ISO 8601; 1 月 8 日 (推荐格式)</entry>
       </row>
       <row>
        <entry>January 8, 1999</entry>
        <entry>对任何 <varname>日期风格</varname> 都很明确的输入模式</entry>
       </row>
       <row>
        <entry>1/8/1999</entry>
        <entry><codeph>MDY</codeph> 模式：1 月 8 日 ; <codeph>DMY</codeph> 模式：8 月 1 日</entry>
       </row>
       <row>
        <entry>1/18/1999</entry>
        <entry><codeph>MDY</codeph> 模式：1 月 18 日; 其他模式：无效</entry>
       </row>
       <row>
        <entry>01/02/03</entry>
        <entry><codeph>MDY</codeph> 模式：2003 年 1 月 2 日; 
          <codeph>DMY</codeph> 模式：2003 年 2 月 1 日; 
          <codeph>YMD</codeph> 模式：2001 年 2 月 3 日 </entry>
       </row>
       <row>
        <entry>1999-Jan-08</entry>
        <entry>任何模式：1999 年 1 月 8 日</entry>
       </row>
       <row>
        <entry>Jan-08-1999</entry>
        <entry>任何模式：1999 年 1 月 8 日</entry>
       </row>
       <row>
        <entry>08-Jan-1999</entry>
        <entry>任何模式：1999 年 1 月 8 日</entry>
       </row>
       <row>
        <entry>99-Jan-08</entry>
        <entry><codeph>YMD</codeph> 模式：1999 年 1 月 8 日, 其他：错误</entry>
       </row>
       <row>
        <entry>08-Jan-99</entry>
        <entry><codeph>YMD</codeph> 模式：错误；其他模式：1999 年 1 月 8 日</entry>
       </row>
       <row>
        <entry>Jan-08-99</entry>
        <entry><codeph>YMD</codeph> 模式：错误；其他模式：1999 年 1 月 8 日</entry>
       </row>
       <row>
        <entry>19990108</entry>
        <entry>ISO 8601; 任何模式：1999 年 1 月 8 日</entry>
       </row>
       <row>
        <entry>990108</entry>
        <entry>ISO 8601; 任何模式：1999 年 1 月 8 日</entry>
       </row>
       <row>
        <entry>1999.008</entry>
        <entry>年和一年中的天</entry>
       </row>
       <row>
        <entry>J2451187</entry>
        <entry>儒略日期（天文学常用）</entry>
       </row>
       <row>
        <entry>January 8, 99 BC</entry>
        <entry>公元前 99 年 1 月 8 日</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    </section>

    <section>
     <title>时间</title>

     <p>时间类型包括 <codeph>time [
      (<varname>p</varname>) ] without time zone</codeph> 和
      <codeph>time [ (<varname>p</varname>) ] with time
      zone</codeph>。  <codeph>time</codeph> 与
      <codeph>time without time zone</codeph> 等价.</p>

     <p>这些类型的有效的输入格式由时间加上一个可选的时区.
     (参见 <xref href="#topic_abq_gfk_qfb/datatype-datetime-time-table" format="dita"/> 和 <xref
      href="#topic_abq_gfk_qfb/datatype-timezone-table" format="dita"/>.) 如果在输入中给 <codeph>time without time zone</codeph> 类型指定了时区, 则时区会被忽略。你如果指定了一个日期，也会被忽略，除非你用了包含夏令时的时区，例如 <codeph>America/New_York</codeph>. 
      这种情况下，指定日期是必要的，因为需要决定当前是否是标准时间，还是夏令时时间. 
      使用 <codeph>time with time
      zone</codeph> 类型时，合适的时区偏移会被记录.</p>

      <table id="datatype-datetime-time-table">
       <title>时间输入</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>举例</entry>
          <entry>说明</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><codeph>04:05:06.789</codeph></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><codeph>04:05:06</codeph></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><codeph>04:05</codeph></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><codeph>040506</codeph></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><codeph>04:05 AM</codeph></entry>
          <entry>与 04:05 相同; AM 不影响值</entry>
         </row>
         <row>
          <entry><codeph>04:05 PM</codeph></entry>
          <entry>与 16:05 相同; 小时值必须 &lt;= 12</entry>
         </row>
         <row>
          <entry><codeph>04:05:06.789-8</codeph></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><codeph>04:05:06-08:00</codeph></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><codeph>04:05-08:00</codeph></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><codeph>040506-08</codeph></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><codeph>04:05:06 PST</codeph></entry>
          <entry>时区用缩写指定</entry>
         </row>
         <row>
          <entry><codeph>2003-04-12 04:05:06 America/New_York</codeph></entry>
          <entry>时区用全称指定</entry>
         </row>
        </tbody>
       </tgroup>
      </table>

      <table id="datatype-timezone-table">
       <title>时区输入</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>举例</entry>
          <entry>说明</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><codeph>PST</codeph></entry>
          <entry>缩写 (太平洋标准时间)</entry>
         </row>
         <row>
          <entry><codeph>America/New_York</codeph></entry>
          <entry>时区全称</entry>
         </row>
         <row>
          <entry><codeph>PST8PDT</codeph></entry>
          <entry>POSIX-样式时区格式</entry>
         </row>
         <row>
          <entry><codeph>-8:00</codeph></entry>
          <entry>ISO-8601 偏移(PST)</entry>
         </row>
         <row>
          <entry><codeph>-800</codeph></entry>
          <entry>ISO-8601 偏移(PST)</entry>
         </row>
         <row>
          <entry><codeph>-8</codeph></entry>
          <entry>ISO-8601 偏移(PST)</entry>
         </row>
         <row>
          <entry><codeph>zulu</codeph></entry>
          <entry>军方缩写(UTC)</entry>
         </row>
         <row>
          <entry><codeph>z</codeph></entry>
          <entry><codeph>zulu</codeph>的短格式</entry>
         </row>
        </tbody>
       </tgroup>
      </table>

     <p>参考 <xref href="#topic_abq_gfk_qfb/datatype-timezones" format="dita"/> 了解更多时区格式输入信息.</p>
    </section>

    <section>
    <title>时间戳</title>

     <p>时间戳的有效输入格式由以下几个部分组成：日期，时间，时区(可选),
      接着可选的 <codeph>AD</codeph> 或 <codeph>BC</codeph>.
      (另外, <codeph>AD</codeph>/<codeph>BC</codeph> 也可以出现在时区之前, 但不是推荐的顺序.)
      因而:

<codeph>
1999-01-08 04:05:06
</codeph>
      和:
<codeph>
1999-01-08 04:05:06 -8:00
</codeph>

      都是有效的时间戳值, 它们满足 ISO 8601 标准要求.
      另外, 常用格式:
<codeph>
January 8 04:05:06 1999 PST
</codeph>
      也被支持.</p>

     <p>SQL 标准中 <codeph>timestamp without time zone</codeph> 与
      <codeph>timestamp with time zone</codeph> 字面值的差异主要体现在时间后面由一个 <codeph>+</codeph> 或
      <codeph>-</codeph> 号标识的时区. 因此, 根据标准, <codeph>TIMESTAMP '2004-10-19 10:23:54'</codeph> 是一个 <codeph>timestamp without time
      zone</codeph> 类型字面值, 而 <codeph>TIMESTAMP '2004-10-19 10:23:54+02'</codeph> 是一个
      <codeph>timestamp with time zone</codeph> 类型的字面值. Greenplum 在确定类型之前从不检查字面值内容, 所以上面两个字面值都会被认为是
      <codeph>timestamp without time zone</codeph> 类型. 为确保当作
      <codeph>timestamp with time zone</codeph> 类型对待, 请像这样给出明确类型:
      <codeph>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</codeph>
      对于一个已经确定为 <codeph>timestamp without time zone</codeph>类型的字面值, Greenplum 会抛弃时区相关信息. 也就是说, 结果时间戳仅仅根据日期/时间确定，不会根据时区进行调整.</p>

     <p>对于 <codeph>timestamp with time zone</codeph> 类型, 内部值总是按照 UTC
     (统一协调时间, 通常叫做格林威治时间, GMT) 存储.
     带有明确时区的输入值会使用合适的时区偏移转为 UTC 时间。
     如果输入字符串中没有指定时区，会假定为当前系统的 <codeph>TimeZone</codeph> 参数, 并使用这个参数的偏移转换为 UTC 时间。</p>

     <p>当输出一个 <codeph>timestamp with time zone</codeph> 类型值,
     总是根据当前 <varname>timezone</varname> 时区值进行转换, 并显示为本地时间. 要想以另一个时区查看时间，要么改变 <varname>timezone</varname> 设置，要么使用 <codeph>AT TIME ZONE</codeph> 构造 (参见 PostgreSQL 文档的<xref
      href="https://www.postgresql.org/docs/9.4/functions-datetime.html#FUNCTIONS-DATETIME-ZONECONVERT"
      format="html" scope="external">AT TIME ZONE</xref>).</p>

     <p>在 <codeph>timestamp without time zone</codeph> 与
      <codeph>timestamp with time zone</codeph> 间转换通常假定
      <codeph>timestamp without time zone</codeph> 中的值应该是以 <varname>timezone</varname> 为时区的本地时间. 当然，也可以用 <codeph>AT TIME ZONE</codeph> 指定一个不同的时区.</p>
    </section>

    <section>
     <title>特殊值</title>

     <p>为了方便, Greenplum 支持几种特殊的日期/时间输入值格式, 参见 <xref
      href="#topic_abq_gfk_qfb/datatype-datetime-special-table" format="dita"/>. 
      <codeph>infinity</codeph> 和 <codeph>-infinity</codeph> 值是用于系统内部的特殊表示，会被直接显示;
      但其他都只是些快捷记号，会在读取的时候被转换为常规的日期/时间值.(特别地, <codeph>now</codeph>
     和相关字符串会被转换为读取时的当前特定时间值.) 所有这些常量值在 SQL 命令中都需要用单引号引起来.</p>

      <table id="datatype-datetime-special-table">
       <title>特殊日期/时间输入</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>输入字符串</entry>
          <entry>有效类型</entry>
          <entry>说明</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><codeph>epoch</codeph></entry>
          <entry><codeph>date</codeph>, <codeph>timestamp</codeph></entry>
          <entry>1970-01-01 00:00:00+00 (Unix 系统时间零点)</entry>
         </row>
         <row>
          <entry><codeph>infinity</codeph></entry>
          <entry><codeph>date</codeph>, <codeph>timestamp</codeph></entry>
          <entry>比任何时间戳都晚的时间</entry>
         </row>
         <row>
          <entry><codeph>-infinity</codeph></entry>
          <entry><codeph>date</codeph>, <codeph>timestamp</codeph></entry>
          <entry>比任何时间戳都早的时间</entry>
         </row>
         <row>
          <entry><codeph>now</codeph></entry>
          <entry><codeph>date</codeph>, <codeph>time</codeph>, <codeph>timestamp</codeph></entry>
          <entry>当前事务的开始时间</entry>
         </row>
         <row>
          <entry><codeph>today</codeph></entry>
          <entry><codeph>date</codeph>, <codeph>timestamp</codeph></entry>
          <entry>今天午夜</entry>
         </row>
         <row>
          <entry><codeph>tomorrow</codeph></entry>
          <entry><codeph>date</codeph>, <codeph>timestamp</codeph></entry>
          <entry>明天午夜</entry>
         </row>
         <row>
          <entry><codeph>yesterday</codeph></entry>
          <entry><codeph>date</codeph>, <codeph>timestamp</codeph></entry>
          <entry>昨天午夜</entry>
         </row>
         <row>
          <entry><codeph>allballs</codeph></entry>
          <entry><codeph>time</codeph></entry>
          <entry>00:00:00.00 UTC</entry>
         </row>
        </tbody>
       </tgroup>
      </table>

     <p>下面这些 SQL-兼容函数也可以用来获取相应类型的当前时间: <codeph>CURRENT_DATE</codeph>, <codeph>CURRENT_TIME</codeph>,
      <codeph>CURRENT_TIMESTAMP</codeph>, <codeph>LOCALTIME</codeph>,
      <codeph>LOCALTIMESTAMP</codeph>. 后面四个可接受一个可选的亚秒级精度参数. (参见 PostgreSQL 文档的<xref
      href="https://www.postgresql.org/docs/9.4/functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"
      format="html" scope="external">当前日期/时间</xref>.) 注意
     有一些 SQL 函数在输入字符串中 <i>不</i> 被接受.</p>

    </section>
   

   <section id="datatype-datetime-output">
    <title>日期/时间输出</title>

    
    <p>日期/时间类型的输出格式可以被设置为以下四种样式: ISO 8601, SQL
     (Ingres), 传统 POSTGRES (Unix <codeph>date</codeph> 格式), 或者 German. 默认是 ISO 格式. (SQL 标准需要使用 ISO 8601 格式. 
      <codeph>SQL</codeph> 输出格式这个名字是由于偶然的历史原因.) <xref
      href="#topic_abq_gfk_qfb/datatype-datetime-output-table" format="dita"/> 给出了各种输出格式的例子. <codeph>date</codeph> 和 <codeph>time</codeph> 类型的输出格式通常为对应例子中的日期或时间部分.
      然而, POSTGRES 格式的纯日期输出用的是 ISO 格式.</p>

     <table id="datatype-datetime-output-table">
      <title>日期/时间输出格式</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>样式规范</entry>
         <entry>说明</entry>
         <entry>举例</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><codeph>ISO</codeph></entry>
         <entry>ISO 8601, SQL 标准</entry>
         <entry><codeph>1997-12-17 07:37:16-08</codeph></entry>
        </row>
        <row>
         <entry><codeph>SQL</codeph></entry>
         <entry>传统样式</entry>
         <entry><codeph>12/17/1997 07:37:16.00 PST</codeph></entry>
        </row>
        <row>
         <entry><codeph>Postgres</codeph></entry>
         <entry>原始样式</entry>
         <entry><codeph>Wed Dec 17 07:37:16 1997 PST</codeph></entry>
        </row>
        <row>
         <entry><codeph>German</codeph></entry>
         <entry>区域样式</entry>
         <entry><codeph>17.12.1997 07:37:16.00 PST</codeph></entry>
        </row>
       </tbody>
      </tgroup>
     </table>

    <note> ISO 8601 规定使用大写字母 <codeph>T</codeph> 隔开日期和时间. Greenplum 支持这个输入格式, 但是输出时使用空格而不是
      <codeph>T</codeph>, 上面您已经看到了. 这是为了可读性，同时与 RFC 3339 以及一些其他数据库系统保持一致. </note>

    <p>在 SQL 和 POSTGRES 样式中, 如果指定 DMY 模式，日会出现在月之前; 其他情况下月在日之前. (参见 <xref
      href="#topic_abq_gfk_qfb/table_owm_dfr_qfb" format="dita"/> 关于这些设置如何影响输入值解释.) <xref
      href="#topic_abq_gfk_qfb/datatype-datetime-output2-table" format="dita"/> 中的例子.</p>

     <table id="datatype-datetime-output2-table">
      <title>日期顺序约定</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry><varname>datestyle</varname> 设置</entry>
         <entry>输入顺序</entry>
         <entry>输出举例</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><codeph>SQL, DMY</codeph></entry>
         <entry><varname>day</varname>/<varname>month</varname>/<varname>year</varname></entry>
         <entry><codeph>17/12/1997 15:37:16.00 CET</codeph></entry>
        </row>
        <row>
         <entry><codeph>SQL, MDY</codeph></entry>
         <entry><varname>month</varname>/<varname>day</varname>/<varname>year</varname></entry>
         <entry><codeph>12/17/1997 07:37:16.00 PST</codeph></entry>
        </row>
        <row>
         <entry><codeph>Postgres, DMY</codeph></entry>
         <entry><varname>day</varname>/<varname>month</varname>/<varname>year</varname></entry>
         <entry><codeph>Wed 17 Dec 07:37:16 1997 PST</codeph></entry>
        </row>
       </tbody>
      </tgroup>
     </table>

    <p>用户可以使用以下方式选择日期/时间样式: <codeph>SET datestyle</codeph> 命令,
    <codeph>postgresql.conf</codeph>
     配置文件中的 <codeph>DateStyle</codeph> 参数, 或者服务器或客户端的 <codeph>PGDATESTYLE</codeph> 环境变量.</p>

    <p>格式化函数 <codeph>to_char</codeph> (参见 <xref
      href="https://www.postgresql.org/docs/9.4/functions-formatting.html" format="html"
      scope="external">数据类型格式化函数</xref>) 是一种格式化日期/时间输出的更加灵活的方式.</p>
   </section>

   <section id="datatype-timezones">
    <title>时区</title>

    

   <p>时区和时区转换，不仅仅是地理位置问题，也受政治决定影响. 从 1900 年以来，世界上的时区稍微标准了一点, 但还是在持续的改变, 尤其是夏令时规则.
     Greenplum 使用广泛采纳的 IANA (Olson) 时区数据库来定义历史时区规则. 对于未来时间, 假定给定时区的现行已知规则会无限期持续.</p>

    <p>Greenplum 保持与 SQL 标准兼容的典型用法定义.
     然而, SQL 标准偶尔也有一点混淆时间和日期类型和能力. 两个明显的问题是: <ol>
      <li>虽然 <codeph>date</codeph> 类型不能带时区, 但是
        <codeph>time</codeph> 类型是可以的. 不与日期和时间关联，时区在真实世界意义不大, 因为偏移变化与夏令时边界相关. </li>
      <li>默认时区是与 UTC 之间差异的常量数值. 因而，当进行跨 DST 边界的日期/时间数值计算时，可能采用夏令时. </li>
     </ol></p>

    <p>为了解决这些困难, 当使用时区的时候，我们推荐用同时包含日期和时间的日期/时间类型.
    我们 <i>不</i> 推荐使用 <codeph>time with time
      zone</codeph> 类型(虽然 Greenplum 支持，但主要是为了一个老应用，同时保持与 SQL 标准兼容).
      对于任何只包含日期或时间的类型, Greenplum 假定是你的本地时区(的时间或日期).</p>

    <p>所有时区感知的日期和时间内部都存储为 UTC 值. 当被显示到客户端时，才通过 <codeph>TimeZone</codeph> 配置参数的值转换为指定时区的日期或时间.</p>

    <p>Greenplum 允许你以三种不同的形式指定时区: <ol>
      <li>时区全称, 例如 <codeph>America/New_York</codeph>. 在 <codeph>pg_timezone_names</codeph> 视图里列出了所有可被识别的时区名称.
      为了这个目的，Greenplum 使用广泛采纳的 IANA 的时区数据, 因此同样的时区名称也可以被很多其他软件识别. </li>
      <li>另一个形式时时区缩写, 例如 <codeph>PST</codeph>. 对于 时区全称，能够暗示夏令时规则，而时区缩写这个规范只能表示与 UTC 直接的时区偏移. 可识别的缩写列在 <codeph>pg_timezone_abbrevs</codeph> 视图中. 你不能给时区缩写设置配置参数 <xref href="config_params/guc-list.xml#TimeZone"/> 或 <xref
        href="config_params/guc-list.xml#log_timezone"/>, 但你可以在时间/日期输入值中通过 <codeph>AT TIME ZONE</codeph>
       操作符使用缩写. </li>
      <li>除了时区全称和时区缩写外, Greenplum 也接受 POSIX-风格的时区规范，形如 <varname>STD</varname><varname>offset</varname> 或者
        <varname>STD</varname><varname>offset</varname><varname>DST</varname>, 这里
        <varname>STD</varname> 是一个时区缩写, <varname>offset</varname> 是 UTC 往西偏移的小时数值, <varname>DST</varname> 是一个可选的夏令时时区缩写, 假定为比给定偏移提前一个小时. 举个例子, 如果
        <codeph>EST5EDT</codeph> 还没有被识别为时区名称, 它能被接受，相当于美国东岸时间(United States East Coast time). 在这种语法中, 时区缩写可以是一串字母, 或者包围在尖括号中的任意字符串(<codeph>&lt;&gt;</codeph>). 当存在夏令时时区缩写时, 假定使用与 IANA 时区数据库中相同的夏令时转换规则. 在标准 Greenplum 安装时, 与
        <codeph>US/Eastern</codeph> 相同, 因此 POSIX-风格时区规范遵守 USA
       夏令时规则. 如果需要，你也可以通过替换文件来调整这个行为. </li>
     </ol> 总之, 这就是时区全称与缩写的不同: 缩写表示与 UTC 之间的偏移, 而全称还暗示了夏令时规则, 因此有两种可能的 UTC 偏移. 例如,
      <codeph>2014-06-04 12:00 America/New_York</codeph> 表示纽约本地时间中午, 指定为东部夏令时间 Eastern Daylight Time (UTC-4). 因此 <codeph>2014-06-04 12:00
      EDT</codeph> 指定了同样的时间常数. 但是 <codeph>2014-06-04 12:00 EST</codeph>
     指定为东部标准时间 (UTC-5) 中午, 不管那天夏令时是否正常生效与否.</p>

    <p>另外复杂情况是, 有些管辖范围使用同样的时区缩写表示不同的 UTC 偏移和不同的时间; 例如, 在 <codeph>MSK</codeph> 有些年头表示
     UTC+3, 有些年头又表示 UTC+4. 对于这些缩写, Greenplum 根据日期来进行解释(对于未来时间，根据最近的情况解释); 
     但是, 就像上面 <codeph>EST</codeph> 这个例子, 这不一定与那个日期的本地时间相同.</p>

    <p>应该小心 POSIX-风格时区特征很容易导致错误输入被默默接受, 因为很难检查时区输入的合理性. 
    例如, <codeph>SET TIMEZONE TO FOOBAR0</codeph> 能够正常工作, 让系统有效使用相当特别的 UTC 缩写. 
    另一个要记住的问题是在 POSIX 时区名称中, 正数被用在(相对于)格林威治时间. 其他任何地方,
     Greenplum 遵守 ISO-8601 约定, 正时区偏移都是(相对于)格林威治时间.</p>

    <p>所有情况中, 失去名称和缩小都是大小写无关的.</p>

    <p>不论时区名称还是缩写, 都没有硬编码进服务程序; 我们是从配置文件 <ph otherprops="pivotal"> (参考 <xref
       href="../install_guide/localization.xml" scope="peer">配置本地化设置</xref>)</ph>.</p>

    <p><codeph>TimeZone</codeph> 配置参数可以在文件中设定, 或者其他任何标准设置配置参数的方式. 
    另外也有一个特殊方式来设置: <ol>
      <li>SQL 命令 <codeph>SET TIME ZONE</codeph> 可以设置当前会话的时区. 
      这是比 <codeph>SET TIMEZONE TO</codeph> 更符合 SQL 兼容规范的一种形式. </li>
      <li> <codeph>PGTZ</codeph> 环境变量被 <codeph>libpq</codeph> 客户端用来, 在初始化与服务器的连接时, 发送 <codeph>SET TIME ZONE</codeph> 命令. </li>
     </ol></p>
   </section>

   <section id="datatype-interval-input">
    <title>时间段输入</title>

     <p><codeph>时间段</codeph> 值可以被写成下面的详细语法:
     <codeblock>
<varname>@</varname> <varname>quantity</varname> <varname>unit</varname> <varname>quantity</varname> <varname>unit</varname>... <varname>direction</varname>
</codeblock>
     这里 <varname>quantity</varname> 是一个有符号数值; <varname>unit</varname> 是
      <codeph>microsecond</codeph>, <codeph>millisecond</codeph>, <codeph>second</codeph>,
      <codeph>minute</codeph>, <codeph>hour</codeph>, <codeph>day</codeph>, <codeph>week</codeph>,
      <codeph>month</codeph>, <codeph>year</codeph>, <codeph>decade</codeph>,
      <codeph>century</codeph>, <codeph>millennium</codeph>, 或者这些单位的缩写或复数形式; 
      <varname>direction</varname> 可以是 <codeph>ago</codeph> 或者 为空. at 符号
      (<codeph>@</codeph>) 是一个可选的无用符号. 不同单位的值会被隐式的加在一起(考虑符号和单位). <codeph>ago</codeph> 导致所有单位的值都变号. 如果 <xref
      href="config_params/guc-list.xml#IntervalStyle"/> 设置为了 <codeph>postgres_verbose</codeph>, 这个语法也用于时间段输出.</p>

    <p>天, 小时, 分, 和秒的数量都可以不用单位指定. 例如, <codeph>'1 12:59:10'</codeph> 与这个 <codeph>'1 day 12 hours 59 min 10 sec'</codeph> 是一样的.  另外,
     年和月可以通过一个划线(减号)来指定;
     例如 <codeph>'200-10'</codeph> 读出来与 <codeph>'200 years
     10 months'</codeph> 一样.  (这些短格式事实上是 SQL 标准仅允许的格式. 当
     <varname>IntervalStyle</varname> 设置给 <codeph>sql_standard</codeph> 时, 也按这样的格式输出.)</p>

    <p>时间段值也可以写成 ISO 8601 时间段的格式, 用标准中的 4.4.3.2 节内容 <codeph>format with designators</codeph>,
    或者用 4.4.3.3 节说明的 <codeph>alternative format</codeph>.
    format with designators 看起来像这个样子:
     <codeblock>
P <varname>quantity</varname> <varname>unit</varname> <varname>quantity</varname> <varname>unit</varname> ...  T  <varname>quantity</varname> <varname>unit</varname> ...
</codeblock>
     这个时间段字符串必须以 <codeph>P</codeph> 开头, 可以包含一个<codeph>T</codeph> 来隔开时间部分. 可以使用的缩写列在 <xref
      href="#topic_abq_gfk_qfb/datatype-interval-iso8601-units" format="dita"/> 中. 
      单位可以忽略, 也可以按任意顺序指定, 但是时间单位必须出现在
      <codeph>T</codeph> 后面. 
      特别地, <codeph>M</codeph> 的含义依赖于它出现在 <codeph>T</codeph> 之前还是之后.</p>

     <table id="datatype-interval-iso8601-units">
      <title>ISO 8601 时间段单位缩写</title>
     <tgroup cols="2">
       <thead>
        <row>
         <entry>缩写</entry>
         <entry>含义</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>Y</entry>
         <entry>年</entry>
        </row>
        <row>
         <entry>M</entry>
         <entry>月 (在日期部分)</entry>
        </row>
        <row>
         <entry>W</entry>
         <entry>周</entry>
        </row>
        <row>
         <entry>D</entry>
         <entry>天</entry>
        </row>
        <row>
         <entry>H</entry>
         <entry>小时</entry>
        </row>
        <row>
         <entry>M</entry>
         <entry>分 (在时间部分)</entry>
        </row>
        <row>
         <entry>S</entry>
         <entry>秒</entry>
        </row>
       </tbody>
      </tgroup>
     </table>

     <p>另一种格式:
<codeblock>
P  <varname>years</varname>-<varname>months</varname>-<varname>days</varname>   T <varname>hours</varname>:<varname>minutes</varname>:<varname>seconds</varname> 
</codeblock>
      字符串必须以 <codeph>P</codeph> 开头, 用字母
      <codeph>T</codeph> 隔开时间段的日期和时间部分.
      数值按类似于 ISO 8601 日期格式书写.</p>

    <p>当书写一个带有 <varname>fields</varname> 格式的时间段常量, 
     或者当把一个字符串赋给带有 <varname>fields</varname>
     格式的时间段列时, 
     没有标志单位的数值根据 <varname>fields</varname> 解释.
     例如 <codeph>INTERVAL '1' YEAR</codeph> 读成 1 年, 而
     <codeph>INTERVAL '1'</codeph> 意味着 1 秒.  
     另外, 带有 <codeph>to the right</codeph> 字段值中 <varname>fields</varname> 允许的右边最不重要的字段会被简单的忽略.
     例如, 写 <codeph>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</codeph>
     结果或丢弃秒部分, 而不会丢掉天的部分.</p>

    <p>根据 SQL 标准, 时间段中所有部分必须有同样的符号, 开头的负号会对所有部分起作用;
    例如, 在时间段字面值 <codeph>'-1 2:03:04'</codeph> 中, 负号应用于天, 以及小时/分/秒 部分.
     Greenplum 允许各部分有不同的符号, 并且传统认为文本中每个部分有独立的符号, 因此上面例子中小时/分/秒会被认为是正值.
     如果 <varname>IntervalStyle</varname> 设置给
      <codeph>sql_standard</codeph> 那么开头的负号就应用到所有部分 (只有当别的地方没有符号时). 要不然, 就用传统 Greenplum 解释.
      为了避免模糊, 如果时间段值是负的, 建议每个部分都带上负号.</p>

    <p>在详细日期格式中, 对于更紧凑的输入格式的几个部分值可以带小数; 例如
     <codeph>'1.5 week'</codeph> 或者 <codeph>'01:02:03.45'</codeph>.  这些输入被转换为月, 天和秒来存储. 
     当这些导致结果的月或者天有小数时, 小数部分被加到低一级的部分上. 转换规则是 1 月 = 30 天, 1 天 = 24 小时.
     例如, <codeph>'1.5 month'</codeph> 变成 1 月 15 天.
     输出中秒从来不会显示小数部分.</p>

    <p><xref href="#topic_abq_gfk_qfb/datatype-interval-input-examples" format="dita"/> 这里给出 <codeph>时间段</codeph> 输入的有效示例.</p>

     <table id="datatype-interval-input-examples">
      <title>时间段输入</title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>举例</entry>
         <entry>说明</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>1-2</entry>
         <entry>SQL 标准格式: 1 年 2 个月</entry>
        </row>
        <row>
         <entry>3 4:05:06</entry>
         <entry>SQL 标准格式: 3 天 4 小时 5 分 6 秒</entry>
        </row>
        <row>
         <entry>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</entry>
         <entry>传统 Postgres 格式: 1 年 2 月 3 天 4 小时 5 分 6 秒</entry>
        </row>
        <row>
         <entry>P1Y2M3DT4H5M6S</entry>
         <entry>ISO 8601 <codeph>format with designators</codeph>: 同上</entry>
        </row>
        <row>
         <entry>P0001-02-03T04:05:06</entry>
         <entry>ISO 8601 <codeph>alternative format</codeph>: 同上</entry>
        </row>
       </tbody>
      </tgroup>
     </table>

    <p>内部地 <codeph>时间段</codeph> 值被存为月, 天,
     和秒. 这是因为一个月中的天数是变化的, 另外因为夏令时的原因, 一天可能有23, 24 或 25 小时.  月和天部分是整数, 秒可以包含小数.  因为时间段通常从常量字符串或 <codeph>时间戳</codeph> 相减得来,
     大部分情况下这种存储挺好, 但有时也有一些意外:

<codeph>
SELECT EXTRACT(hours from '80 minutes'::interval);
 date_part
-----------
         1

SELECT EXTRACT(days from '80 hours'::interval);
 date_part
-----------
         0
</codeph>

     当超过值的正常范围时, 可以用 <codeph>justify_days</codeph> 函数和
     <codeph>justify_hours</codeph> 函数用来调整天和小时.</p>

   </section>

   <section id="datatype-interval-output">
    <title>时间段输出</title>


    <p>时间段类型的输出格式可以设置为以下四种格式之一: 
      <codeph>sql_standard</codeph>, <codeph>postgres</codeph>, <codeph>postgres_verbose</codeph>,
     或者 <codeph>iso_8601</codeph>, 通过命令 <codeph>SET intervalstyle</codeph> 来设置. 默认是 <codeph>postgres</codeph> 格式.
     <xref
      href="#topic_abq_gfk_qfb/interval-style-output-table" format="dita"/> 里有每种输出格式的一些例子.</p>

    <p>如果时间段值符合标准要求 (年-月
    或者 天-时间, 没有混合正负数), <codeph>sql_standard</codeph> 样式产生的输出遵从 SQL 标准中对于时间段字面值的规范.  要不然输出看起来像一个标准的 年-月 字面值, 后面跟着一个 天-时间 字面值字符串, 并且标记上明确的符号来消除混合符号带来的歧义.</p>

    <p> 当 <xref href="config_params/guc-list.xml#DateStyle"/> 
    参数设置为 <codeph>ISO</codeph> 时, <codeph>postgres</codeph> 样式输出与 PostgreSQL 8.4 发布之前的输出一致.</p>

    <p>当 <varname>DateStyle</varname> 参数设置为
    非-<codeph>ISO</codeph> 时, <codeph>postgres_verbose</codeph> 样式的输出与 PostgreSQL 8.4 之前版本的输出一致.</p>

    <p><codeph>iso_8601</codeph> 样式与 ISO 8601 标准中 4.4.3.2 节关于<codeph>format with designators</codeph> 的描述一致.</p>

     <table id="interval-style-output-table">
       <title>时间段输出样式举例</title>
       <tgroup cols="4">
        <thead>
         <row>
          <entry>样式规范</entry>
          <entry>年-月 时间段</entry>
          <entry>天-时间 时间段</entry>
          <entry>混合时间段</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><codeph>sql_standard</codeph></entry>
          <entry>1-2</entry>
          <entry>3 4:05:06</entry>
          <entry>-1-2 +3 -4:05:06</entry>
         </row>
         <row>
          <entry><codeph>postgres</codeph></entry>
          <entry>1 year 2 mons</entry>
          <entry>3 days 04:05:06</entry>
          <entry>-1 year -2 mons +3 days -04:05:06</entry>
         </row>
         <row>
          <entry><codeph>postgres_verbose</codeph></entry>
          <entry>@ 1 year 2 mons</entry>
          <entry>@ 3 days 4 hours 5 mins 6 secs</entry>
          <entry>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</entry>
         </row>
         <row>
          <entry><codeph>iso_8601</codeph></entry>
          <entry>P1Y2M</entry>
          <entry>P3DT4H5M6S</entry>
          <entry>P-1Y-2M3DT-4H-5M-6S</entry>
         </row>
        </tbody>
       </tgroup>
    </table>

   </section>
    </body>
  </topic>
</dita>
