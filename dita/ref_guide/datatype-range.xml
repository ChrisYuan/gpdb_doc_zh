<?xml version="1.0" encoding="utf-8" standalone="no"?>

<!DOCTYPE dita
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "../../../../dtd/ditabase.dtd">
<dita>
   <topic xml:lang="zh-cn" id="rangetypes">
      <title>范围类型</title>
      <body>
         <p> 范围类型是一种数据类型，它代表一种元素类型 (即范围类型的 <term>子类型</term>) 的一个范围.
         举例说, <codeph>timestamp</codeph> 的范围类型可以用来表示一个会议室预定的时间范围.
         在这个例子中，数据类型是 <codeph>tsrange</codeph> (<q>timestamp range</q> 的缩写), 这里
               <codeph>timestamp</codeph> 是子数据类型. 子数据类型必须有一个整体顺序，因此很好确定一个元素值是否在范围值域内，范围值域前，还是范围值域后面. </p>
         <p> 范围类型表示单个范围内的许多元素，所以非常有用, 因为一些概念，像重叠范围，能够用范围类型清晰表达. 为调度目的使用时间和日期是一个更清楚的例子; 对于价格范围,
         仪器的测量范围, 等等, 也很有用. </p>
      </body>
      <topic xml:lang="zh-cn" id="rangetypes-builtin">
         <title>内置范围类型</title>
         <body>
            <p> Greenplum 数据库带有以下内置范围类型: <ul>
                  <li>
                     <p>
                        <codeph>int4range</codeph> -- <codeph>integer</codeph> 范围
                     </p>
                  </li>
                  <li>
                     <p>
                        <codeph>int8range</codeph> -- <codeph>bigint</codeph> 范围
                     </p>
                  </li>
                  <li>
                     <p>
                        <codeph>numrange</codeph> -- <codeph>numeric</codeph> 范围
                     </p>
                  </li>
                  <li>
                     <p>
                        <codeph>tsrange</codeph> -- <codeph>timestamp without time
                           zone</codeph> 范围
                     </p>
                  </li>
                  <li>
                     <p>
                        <codeph>tstzrange</codeph> -- <codeph>timestamp with time
                           zone</codeph> 范围
                     </p>
                  </li>
                  <li>
                     <p>
                        <codeph>daterange</codeph> -- <codeph>date</codeph> 范围
                     </p>
                  </li>
               </ul> 除此之外, 你也可以定义你自己的范围类型; 参见 <xref
                  href="sql_commands/CREATE_TYPE.xml#topic1"/> 了解更多信息. </p>
         </body>
      </topic>
      <topic xml:lang="zh-cn" id="rangetypes-examples">
         <title>举例</title>
         <body>
            <p><codeblock>
CREATE TABLE reservation (room int, during tsrange);
INSERT INTO reservation VALUES
    (1108, '[2010-01-01 14:30, 2010-01-01 15:30)');

-- 包含
SELECT int4range(10, 20) @&gt; 3;

-- 重叠
SELECT numrange(11.1, 22.2) &amp;&amp; numrange(20.0, 30.0);

-- 提取上边界
SELECT upper(int8range(15, 25));

-- 计算交集
SELECT int4range(10, 20) * int4range(15, 25);

-- 是否为空?
SELECT isempty(numrange(1, 5));
</codeblock>
               参见 <xref href="function-summary.xml#functions-range"/> 查看范围类型的操作符和函数完整列表. </p>
         </body>
      </topic>
      <topic xml:lang="zh-cn" id="rangetypes-inclusivity">
         <title>包含边界与非包含边界</title>
         <body>
            <p> 每一个非空范围有两个边界, 下边界和上边界. 所有在这两个边界之间的点都包含在范围内. 包含边界意味着边界点本身也包括在范围内, 而非包含边界意思是边界点不包括在范围内. </p>
            <p> 对于一个范围的文本格式, 包含下边界用
                  <codeph>[</codeph> 表示, 而非包含下边界用
                  <codeph>(</codeph> 表示. 同样, 包含上边界用
                  <codeph>]</codeph> 表示, 而非包含上边界用
                  <codeph>)</codeph> 表示. (参见 <xref href="function-summary.xml#functions-range"/> 了解更多信息.) </p>
            <p> The functions <codeph>lower_inc</codeph> and <codeph>upper_inc</codeph> test the
               inclusivity of the lower and upper bounds of a range value, respectively. </p>
         </body>
      </topic>
      <topic xml:lang="zh-cn" id="rangetypes-infinite">
         <title>Infinite (Unbounded) Ranges</title>
         <body>
            <p> The lower bound of a range can be omitted, meaning that all points less than the
               upper bound are included in the range. Likewise, if the upper bound of the range is
               omitted, then all points greater than the lower bound are included in the range. If
               both lower and upper bounds are omitted, all values of the element type are
               considered to be in the range. </p>
            <p> This is equivalent to considering that the lower bound is <q>minus infinity</q>, or
               the upper bound is <q>plus infinity</q>, respectively. But note that these infinite
               values are never values of the range's element type, and can never be part of the
               range. (So there is no such thing as an inclusive infinite bound -- if you try to
               write one, it will automatically be converted to an exclusive bound.) </p>
            <p> Also, some element types have a notion of <q>infinity</q>, but that is just another
               value so far as the range type mechanisms are concerned. For example, in timestamp
               ranges, <codeph>[today,]</codeph> means the same thing as <codeph>[today,)</codeph>.
               But <codeph>[today,infinity]</codeph> means something different from
                  <codeph>[today,infinity)</codeph> -- the latter excludes the special
                  <codeph>timestamp</codeph> value <codeph>infinity</codeph>. </p>
            <p> The functions <codeph>lower_inf</codeph> and <codeph>upper_inf</codeph> test for
               infinite lower and upper bounds of a range, respectively. </p>
         </body>
      </topic>
      <topic xml:lang="zh-cn" id="rangetypes-io">
         <title>Range Input/Output</title>
         <body>
            <p> The input for a range value must follow one of the following patterns:
               <codeblock>
(<varname>lower-bound</varname>,<varname>upper-bound</varname>)
(<varname>lower-bound</varname>,<varname>upper-bound</varname>]
[<varname>lower-bound</varname>,<varname>upper-bound</varname>)
[<varname>lower-bound</varname>,<varname>upper-bound</varname>]
empty
</codeblock>
               The parentheses or brackets indicate whether the lower and upper bounds are exclusive
               or inclusive, as described previously. Notice that the final pattern is
                  <codeph>empty</codeph>, which represents an empty range (a range that contains no
               points). </p>
            <p> The <varname>lower-bound</varname> may be either a string that is valid input for
               the subtype, or empty to indicate no lower bound. Likewise,
                  <varname>upper-bound</varname> may be either a string that is valid input for the
               subtype, or empty to indicate no upper bound. </p>
            <p> Each bound value can be quoted using <codeph>"</codeph> (double quote) characters.
               This is necessary if the bound value contains parentheses, brackets, commas, double
               quotes, or backslashes, since these characters would otherwise be taken as part of
               the range syntax. To put a double quote or backslash in a quoted bound value, precede
               it with a backslash. (Also, a pair of double quotes within a double-quoted bound
               value is taken to represent a double quote character, analogously to the rules for
               single quotes in SQL literal strings.) Alternatively, you can avoid quoting and use
               backslash-escaping to protect all data characters that would otherwise be taken as
               range syntax. Also, to write a bound value that is an empty string, write
                  <codeph>""</codeph>, since writing nothing means an infinite bound. </p>
            <p> Whitespace is allowed before and after the range value, but any whitespace between
               the parentheses or brackets is taken as part of the lower or upper bound value.
               (Depending on the element type, it might or might not be significant.) </p>
            <p> Examples:
               <codeblock>
-- includes 3, does not include 7, and does include all points in between
SELECT '[3,7)'::int4range;

-- does not include either 3 or 7, but includes all points in between
SELECT '(3,7)'::int4range;

-- includes only the single point 4
SELECT '[4,4]'::int4range;

-- includes no points (and will be normalized to 'empty')
SELECT '[4,4)'::int4range;
</codeblock>
            </p>
         </body>
      </topic>
      <topic xml:lang="zh-cn" id="rangetypes-construct">
         <title>Constructing Ranges</title>
         <body>
            <p> Each range type has a constructor function with the same name as the range type.
               Using the constructor function is frequently more convenient than writing a range
               literal constant, since it avoids the need for extra quoting of the bound values. The
               constructor function accepts two or three arguments. The two-argument form constructs
               a range in standard form (lower bound inclusive, upper bound exclusive), while the
               three-argument form constructs a range with bounds of the form specified by the third
               argument. The third argument must be one of the strings <codeph>()</codeph> ,
                  <codeph>(]</codeph> , <codeph>[)</codeph> , or <codeph>[]</codeph> . For example:
               <codeblock>
-- The full form is: lower bound, upper bound, and text argument indicating
-- inclusivity/exclusivity of bounds.
SELECT numrange(1.0, 14.0, '(]');

-- If the third argument is omitted, '[)' is assumed.
SELECT numrange(1.0, 14.0);

-- Although '(]' is specified here, on display the value will be converted to
-- canonical form, since int8range is a discrete range type (see below).
SELECT int8range(1, 14, '(]');

-- Using NULL for either bound causes the range to be unbounded on that side.
SELECT numrange(NULL, 2.2);
</codeblock>
            </p>
         </body>
      </topic>
      <topic xml:lang="zh-cn" id="rangetypes-discrete">
         <title>Discrete Range Types</title>
         <body>
            <p> A discrete range is one whose element type has a well-defined <q>step</q>, such as
                  <codeph>integer</codeph> or <codeph>date</codeph>. In these types two elements can
               be said to be adjacent, when there are no valid values between them. This contrasts
               with continuous ranges, where it's always (or almost always) possible to identify
               other element values between two given values. For example, a range over the
                  <codeph>numeric</codeph> type is continuous, as is a range over
                  <codeph>timestamp</codeph>. (Even though <codeph>timestamp</codeph> has limited
               precision, and so could theoretically be treated as discrete, it's better to consider
               it continuous since the step size is normally not of interest.) </p>
            <p> Another way to think about a discrete range type is that there is a clear idea of a
                  <q>next</q> or <q>previous</q> value for each element value. Knowing that, it is
               possible to convert between inclusive and exclusive representations of a range's
               bounds, by choosing the next or previous element value instead of the one originally
               given. For example, in an integer range type <codeph>[4,8]</codeph> and
                  <codeph>(3,9)</codeph> denote the same set of values; but this would not be so for
               a range over numeric. </p>
            <p> A discrete range type should have a <i>canonicalization</i> function that is aware
               of the desired step size for the element type. The canonicalization function is
               charged with converting equivalent values of the range type to have identical
               representations, in particular consistently inclusive or exclusive bounds. If a
               canonicalization function is not specified, then ranges with different formatting
               will always be treated as unequal, even though they might represent the same set of
               values in reality. </p>
            <p> The built-in range types <codeph>int4range</codeph>, <codeph>int8range</codeph>, and
                  <codeph>daterange</codeph> all use a canonical form that includes the lower bound
               and excludes the upper bound; that is, <codeph>[)</codeph>. User-defined range types
               can use other conventions, however. </p>
         </body>
      </topic>
      <topic xml:lang="zh-cn" id="rangetypes-defining">
         <title>Defining New Range Types</title>
         <body>
            <p> Users can define their own range types. The most common reason to do this is to use
               ranges over subtypes not provided among the built-in range types. For example, to
               define a new range type of subtype <codeph>float8</codeph>:
               <codeblock>
CREATE TYPE floatrange AS RANGE (
    subtype = float8,
    subtype_diff = float8mi
);

SELECT '[1.234, 5.678]'::floatrange;
</codeblock>
               Because <codeph>float8</codeph> has no meaningful <q>step</q>, we do not define a
               canonicalization function in this example. </p>
            <p> Defining your own range type also allows you to specify a different subtype B-tree
               operator class or collation to use, so as to change the sort ordering that determines
               which values fall into a given range. </p>
            <p> If the subtype is considered to have discrete rather than continuous values, the
                  <cmdname>CREATE TYPE</cmdname> command should specify a <codeph>canonical</codeph>
               function. The canonicalization function takes an input range value, and must return
               an equivalent range value that may have different bounds and formatting. The
               canonical output for two ranges that represent the same set of values, for example
               the integer ranges <codeph>[1, 7]</codeph> and <codeph>[1, 8)</codeph>, must be
               identical. It doesn't matter which representation you choose to be the canonical one,
               so long as two equivalent values with different formattings are always mapped to the
               same value with the same formatting. In addition to adjusting the inclusive/exclusive
               bounds format, a canonicalization function might round off boundary values, in case
               the desired step size is larger than what the subtype is capable of storing. For
               instance, a range type over <codeph>timestamp</codeph> could be defined to have a
               step size of an hour, in which case the canonicalization function would need to round
               off bounds that weren't a multiple of an hour, or perhaps throw an error instead. </p>
            <p> In addition, any range type that is meant to be used with GiST or SP-GiST indexes
               should define a subtype difference, or <codeph>subtype_diff</codeph>, function. (The
               index will still work without <codeph>subtype_diff</codeph>, but it is likely to be
               considerably less efficient than if a difference function is provided.) The subtype
               difference function takes two input values of the subtype, and returns their
               difference (i.e., <varname>X</varname> minus <varname>Y</varname>) represented as a
                  <codeph>float8</codeph> value. In our example above, the function
                  <codeph>float8mi</codeph> that underlies the regular <codeph>float8</codeph> minus
               operator can be used; but for any other subtype, some type conversion would be
               necessary. Some creative thought about how to represent differences as numbers might
               be needed, too. To the greatest extent possible, the <codeph>subtype_diff</codeph>
               function should agree with the sort ordering implied by the selected operator class
               and collation; that is, its result should be positive whenever its first argument is
               greater than its second according to the sort ordering. </p>
            <p> A less-oversimplified example of a <codeph>subtype_diff</codeph> function is: </p>
            <codeblock>
CREATE FUNCTION time_subtype_diff(x time, y time) RETURNS float8 AS
'SELECT EXTRACT(EPOCH FROM (x - y))' LANGUAGE sql STRICT IMMUTABLE;

CREATE TYPE timerange AS RANGE (
    subtype = time,
    subtype_diff = time_subtype_diff
);

SELECT '[11:10, 23:00]'::timerange;
</codeblock>
            <p> See <xref href="sql_commands/CREATE_TYPE.xml#topic1"/> for more information about
               creating range types. </p>
         </body>
      </topic>
      <topic xml:lang="zh-cn" id="rangetypes-indexing">
         <title>Indexing</title>
         <body>
            <p> GiST and SP-GiST indexes can be created for table columns of range types. For
               instance, to create a GiST index:
               <codeblock>
CREATE INDEX reservation_idx ON reservation USING GIST (during);
</codeblock>
               A GiST or SP-GiST index can accelerate queries involving these range operators:
                  <codeph>=</codeph>, <codeph>&amp;&amp;</codeph>, <codeph>&lt;@</codeph>,
                  <codeph>@&gt;</codeph>, <codeph>&lt;&lt;</codeph>, <codeph>&gt;&gt;</codeph>,
                  <codeph>-|-</codeph>, <codeph>&amp;&lt;</codeph>, and <codeph>&amp;&gt;</codeph>
               (see <xref href="function-summary.xml#functions-range"/> for more information). </p>
            <p> In addition, B-tree and hash indexes can be created for table columns of range
               types. For these index types, basically the only useful range operation is equality.
               There is a B-tree sort ordering defined for range values, with corresponding
                  <codeph>&lt;</codeph> and <codeph>&gt;</codeph> operators, but the ordering is
               rather arbitrary and not usually useful in the real world. Range types' B-tree and
               hash support is primarily meant to allow sorting and hashing internally in queries,
               rather than creation of actual indexes. </p>
         </body>
      </topic>
   </topic>
</dita>
