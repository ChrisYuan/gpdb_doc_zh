<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
    <title id="bk20941">COPY</title>
    <body>
        <p id="sql_command_desc">在文件和表之间复制数据。</p>
        <section id="section2">
            <title>概要</title>
            <codeblock id="sql_command_synopsis">COPY <varname>table_name</varname> [(<varname>column_name</varname> [, ...])]
FROM {'<varname>filename</varname>' | PROGRAM '<varname>command</varname>' | STDIN}
[ [ WITH ] ( <varname>option</varname> [, ...] ) ]
[ ON SEGMENT ]

COPY { <varname>table_name</varname> [(<varname>column_name</varname> [, ...])] | (<varname>query</varname>)}
     TO {'<varname>filename</varname>' | PROGRAM '<varname>command</varname>' | STDOUT}
     [ [ WITH ] ( <varname>option</varname> [, ...] ) ]
     [ ON SEGMENT ]</codeblock>
            <p>其中<varname>option</varname>可以是以下之一：
                <codeblock>FORMAT <varname>format_name</varname>
OIDS [ <varname>boolean</varname> ]
FREEZE [ <varname>boolean</varname> ]
DELIMITER '<varname>delimiter_character</varname>'
NULL '<varname>null string</varname>'
HEADER [ <varname>boolean</varname> ]
QUOTE '<varname>quote_character</varname>'
ESCAPE '<varname>escape_character</varname>'
FORCE_QUOTE { ( <varname>column_name</varname> [, ...] ) | * }
FORCE_NOT_NULL ( <varname>column_name</varname> [, ...] )
ENCODING '<varname>encoding_name</varname>'
FILL MISSING FIELDS
LOG ERRORS [ SEGMENT REJECT LIMIT <varname>count</varname> [ ROWS | PERCENT ] ]
IGNORE EXTERNAL PARTITIONS</codeblock>
            </p>
        </section>
        <section id="section3">
            <title>描述</title>
            <p><codeph>COPY</codeph>在Greenplum数据库表和标准文件系统文件之间移动数据。
                <codeph>COPY TO</codeph>将表的内容复制到一个文件（如果在<codeph>ON SEGMENT</codeph>上复制，则将基于segment ID复制到多个文件），
                而<codeph>COPY FROM</codeph>将数据从文件复制到表（将数据追加到表中已有的任何内容）。
                <codeph>COPY TO</codeph>还可以复制<codeph>SELECT</codeph>查询的结果。
            </p>
            <p>如果指定了列列表，则<codeph>COPY</codeph>仅将指定列中的数据复制到文件中或从文件复制。
                如果表中的任何列不在列列表中，则<codeph>COPY FROM</codeph>将为这些列插入默认值。
            </p>
            <p>带有文件名的<codeph>COPY</codeph>指示Greenplum数据库master主机直接从文件读取或写入文件。
                该文件必须可供master主机访问，并且必须从master主机的角度指定名称。
            </p>
            <p>当<codeph>COPY</codeph>与<codeph>ON SEGMENT</codeph>子句一起使用时，
                <codeph>ON SEGMENT</codeph>导致segment创建单独的面向segment的文件，这些文件保留在segment主机上。
                <codeph>ON SEGMENT</codeph>的<varname>filename</varname>参数采用字符串文字<codeph>&lt;SEGID></codeph>（必需），并使用绝对路径或<codeph>&lt;SEG_DATA_DIR></codeph>字符串文字。
                运行<codeph>COPY</codeph>操作时，segment ID和segment数据目录的路径将替换为字符串文字值。
            </p>
            <p>使用复制表（<codeph>DISTRIBUTED REPLICATED</codeph>）作为源的<codeph>COPY TO</codeph>将创建一个文件，其中包含来自单个segment的行，以便目标文件不包含重复的行。
                将<codeph>COPY TO</codeph>与<codeph>ON SEGMENT</codeph>子句一起使用，并将复制表作为源，则在包含所有表行的segment主机上创建目标文件。
            </p>
            <p><codeph>ON SEGMENT</codeph>子句允许您将表数据复制到segment主机上的文件中，以用于诸如在集群之间迁移数据或执行备份之类的操作。
                可以使用诸如<codeph>gpfdist</codeph>之类的工具来恢复由<codeph>ON SEGMENT</codeph>子句创建的细分数据，这对于高速数据加载非常有用。
            </p>
            <note type="warning">建议仅对专业用户使用<codeph>ON SEGMENT</codeph>子句。
            </note>
            <p>指定<codeph>PROGRAM</codeph>时，服务器将执行给定命令并从程序的标准输出中读取或写入程序的标准输入。
                该命令必须从服务器的角度指定，并且可由<codeph>gpadmin</codeph>用户执行。
            </p>
            <p>当指定<codeph>STDIN</codeph>或<codeph>STDOUT</codeph>时，数据将通过客户端和master之间的连接进行传输。
                <codeph>STDIN</codeph>和<codeph>STDOUT</codeph>不能与<codeph>ON SEGMENT</codeph>子句一起使用。
            </p>
            <p>如果使用<codeph>SEGMENT REJECT LIMIT</codeph>，则<codeph>COPY FROM</codeph>操作将在单行错误隔离模式下运行。
                在此版本中，单行错误隔离模式仅适用于输入文件中格式错误的行 - 例如，多余或缺失的属性，错误的数据类型的属性或无效的客户端编码序列。
                约束错误（例如违反<codeph>NOT NULL</codeph>，<codeph>CHECK</codeph>或<codeph>UNIQUE</codeph>约束）仍将在“全有或全无”输入模式下处理。
                用户可以指定可接受的错误行数（基于每个segment），之后将终止整个<codeph>COPY FROM</codeph>操作，并且不会加载任何行。
                错误行的计数是按segment而不是整个加载操作计数的。
                如果未达到每个segment拒绝的限制，那么将加载所有不包含错误的行，并丢弃所有错误行。
                要保留错误行以供进一步检查，请指定<codeph>LOG ERRORS</codeph>子句以捕获错误日志信息。
                错误信息和该行存储在Greenplum内部数据库中。
            </p>
            <sectiondiv id="section4">
                <b>输出</b>
                <p>成功完成后，<codeph>COPY</codeph>命令将返回以下形式的命令标签，其中<varname>count</varname>是复制的行数：
                </p>
                <codeblock>COPY <varname>count</varname></codeblock>
                <p>如果以单行错误隔离模式运行<codeph>COPY FROM</codeph>命令，
                    如果由于格式错误而未加载任何行，则将返回以下通知消息，其中<varname>count</varname>是拒绝的行数：
                </p>
                <codeblock>NOTICE: Rejected <varname>count</varname> badly formatted rows.</codeblock>
            </sectiondiv>
        </section>
        <section id="section5">
            <title>参数</title>
            <parml>
                <plentry>
                    <pt>
                        <varname>table_name</varname>
                    </pt>
                    <pd>现有表的名称（可以由模式指定）。</pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>column_name</varname>
                    </pt>
                    <pd>要复制的列的可选列表。如果未指定列列表，则将复制表的所有列。
                    </pd>
                    <pd>当以文本格式复制时，默认情况下，<codeph>bytea</codeph>类型的列中的一行数据最多可为256MB。
                    </pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>query</varname>
                    </pt>
                    <pd><codeph>SELECT</codeph>或<codeph>VALUES</codeph>命令，其结果将被复制。
                        请注意，查询周围需要括号。
                    </pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>filename</varname>
                    </pt>
                    <pd>输入或输出文件的路径名。
                        输入文件名可以是绝对路径或相对路径，但输出文件名必须是绝对路径。
                        Windows用户可能需要使用<codeph>E''</codeph>字符串并将路径名中使用的所有反斜杠加倍。
                    </pd>
                </plentry>
                <plentry>
                    <pt>PROGRAM '<varname>command</varname>'
                    </pt>
                    <pd>指定要执行的命令。
                        在<codeph>COPY FROM</codeph>中，从命令的标准输出中读取输入，而在<codeph>COPY TO</codeph>中，将输出写入命令的标准输入中。
                        必须从Greenplum数据库master主机系统的角度指定该<varname>command</varname>，并且该命令必须由Greenplum数据库管理员用户（<codeph>gpadmin</codeph>）执行。
                    </pd>
                    <pd>该<varname>command</varname>由shell程序调用。
                        将参数传递给shell时，请删除或转义对shell具有特殊含义的任何特殊字符。
                        出于安全原因，最好使用固定的命令字符串，或者至少避免在字符串中传递任何用户输入。
                    </pd>
                    <pd>当指定<codeph>ON SEGMENT</codeph>时，该命令必须由Greenplum数据库管理员用户（<codeph>gpadmin</codeph>）在所有Greenplum数据库primary segment主机上可执行。
                        该命令由每个Greenplum segment实例执行。
                        <codeph>&lt;SEGID></codeph>在<varname>command</varname>中是必需的。
                    </pd>
                    <pd>有关命令语法要求和指定该子句时要复制的数据的信息，请参见<codeph>ON SEGMENT</codeph>子句。
                    </pd>
                </plentry>
                <plentry>
                    <pt>STDIN</pt>
                    <pd>指定输入来自客户端应用程序。
                        <codeph>STDIN</codeph>不支持<codeph>ON SEGMENT</codeph>子句。
                    </pd>
                </plentry>
                <plentry>
                    <pt>STDOUT</pt>
                    <pd>指定将输出发送到客户端应用程序。
                        <codeph>STDOUT</codeph>不支持<codeph>ON SEGMENT</codeph>子句。
                    </pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>boolean</varname>
                    </pt>
                    <pd>指定是打开还是关闭所选选项。
                        您可以写入<codeph>TRUE</codeph>，<codeph>ON</codeph>或<codeph>1</codeph>以启用该选项，
                        而可以写入<codeph>FALSE</codeph>，<codeph>OFF</codeph>或<codeph>0</codeph>以禁用该选项。
                        布尔值也可以省略，在这种情况下，假定为<codeph>TRUE</codeph>。
                    </pd>
                </plentry>
                <plentry>
                    <pt>FORMAT</pt>
                    <pd>选择要读取或写入的数据格式：<codeph>text</codeph>，<codeph>csv</codeph>（逗号分隔值）或<codeph>binary</codeph>。
                        默认为<codeph>text</codeph>。
                    </pd>
                </plentry>
                <plentry>
                    <pt>OIDS</pt>
                    <pd>指定为每行复制OID。
                        （如果为没有OID的表指定了OIDS，或者在复制查询的情况下，将引发错误。）
                    </pd>
                </plentry>
                <plentry>
                    <pt>FREEZE</pt>
                    <pd>请求复制已冻结的行的数据，就像在运行<codeph>VACUUM FREEZE</codeph>命令之后一样。
                        这旨在用作初始数据加载的性能选项。
                        仅当在当前子事务中已创建或截断了要加载的表，没有打开游标并且该事务没有任何较旧的快照时，行才会被冻结。
                    </pd>
                    <pd>请注意，一旦成功加载数据，所有其他会话将立即能够看到数据。
                        这违反了MVCC可见性的常规规则，指定此选项的用户应注意可能引起的潜在问题。
                    </pd>
                </plentry>
                <plentry>
                    <pt>DELIMITER</pt>
                    <pd>指定用于分隔文件每一行（行）中各列的字符。
                        默认为<codeph>text</codeph>格式的制表符，<codeph>CSV</codeph>格式的逗号。
                        这必须是一个单字节字符。
                        使用<codeph>binary</codeph>格式时，不允许使用此选项。
                    </pd>
                </plentry>
                <plentry>
                    <pt>NULL</pt>
                    <pd>指定表示空值的字符串。
                        默认值为文本格式<codeph>\N</codeph>（反斜杠-N），以及<codeph>CSV</codeph>格式的无引号的空字符串。
                        对于不想将空值与空字符串区分开的情况，甚至可能以<codeph>text</codeph>格式使用空字符串。
                        使用<codeph>binary</codeph>格式时，不允许使用此选项。
                        <note>使用<codeph>COPY FROM</codeph>时，与该字符串匹配的任何数据项都将存储为空值，因此您应确保使用与<codeph>COPY TO</codeph>相同的字符串。
                        </note>
                    </pd>
                </plentry>
                <plentry>
                    <pt>HEADER</pt>
                    <pd>指定文件包含标题行，其中包含文件中每一列的名称。
                        输出时，第一行包含表中的列名，输入时，第一行被忽略。
                        仅当使用<codeph>CSV</codeph>格式时才允许使用此选项。
                    </pd>
                </plentry>
                <plentry>
                    <pt>QUOTE</pt>
                    <pd>指定在引用数据值时要使用的引用字符。
                        默认值为双引号。
                        这必须是一个单字节字符。
                        仅当使用<codeph>CSV</codeph>格式时才允许使用此选项。
                    </pd>
                </plentry>
                <plentry>
                    <pt>ESCAPE</pt>
                    <pd>指定应该出现在与<codeph>QUOTE</codeph>值匹配的数据字符之前的字符。
                        缺省值与<codeph>QUOTE</codeph>值相同（因此，如果引号字符出现在数据中，则将引号字符加倍）。
                        这必须是一个单字节字符。
                        仅当使用<codeph>CSV</codeph>格式时才允许使用此选项。
                    </pd>
                </plentry>
                <plentry>
                    <pt>FORCE_QUOTE</pt>
                    <pd>强制将引号用于每个指定列中的所有非<codeph>NULL</codeph>值。
                        <codeph>NULL</codeph>输出从不引用。
                        如果指定<codeph>*</codeph>，则在所有列中都引用非<codeph>NULL</codeph>值。
                        仅在<codeph>COPY TO</codeph>中和使用<codeph>CSV</codeph>格式时才允许使用此选项。
                    </pd>
                </plentry>
                <plentry>
                    <pt>FORCE_NOT_NULL</pt>
                    <pd>不要将指定列的值与空字符串匹配。
                        在默认情况下，空字符串为空时，这意味着空值将被读取为零长度的字符串，
                        而不是空值，即使没有引号也是如此。
                        仅在<codeph>COPY FROM</codeph>中和使用<codeph>CSV</codeph>格式时才允许使用此选项。
                    </pd>
                </plentry>
                <plentry>
                    <pt>ENCODING</pt>
                    <pd>指定文件以<varname>encoding_name</varname>编码。
                        如果省略此选项，则使用当前的客户端编码。
                        有关更多详细信息，请参见下面的注释。
                    </pd>
                </plentry>
                <plentry>
                    <pt>ON SEGMENT</pt>
                    <pd>在segment主机上指定各个segment数据文件。
                        每个文件都包含由primary segment实例管理的表数据。
                        例如，当使用<codeph>COPY TO...ON SEGMENT</codeph>命令从表中将数据复制到文件时，
                        该命令会在segment主机上为主机上的每个segment实例创建一个文件。
                        每个文件都包含由segment实例管理的表数据。
                    </pd>
                    <pd><codeph>COPY</codeph>命令不会从mirror实例和segment数据文件之间复制数据。
                    </pd>
                    <pd><codeph>ON SEGMENT</codeph>不支持关键字<codeph>STDIN</codeph>和<codeph>STDOUT</codeph>。
                    </pd>
                    <pd><codeph>&lt;SEG_DATA_DIR></codeph>和<codeph>&lt;SEGID></codeph>字符串文字用于使用以下语法指定绝对路径和文件名：
                        <codeblock>COPY <varname>table</varname> [TO|FROM] '&lt;SEG_DATA_DIR>/<varname>gpdumpname</varname>&lt;SEGID>_<varname>suffix</varname>' ON SEGMENT;</codeblock>
                        <parml>
                            <plentry>
                                <pt>&lt;SEG_DATA_DIR></pt>
                                <pd>字符串文字，表示用于<codeph>ON SEGMENT</codeph>复制的segment实例数据目录的绝对路径。
                                    尖括号（<codeph>&lt;</codeph>和<codeph>></codeph>）是用于指定路径的字符串文字的一部分。
                                    运行<codeph>COPY</codeph>时，<codeph>COPY</codeph>用segment路径替换字符串文字。
                                    可以使用绝对路径代替<codeph>&lt;SEG_DATA_DIR></codeph>字符串文字。
                                </pd>
                            </plentry>
                            <plentry>
                                <pt>&lt;SEGID></pt>
                                <pd>字符串文字，表示在复制<codeph>ON SEGMENT</codeph>时要复制的segment实例的content ID号。
                                    当指定<codeph>ON SEGMENT</codeph>时，<codeph>&lt;SEGID></codeph>是文件名的必需部分。
                                    尖括号是用于指定文件名的字符串文字的一部分。
                                </pd>
                                <pd>使用<codeph>COPY TO</codeph>，当运行<codeph>COPY</codeph>命令时，
                                    字符串文字将被segment实例的content ID替换。
                                </pd>
                                <pd>使用<codeph>COPY FROM</codeph>，在文件名中指定segment实例content ID，然后将该文件放在segment实例主机上。
                                    每个主机上的每个primary segment实例必须有一个文件。
                                    运行<codeph>COPY FROM</codeph>命令时，数据从文件复制到segment实例。
                                </pd>
                            </plentry>
                        </parml>
                    </pd>
                    <pd>当指定了<codeph>PROGRAM <varname>command</varname></codeph>子句时，
                        <varname>command</varname>中需要<codeph>&lt;SEGID></codeph>字符串文字，而<codeph>&lt;SEG_DATA_DIR></codeph>字符串文字是可选的。
                        请参阅<xref href="#topic1/section11" format="dita">示例</xref>。
                    </pd>
                    <pd>对于<codeph>COPY FROM...ON SEGMENT</codeph>命令，将数据复制到表中时将检查表分配策略。
                        默认情况下，如果数据行违反表分发策略，则返回错误。
                        您可以使用服务器配置参数<codeph>gp_enable_segment_copy_checking</codeph>禁用分发策略检查。
                        请参阅<xref href="#topic1/section6" format="dita">注释</xref>。
                    </pd>
                </plentry>
                <plentry>
                    <pt>NEWLINE</pt>
                    <pd>指定数据文件中使用的换行符 - <codeph>LF</codeph>（换行，0x0A），
                        <codeph>CR</codeph>（回车，0x0D），或<codeph>CRLF</codeph>（回车加换行，0x0D 0x0A）。
                        如果未指定，Greenplum数据库segment将通过查看接收到的第一行数据并使用遇到的第一个换行符类型来检测换行符类型。
                    </pd>
                </plentry>
                <plentry>
                    <pt>CSV</pt>
                    <pd>选择逗号分隔值（CSV）模式。
                        请参阅<xref href="#topic1/section9" format="dita">CSV格式</xref>。
                    </pd>
                </plentry>
                <plentry>
                    <pt>FILL MISSING FIELDS</pt>
                    <pd>在<codeph>TEXT</codeph>和<codeph>CSV</codeph>的<codeph>COPY FROM</codeph> more中，
                        指定<codeph>FILL MISSING FIELDS</codeph>会将行尾缺少数据字段的数据行设置为<codeph>NULL</codeph>（而不是报告错误）。
                        空白行，具有<codeph>NOT NULL</codeph>约束的字段以及行尾的定界符仍然会报告错误。
                    </pd>
                </plentry>
                <plentry>
                    <pt>LOG ERRORS</pt>
                    <pd>这是一个可选的子句，可以在<codeph>SEGMENT REJECT LIMIT</codeph>子句之前，
                        以捕获有关具有格式错误的行的错误日志信息。
                    </pd>
                    <pd>错误日志信息存储在内部，并可以通过Greenplum数据库内置的SQL函数<codeph>gp_read_error_log()</codeph>进行访问。
                    </pd>
                    <pd>请参阅<xref href="#topic1/section6" format="dita"/>以获取有关错误日志的信息以及用于查看和管理错误日志信息的内置函数。
                    </pd>
                </plentry>
                <plentry>
                    <pt>SEGMENT REJECT LIMIT count [ROWS | PERCENT]</pt>
                    <pd>在单行错误隔离模式下运行<codeph>COPY FROM</codeph>操作。
                        如果输入行存在格式错误，只要在加载操作期间未在任何Greenplum数据库segment实例上达到拒绝限制计数，它们将被丢弃。
                        拒绝限制计数可以指定为行数（默认）或总行数的百分比（1-100）。
                        如果使用<codeph>PERCENT</codeph>，
                        则只有在处理了参数<codeph>gp_reject_percent_threshold</codeph>指定的行数之后，
                        每个segment才开始计算错误行百分比。
                        <codeph>gp_reject_percent_threshold</codeph>的默认值为300行。
                        约束错误（例如违反<codeph>NOT NULL</codeph>，<codeph>CHECK</codeph>或<codeph>UNIQUE</codeph>约束）仍将在“全有或全无”输入模式下处理。
                        如果未达到限制，则将加载所有正确的行，并丢弃所有错误行。
                    </pd>
                    <pd>
                        <note>如果未先触发或未指定<codeph>SEGMENT REJECT LIMIT</codeph>，则Greenplum数据库会限制可能包含格式错误的初始行数。
                            如果前1000行被拒绝，则<codeph>COPY</codeph>操作将停止并回滚。
                            <p>可以使用Greenplum数据库服务器配置参数<codeph>gp_initial_bad_row_limit</codeph>更改初始拒绝行数的限制。
                                有关参数的信息，请参阅<xref href="../config_params/guc_config.xml#topic1"/>。
                            </p>
                        </note>
                    </pd>
                </plentry>
                <plentry>
                    <pt>IGNORE EXTERNAL PARTITIONS</pt>
                    <pd>从分区表复制数据时，不会从外部表的叶子分区复制数据。
                        不复制数据时，将在日志文件中添加一条消息。
                    </pd>
                    <pd>如果未指定此子句，并且Greenplum数据库尝试从作为外部表的叶子分区中复制数据，则返回错误。
                    </pd>
                    <pd>有关指定SQL查询以从作为外部表的叶子分区中复制数据的信息，请参见下一节“注释”。
                    </pd>
                </plentry>
            </parml>
        </section>
        <section id="section6">
            <title>注解</title>
            <p><codeph>COPY</codeph>只能与表一起使用，而不能与外部表或视图一起使用。
                但是，您可以执行<codeph>COPY (SELECT * FROM viewname) TO ...</codeph>
            </p>
            当指定<codeph>ON SEGMENT</codeph>子句时，
            <codeph>COPY</codeph>命令不支持在<codeph>COPY TO</codeph>命令中指定<codeph>SELECT</codeph>语句。
            例如，不支持此命令。
            <codeblock>COPY (SELECT * FROM testtbl) TO '/tmp/mytst&lt;SEGID>' ON SEGMENT</codeblock>
            <p><codeph>COPY</codeph>仅处理特定名称的表，它不会在子表之间复制数据。
                因此，例如<codeph>COPY <varname>table</varname> TO</codeph>显示的数据与<codeph>SELECT * FROM ONLY <codeph>table</codeph></codeph>相同。
                但是<codeph>COPY (SELECT * FROM <varname>table</varname>) TO ...</codeph>可用于转储继承层次结构中的所有数据。
            </p>
            <p>同样，要从具有作为外部表的叶子分区的分区表中复制数据，请使用SQL查询来复制数据。
                例如，如果表<codeph>my_sales</codeph>包含带有作为外部表的叶子分区，
                则此命令<codeph>COPY my_sales TO stdout</codeph>返回错误。
                此命令将数据发送到stdout：
            </p>
            <p><codeph>BINARY</codeph>关键字使所有数据以二进制格式而不是文本形式存储/读取。
                它比普通的文本模式要快一些，但是二进制格式的文件在计算机体系结构和Greenplum数据库版本之间的移植性较差。
                另外，如果数据为二进制格式，则不能以单行错误隔离模式运行<codeph>COPY FROM</codeph>。
            </p>
            <p>您必须对通过<codeph>COPY TO</codeph>读取的表具有<codeph>SELECT</codeph>特权，
                并且对于通过<codeph>COPY FROM</codeph>将值插入其中的表具有插入特权。
                在命令中列出的列上具有列特权就足够了。
            </p>
            <p><codeph>COPY</codeph>命令中命名的文件由数据库服务器而不是客户端应用程序直接读取或写入。
                因此，它们必须位于Greenplum数据库master主机上（而不是客户端）或可被其访问。
                Greenplum数据库系统用户（服务器运行时使用的用户ID），而不是客户端，必须可以访问它们并对其进行读写。
                <codeph>COPY</codeph>命名文件只允许数据库超级用户使用，因为它允许读取或写入服务器有权访问的任何文件。
            </p>
            <p><codeph>COPY FROM</codeph>将调用任何触发器并检查目标表上的约束。
                但是，它不会调用重写规则。
                请注意，在此版本中，不针对单行错误隔离模式评估违反约束的情况。
            </p>
            <p><codeph>COPY</codeph>输入和输出受<codeph>DateStyle</codeph>影响。
                为了确保可移植到可能使用非默认<codeph>DateStyle</codeph>设置的其他Greenplum数据库安装，
                在使用<codeph>COPY TO</codeph>之前，应将<codeph>DateStyle</codeph>设置为ISO。
                避免转储<varname>IntervalStyle</varname>设置为<codeph>sql_standard</codeph>的数据也是一个好主意，
                因为对于<varname>IntervalStyle</varname>不同设置的服务器可能会误解负间隔值。
            </p>
            <p>输入数据将根据<codeph>ENCODING</codeph>选项或当前客户端编码进行解释，
                而输出数据将以<codeph>ENCODING</codeph>或当前客户端编码进行编码，
                即使数据没有通过客户端，而是由服务器直接从文件读取或写入文件 。
            </p>
            <p>在文本模式下从文件复制XML数据时，服务器配置参数<codeph><xref href="../config_params/guc-list.xml#xmloption">xmloption</xref></codeph>会影响对复制的XML数据的验证。
                如果该值为<codeph>content</codeph>（默认值），则将XML数据验证为XML内容片段。
                如果参数值为<codeph>document</codeph>，则将XML数据验证为XML文档。
                如果XML数据无效，则<codeph>COPY</codeph>返回错误。
            </p>
            <p>默认情况下，<codeph>COPY</codeph>在第一个错误时停止操作。
                如果是<codeph>COPY TO</codeph>，这应该不会导致问题，但是目标表已经在<codeph>COPY FROM</codeph>中接收到了较早的行。
                这些行将不可见或不可访问，但仍会占用磁盘空间。
                如果故障在大型<codeph>COPY FROM</codeph>操作中发生，则可能会浪费大量磁盘空间。
                您可能希望调用<codeph>VACUUM</codeph>来恢复浪费的空间。
                另一种选择是使用单行错误隔离模式来过滤掉错误行，同时仍然加载正确的行。
            </p>
            <p>运行<codeph>COPY FROM...ON SEGMENT</codeph>命令时，
                服务器配置参数<codeph>gp_enable_segment_copy_checking</codeph>控制在将数据复制到表中时是否检查表分发策略（来自表<codeph>DISTRIBUTED</codeph>子句）。
                默认设置为检查分发策略。
                如果数据行违反了segment实例的分配策略，则返回错误。
                有关该参数的信息，请参阅<xref href="../config_params/guc_config.xml#topic1"/>。
            </p>
            <p><codeph>COPY TO...ON SEGMENT</codeph>命令生成的表数据可用于通过<codeph>COPY FROM...ON SEGMENT</codeph>恢复表数据。
                但是，使用<codeph>COPY TO</codeph>命令生成文件时，将根据表分发策略来分发恢复到segment的数据。
                如果尝试还原表数据并且在运行<codeph>COPY FROM...ON SEGMENT</codeph>之后更改了表分发策略，则<codeph>COPY</codeph>命令可能会返回表分发策略错误。
            </p>
            <note>如果运行<codeph>COPY FROM...ON SEGMENT</codeph>，
                并且服务器配置参数<codeph>gp_enable_segment_copy_checking</codeph>为<codeph>false</codeph>，则可能需要手动重新分配表数据。
                请参阅<codeph>ALTER TABLE</codeph>子句<codeph>WITH REORGANIZE</codeph>。
            </note>
            <p>当您指定<codeph>LOG ERRORS</codeph>子句时，Greenplum数据库将捕获读取外部表数据时发生的错误。
                您可以查看和管理捕获的错误日志数据。
            </p>
            <ul id="ul_wk3_jdj_bp">
                <li>使用内置的SQL函数<codeph>gp_read_error_log('<varname>table_name</varname>')</codeph>。
                    它要求对<varname>table_name</varname>具有<codeph>SELECT</codeph>特权。
                    本示例使用<codeph>COPY</codeph>命令显示加载数据到表<codeph>ext_expenses</codeph>的错误日志信息：
                    <codeblock>SELECT * from gp_read_error_log('ext_expenses');</codeblock>
                    <p>有关错误日志格式的信息，请参阅<cite>Greenplum数据库管理员指南</cite>中的<xref href="../../admin_guide/load/topics/g-viewing-bad-rows-in-the-error-table-or-error-log.xml#topic58">查看错误日志中的坏行</xref>。
                    </p>
                    <p>如果<varname>table_name</varname>不存在，则该函数返回<codeph>FALSE</codeph>。
                    </p>
                </li>
                <li>如果指定表存在错误日志数据，则新的错误日志数据将附加到现有错误日志数据中。
                    错误日志信息不会复制到mirror。
                </li>
                <li>使用内置的SQL函数<codeph>gp_truncate_error_log('<varname>table_name</varname>')</codeph>删除<varname>table_name</varname>的错误日志数据。
                    它需要表所有者特权。
                    本示例删除将数据移入表<codeph>ext_expenses</codeph>时捕获的错误日志信息：
                    <codeblock>SELECT gp_truncate_error_log('ext_expenses');</codeblock>
                    <p>如果<varname>table_name</varname>不存在，则该函数返回<codeph>FALSE</codeph>。
                    </p>
                    <p>指定<codeph>*</codeph>通配符可删除当前数据库中所有表的错误日志信息。
                        指定字符串<codeph>*.*</codeph>以删除所有数据库错误日志信息，包括由于先前的数据库问题而未被删除的错误日志信息。
                        如果指定<codeph>*</codeph>，则需要数据库所有者特权。
                        如果指定<codeph>*.*</codeph>，则需要操作系统超级用户特权。
                    </p>
                </li>
            </ul>
            <p>当不是超级用户的Greenplum数据库用户运行<codeph>COPY</codeph>命令时，该命令可以由资源队列控制。
                资源队列必须配置有<codeph>ACTIVE_STATEMENTS</codeph>参数，该参数指定分配给该队列的角色可以执行的查询数量的最大限制。
                Greenplum数据库不会将成本值或内存值应用于<codeph>COPY</codeph>命令，仅具有成本或内存限制的资源队列不会影响<codeph>COPY</codeph>命令的运行。
            </p>
            <p>非超级用户只能运行以下类型的<codeph>COPY</codeph>命令：
                <ul id="ul_bf3_2pk_zs">
                    <li>源为<codeph>stdin</codeph>的<codeph>COPY FROM</codeph>命令
                    </li>
                    <li>目标为<codeph>stdout</codeph>的<codeph>COPY TO</codeph>命令
                    </li>
                </ul>
            </p>
            <p>有关资源队列的信息，请参阅<cite>Greenplum数据库管理员指南</cite>中的“使用资源队列进行资源管理”。
            </p>
        </section>
        <section id="section7">
            <title>文件格式</title>
            <p><codeph>COPY</codeph>支持的文件格式。
            </p>
            <sectiondiv id="section8">
                <b>文本格式</b>
                <p>使用文本格式时，读取或写入的数据是一个文本文件，每行一行。
                    行中的列由<varname>delimiter_character</varname>分隔（默认为制表符）。
                    列值本身是由每个属性的数据类型的输出函数生成的字符串，或输入函数可接受的字符串。
                    使用空字符串代替空列。
                    如果输入文件的任何行包含的列比预期的多或少，则<codeph>COPY FROM</codeph>将引发错误。
                    如果指定了<codeph>OIDS</codeph>，则将OID读取或写入为用户数据列之前的第一列。
                </p>
                <p>数据文件具有两个保留字符，它们对于<codeph>COPY</codeph>具有特殊含义：
                </p>
                <ul>
                    <li id="bk138828">指定的分隔符（默认为制表符），用于分隔数据文件中的字段。
                    </li>
                    <li id="bk138829">UNIX样式的换行符（<codeph>\n</codeph>或<codeph>0x0a</codeph>），用于在数据文件中指定新行。
                        强烈建议生成<codeph>COPY</codeph>数据的应用程序将数据换行转换为UNIX样式的换行，
                        而不是Microsoft Windows样式的回车换行（<codeph>\r\n</codeph>或<codeph>0x0a 0x0d</codeph>）。
                    </li>
                </ul>
                <p>如果数据包含这些字符中的任何一个，则必须转义该字符，以便<codeph>COPY</codeph>将其视为数据而不是字段分隔符或新行。
                </p>
                <p>默认情况下，对于文本格式的文件，转义字符是\（反斜杠），对于csv格式的文件，转义字符是<codeph>"</codeph>（双引号）。
                    如果要使用其他转义字符，则可以使用<codeph>ESCAPE AS</codeph>子句来实现。
                    确保选择一个在数据文件中任何地方都没有使用的转义字符作为实际数据值，
                    也可以通过使用<codeph>ESCAPE 'OFF'</codeph>来禁用文本格式文件中的转义。
                </p>
                <p>例如，假设您有一个包含三列的表，并且想使用<codeph>COPY</codeph>加载以下三个字段。
                </p>
                <ul>
                    <li id="bk138844">百分号 = %</li>
                    <li id="bk138845">竖线 = |</li>
                    <li id="bk138887">反斜杠 = \</li>
                </ul>
                <p>您指定的<varname>delimiter_character</varname>为<codeph>|</codeph>（竖线字符），而您指定的转义字符为<codeph>*</codeph>（星号）。
                    数据文件中的格式化行如下所示：
                </p>
                <codeblock>percentage sign = % | vertical bar = <b>*|</b> | backslash = \
                </codeblock>
                <p>请注意，如何使用星号字符（*）对作为数据一部分的管道字符进行转义。
                    另请注意，由于我们使用的是替代转义字符，因此我们不需要转义反斜杠。
                </p>
                <p>如果以下字符作为列值的一部分出现，则必须在其后加上转义字符：转义字符本身，换行符，回车符和当前定界符。
                    您可以使用<codeph>ESCAPE AS</codeph>子句指定其他转义字符。
                </p>
            </sectiondiv>
            <sectiondiv id="section9">
                <b>CSV格式</b>
                <p>此格式选项用于导入和导出许多其他程序（例如电子表格）使用的逗号分隔值（CSV）文件格式。
                    它生成并识别常见的CSV转义机制，而不是Greenplum数据库标准文本格式使用的转义规则。
                </p>
                <p>每个记录中的值由<codeph>DELIMITER</codeph>字符分隔。
                    如果值包含定界符，<codeph>QUOTE</codeph>字符，<codeph>ESCAPE</codeph>字符（默认情况下为双引号），
                    <codeph>NULL</codeph>字符串，回车符或换行符，则整个值将以<codeph>QUOTE</codeph>字符作为前缀和后缀。
                    在特定列中输出非<codeph>NULL</codeph>值时，也可以使用<codeph>FORCE_QUOTE</codeph>强制使用引号。
                </p>
                <p>CSV格式没有区分<codeph>NULL</codeph>值和空字符串的标准方法。
                    Greenplum数据库<codeph>COPY</codeph>通过引用进行处理。
                    输出<codeph>NULL</codeph>作为<codeph>NULL</codeph>参数字符串，
                    并且不加引号，而与<codeph>NULL</codeph>字符串匹配的非<codeph>NULL</codeph>值被加引号。
                    例如，使用默认设置，将<codeph>NULL</codeph>写入未加引号的空字符串，而将空字符串数据值写入双引号（<codeph>""</codeph>）。
                    读取值遵循类似的规则。
                    您可以使用<codeph>FORCE_NOT_NULL</codeph>来防止对特定列进行<codeph>NULL</codeph>输入比较。
                </p>
                <p>由于反斜杠不是<codeph>CSV</codeph>格式的特殊字符，因此<codeph>\.</codeph>（数据结尾标记）也可能会显示为数据值。
                    为避免任何误解，使用<codeph>\.</codeph>在行上显示为单独条目的数据值会在输出上自动加引号，并且在输入上（如果加引号）也不会被解释为数据结束标记。
                    如果要加载的文件是由另一个应用程序创建的，该文件具有未加引号的单列并且可能具有<codeph>\.</codeph>值，则可能需要在输入文件中使用该值。
                </p>
                <note>在<codeph>CSV</codeph>格式中，所有字符均有效。
                    用引号括起来的空格或除<codeph>DELIMITER</codeph>以外的任何字符都将包含这些字符。
                    如果从空白行填充到固定宽度的CSV行的系统中导入数据，则可能会导致错误。
                    如果出现这种情况，在将数据导入Greenplum数据库之前，可能需要预处理CSV文件以删除尾随空白。
                    <p><codeph>CSV</codeph>格式将识别并生成带有引用值的CSV文件，这些值包含嵌入式回车符和换行符。
                        因此，与文本格式的文件相比，文件并非严格限于每行一行
                    </p>
                </note>
                <note>许多程序会生成奇怪的（有时是错误的）CSV文件，因此文件格式更像是约定俗成的标准文件。
                    因此，您可能会遇到一些无法使用此机制导入的文件，并且<codeph>COPY</codeph>可能会生成其他程序无法处理的文件。
                </note>
            </sectiondiv>
            <sectiondiv id="section10">
                <b>二进制格式</b>
                <p>二进制格式选项使所有数据以二进制格式而不是文本形式存储/读取。
                    它比文本和<codeph>CSV</codeph>格式要快一些，但是二进制格式的文件在计算机体系结构和Greenplum数据库版本之间的可移植性较差。
                    同样，二进制格式是非常特定于数据类型的。
                    例如，即使在文本格式下也可以正常工作，但从<codeph>smallint</codeph>列输出二进制数据并将其读入整数列将不起作用。
                </p>
                <p>二进制文件格式由文件头，包含行数据的零个或多个元组和文件尾部组成。
                    文件头和数据按网络字节序排列。
                </p>
                <ul>
                    <li id="bk139298">
                        <b>文件头</b>
                        — 文件头由15个字节的固定字段组成，后跟可变长度的头扩展区。固定字段是：
                        <ul id="ul_rn3_kwf_m4">
                            <li id="bk139303">
                                <b>签名</b>
                                — 11字节序列PGCOPY\n\377\r\n\0
                                - 请注意，零字节是签名的必需部分。
                                （签名旨在方便识别非8位纯净传输所破坏的文件。
                                此签名将通过行尾翻译过滤器，丢失的零字节，丢失的高位或奇偶性更改。）
                            </li>
                            <li id="bk139306">
                                <b>标识字段</b>
                                — 32位整数位掩码，表示文件格式的重要方面。
                                位的编号从0（LSB）到31（MSB）。
                                请注意，该字段以网络字节序存储（最高有效字节在前），文件格式中使用的所有整数字段也是如此。
                                保留位16-31标志关键的文件格式问题；如果读取器发现在此范围内设置了意外的位，则应该中止。
                                保留位0-15标志向后兼容的格式问题；读者只需忽略此范围内设置的任何意外位。
                                当前仅定义一个标志，其余标志必须为零（如果数据具有OID，则位16为1，否则为0）。
                            </li>
                            <li id="bk139315">
                                <b>文件头扩展区长度</b>
                                — 32位整数，文件头其余部分的字节长度，不包括其自身。
                                当前，它为零，并且第一个元组紧随其后。
                                将来对格式进行的更改可能会允许其他数据出现在文件头中。
                                读取器应静默跳过任何不知道该怎么处理的文件头扩展数据。
                                文件头扩展区被设想为包含一系列自识别块。
                                标志字段不是要告诉读取器扩展区中的内容。
                                文件头扩展内容的特定设计留给以后的版本。
                            </li>
                        </ul>
                    </li>
                    <li id="bk139323">
                        <b>元组</b>
                        — 每个元组都以元组中字段数的16位整数计数开头。
                        （当前，表中的所有元组将具有相同的计数，但可能并不总是正确的。）
                        然后，对于元组中的每个字段重复一次，存在一个32位长的字，后跟那么多字节的字段数据。
                        （长度字不包括自身，并且可以为零。）
                        在特殊情况下，-1表示NULL字段值。
                        在NULL情况下，没有值字节。
                        <p>字段之间没有对齐填充或任何其他额外数据。
                        </p>
                        <p>当前，二进制格式文件中的所有数据值都假定为二进制格式（格式代码1）。
                            可以预期，将来的扩展可能会添加一个文件头字段，以允许指定每列格式代码。
                        </p>
                        <p>如果文件中包含OID，则OID字段紧跟在字段计数字之后。
                            这是一个普通字段，只是它不包括在字段计数中。
                            特别是它有一个长度字 - 这将允许处理4字节和8字节的OID，而不会带来太多麻烦，并且如果确实需要的话，也可以将OID显示为null。
                        </p>
                    </li>
                    <li id="bk139334">
                        <b>文件尾</b>
                        — 文件尾部由一个包含<codeph>-1</codeph>的16位整数字组成。
                        这很容易与元组的字段计数字区分开。
                        如果字段计数字既不是<codeph>-1</codeph>也不是预期的列数，则读取器应报告错误。
                        这提供了额外的检查，以防止以某种方式与数据不同步。
                    </li>
                </ul>
            </sectiondiv>
        </section>
        <section id="section11">
            <title>示例</title>
            <p>使用竖线（|）作为字段定界符，将表复制到客户端：</p>
            <codeblock>COPY country TO STDOUT (DELIMITER '|');</codeblock>
            <p>将数据从文件复制到<codeph>country</codeph>表：
            </p>
            <codeblock>COPY country FROM '/home/usr1/sql/country_data';</codeblock>
            <p>仅将名称以'A'开头的国家复制到文件中：</p>
            <codeblock>COPY (SELECT * FROM country WHERE country_name LIKE 'A%') TO
  '/home/usr1/sql/a_list_countries.copy';</codeblock>
            <p>使用单行错误隔离模式将数据从文件复制到<codeph>sales</codeph>表中并记录错误：
            </p>
            <codeblock>COPY sales FROM '/home/usr1/sql/sales_data' LOG ERRORS
   SEGMENT REJECT LIMIT 10 ROWS;</codeblock>
            <p>若要复制segment数据供以后使用，请使用<codeph>ON SEGMENT</codeph>子句。
                <codeph>COPY TO ON SEGMENT</codeph>命令的使用形式如下：
            </p>
            <codeblock>COPY <varname>table</varname> TO '&lt;SEG_DATA_DIR>/<varname>gpdumpname</varname>&lt;SEGID>_<varname>suffix</varname>' ON SEGMENT;</codeblock>
            <p><codeph>&lt;SEGID></codeph>是必需的。
                但是，您可以用绝对路径替换路径中的<codeph>&lt;SEG_DATA_DIR></codeph>字符串文字。
            </p>
            <p>将字符串文字<codeph>&lt;SEG_DATA_DIR></codeph>和<codeph>&lt;SEGID></codeph>传递给<codeph>COPY</codeph>时，
                运行操作时<codeph>COPY</codeph>将填充适当的值。
            </p>
            <p>例如，如果您的<codeph>mytable</codeph>包含以下segment和mirror：
                <codeblock>contentid | dbid | file segment location
    0 | 1 | /home/usr1/data1/gpsegdir0
    0 | 3 | /home/usr1/data_mirror1/gpsegdir0
    1 | 4 | /home/usr1/data2/gpsegdir1
    1 | 2 | /home/usr1/data_mirror2/gpsegdir1</codeblock>
                运行命令：
                <codeblock>COPY mytable TO '&lt;SEG_DATA_DIR>/gpbackup&lt;SEGID>.txt' ON SEGMENT;</codeblock>
                将会产生如下行：
                <codeblock>/home/usr1/data1/gpsegdir0/gpbackup0.txt
/home/usr1/data2/gpsegdir1/gpbackup1.txt</codeblock>
            </p>
            <p>第一列中的内容ID是插入文件路径中的标识符（例如，上面的<codeph>gpsegdir0/gpbackup0.txt</codeph>）。
                文件是在segment上而不是在master上创建的，就像在标准<codeph>COPY</codeph>操作中那样。
                使用<codeph>ON SEGMENT</codeph>复制时，不会为mirror创建任何数据文件。
            </p>
            <p>如果指定了绝对路径，而不是<codeph>&lt;SEG_DATA_DIR></codeph>，例如在语句中
                <codeblock>COPY mytable TO '/tmp/gpdir/gpbackup_&lt;SEGID>.txt' ON SEGMENT;</codeblock>
            </p>
            <p>文件将放置在每个segment的<codeph>/tmp/gpdir</codeph>中。
                如果需要重新分发，<codeph>gpfdist</codeph>工具还可用于使用<codeph>ON SEGMENT</codeph>选项还原由<codeph>COPY TO</codeph>生成的数据文件。
                <note>可以使用诸如<codeph>gpfdist</codeph>之类的工具来还原数据。
                    备份/还原工具不适用于使用<codeph>COPY TO ON SEGMENT</codeph>手动生成的文件。
                </note>
            </p>
            <p>本示例从<codeph>lineitem</codeph>表复制数据，并使用<codeph>PROGRAM</codeph>子句使用<codeph>cat</codeph>实用程序将数据添加到<codeph>/tmp/lineitem_program.csv</codeph>文件。
                该文件放置在Greenplum数据库master上。
                <codeblock>COPY LINEITEM TO PROGRAM 'cat > /tmp/lineitem.csv' CSV;</codeblock>
            </p>
            <p>本示例使用<codeph>PROGRAM</codeph>和<codeph>ON SEGMENT</codeph>子句将数据复制到segment主机上的文件中。
                在segment主机上，<codeph>COPY</codeph>命令将<codeph>&lt;SEGID></codeph>替换为segment content ID，以为segment主机上的每个segment实例创建一个文件。
                <codeblock>COPY LINEITEM TO PROGRAM 'cat > /tmp/lineitem_program&lt;SEGID>.csv' ON SEGMENT CSV;</codeblock>
            </p>
            <p>本示例使用<codeph>PROGRAM</codeph>和<codeph>ON SEGMENT</codeph>子句从segment主机上的文件复制数据。
                从文件复制数据时，<codeph>COPY</codeph>命令用segment content ID替换<codeph>&lt;SEGID></codeph>。
                在segment主机上，每个segment实例必须有一个文件，其中文件名包含segment主机上的segment content ID。
                <codeblock>COPY LINEITEM_4 FROM PROGRAM 'cat /tmp/lineitem_program&lt;SEGID>.csv' ON SEGMENT CSV;</codeblock>
            </p>
        </section>
        <section id="section12">
            <title>兼容性</title>
            <p>SQL标准中没有<codeph>COPY</codeph>语句。
            </p>
            <p>在较早版本的Greenplum数据库中使用了以下语法，仍然被支持：
                <codeblock>COPY <varname>table_name</varname> [(<varname>column_name</varname> [, ...])] FROM
                    {'<varname>filename</varname>' | PROGRAM '<varname>command</varname>' | STDIN}
    [ [WITH]
      [ON SEGMENT]
      [BINARY]
      [OIDS]
      [HEADER]
      [DELIMITER [ AS ] '<varname>delimiter_character</varname>']
      [NULL [ AS ] '<varname>null string</varname>']
      [ESCAPE [ AS ] '<varname>escape</varname>' | 'OFF']
      [NEWLINE [ AS ] 'LF' | 'CR' | 'CRLF']
      [CSV [QUOTE [ AS ] '<varname>quote</varname>']
           [FORCE NOT NULL <varname>column_name</varname> [, ...]]
      [FILL MISSING FIELDS]
      [[LOG ERRORS]
      SEGMENT REJECT LIMIT <varname>count</varname> [ROWS | PERCENT] ]

COPY { <varname>table_name</varname> [(<varname>column_name</varname> [, ...])] | (<varname>query</varname>)} TO {'<varname>filename</varname>' | PROGRAM '<varname>command</varname>' | STDOUT}
      [ [WITH]
        [ON SEGMENT]
        [BINARY]
        [OIDS]
        [HEADER]
        [DELIMITER [ AS ] 'delimiter_character']
        [NULL [ AS ] 'null string']
        [ESCAPE [ AS ] '<varname>escape</varname>' | 'OFF']
        [CSV [QUOTE [ AS ] 'quote']
             [FORCE QUOTE <varname>column_name</varname> [, ...]] | * ]
      [IGNORE EXTERNAL PARTITIONS ]</codeblock>
            </p>
            <p>请注意，在此语法中，<codeph>BINARY</codeph>和<codeph>CSV</codeph>被视为独立的关键字，而不是FORMAT选项的参数。
            </p>
        </section>
        <section id="section13">
            <title>另见</title>
            <p>
                <codeph>
                    <xref href="./CREATE_EXTERNAL_TABLE.xml#topic1" type="topic" format="dita"/>
                </codeph>
            </p>
        </section>
    </body>
</topic>
