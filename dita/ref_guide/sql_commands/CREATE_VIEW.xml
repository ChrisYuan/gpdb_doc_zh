<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
    <title id="cj20941">CREATE VIEW</title>
    <body>
        <p id="sql_command_desc">定义一个新的视图。</p>
        <section id="section2">
            <title>概要</title>
            <codeblock id="sql_command_synopsis">CREATE [OR REPLACE] [TEMP | TEMPORARY] [RECURSIVE] VIEW <varname>name
            </varname> [ ( <varname>column_name</varname> [, ...] ) ]
    [ WITH ( view_option_name [= view_option_value] [, ... ] ) ]
    AS <varname>query</varname>
    [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]</codeblock>
        </section>
        <section id="section3">
            <title>描述</title>
            <p><codeph>CREATE VIEW</codeph>定义查询的视图。
                该视图未物化。
                而是，每次在查询中引用视图时运行查询。
            </p>
            <p><codeph>CREATE OR REPLACE VIEW</codeph>类似，但是如果已经存在相同名称的视图，则将其替换。
                新查询必须生成与现有视图查询生成列相同的列
                （即，相同的列名以相同的顺序，并且具有相同的数据类型），但是它可能会将其他列添加到列表的末尾。
                产生输出列的计算可能完全不同。
            </p>
            <p>如果指定了模式名称，则将在指定的模式中创建视图。
                否则，它将在当前模式中创建。
                临时视图存在于特殊的模式中，因此在创建临时视图时可能不会给出模式名称。
                视图的名称必须与同一模式中的任何其他视图，表，序列，索引或外部表的名称不同。
            </p>
        </section>
        <section id="section4">
            <title>参数</title>
            <parml>
                <plentry>
                    <pt>TEMPORARY | TEMP</pt>
                    <pd>如果指定，则将视图创建为临时视图。
                        临时视图会在当前会话结束时自动删除。
                        存在临时视图时，当前会话将看不到具有相同名称的已有永久表，除非使用模式限定名称来引用它们。
                        如果该视图引用的任何表都是临时表，则该视图将被创建为临时视图（无论是否指定<codeph>TEMPORARY</codeph>）。
                    </pd>
                </plentry>
                <plentry>
                    <pt>RECURSIVE</pt>
                    <pd>创建一个递归视图。语法
                        <codeblock>CREATE RECURSIVE VIEW [ <varname>schema</varname> . ] <varname>view_name</varname> (<varname>column_names</varname>) AS SELECT <varname>...</varname>;</codeblock>
                        等价于
                        <codeblock>CREATE VIEW [ <varname>schema</varname> . ] <varname>view_name</varname> AS WITH RECURSIVE <varname>view_name</varname> (<varname>column_names</varname>) AS (SELECT <varname>...</varname>) SELECT <varname>column_names</varname> FROM <varname>view_name</varname>;</codeblock>
                        必须为递归视图指定视图列名称列表。
                    </pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>name</varname>
                    </pt>
                    <pd>要创建的视图的名称（可以由模式指定）。</pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>column_name</varname>
                    </pt>
                    <pd>用于视图列的名称的可选列表。
                        如果未给出，则从查询中推导出列名。
                    </pd>
                </plentry>
                <plentry>
                    <pt>WITH ( <codeph>view_option_name</codeph> [= <codeph>view_option_value</codeph>] [, ...
                        ] )
                    </pt>
                    <pd>此子句指定视图的可选参数；支持以下参数：
                        <parml>
                            <plentry>
                                <pt>
                                    <codeph>check_option</codeph>
                                    (string)
                                </pt>
                                <pd>该参数可以是<codeph>local</codeph>，也可以是<codeph>cascaded</codeph>，
                                    等效于指定<codeph>WITH [ CASCADED | LOCAL ] CHECK OPTION</codeph>（请参阅下文）。
                                    可以使用<codeph><xref href="ALTER_VIEW.xml#topic1">ALTER VIEW</xref></codeph>在现有视图上更改此选项。
                                </pd>
                            </plentry>
                        </parml>
                        <parml>
                            <plentry>
                                <pt>
                                    <codeph>security_barrier</codeph>
                                    (boolean)
                                </pt>
                                <pd>如果视图旨在提供行级安全性，则应使用此方法。
                                </pd>
                            </plentry>
                        </parml>
                    </pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>query</varname>
                    </pt>
                    <pd><codeph><xref href="./SELECT.xml#topic1" type="topic" format="dita"/></codeph>或<codeph><xref href="./VALUES.xml#topic1" type="topic" format="dita"/></codeph>命令，
                        将提供视图的列和行。
                    </pd>
                </plentry>
            </parml>
        </section>
        <section id="section5">
            <title>注解</title>
            <p>Greenplum数据库中的视图为只读。
                系统不允许在视图上插入，更新或删除。
                通过将视图上的重写规则创建为其他表上的适当操作，可以得到可更新视图的效果。
                有关更多信息，请参见<codeph>CREATE RULE</codeph>。
            </p>
            <p>请注意，视图列的名称和数据类型将按照您想要的方式分配。例如：
            </p>
            <codeblock>CREATE VIEW vista AS SELECT 'Hello World';</codeblock>
            <p>是两种形式的错误形式：列名默认为<codeph>?column?</codeph>，列数据类型默认为<codeph>unknown</codeph>。
                如果要在视图结果中使用字符串文字，请使用类似以下内容的方法：
            </p>
            <codeblock>CREATE VIEW vista AS SELECT text 'Hello World' AS hello;</codeblock>
            <p>对视图中引用的表的访问权限是由视图所有者而不是当前用户（即使当前用户是超级用户）的权限决定的。
                对于超级用户，这可能会造成混淆，因为超级用户通常可以访问所有对象。
                在视图的情况下，如果超级用户不是视图的所有者，那么即使超级用户也必须被明确授予访问该视图中引用的表的权限。
            </p>
            <p>但是，对视图中调用的函数的处理方式与使用视图直接从查询中直接调用它们的方式相同。
                因此，视图的用户必须具有调用该视图使用的任何函数的权限。
            </p>
            <p>如果使用<codeph>ORDER BY</codeph>子句创建视图，
                则从视图执行<codeph>SELECT</codeph>时将忽略<codeph>ORDER BY</codeph>子句。
            </p>
            <p>在现有视图上使用<codeph>CREATE OR REPLACE VIEW</codeph>时，仅更改视图定义的<codeph>SELECT</codeph>规则。
                其他视图属性（包括所有权，权限和non-<codeph>SELECT</codeph>规则）保持不变。
                您必须拥有视图才能替换它（包括作为拥有角色的成员）。
            </p>
        </section>
        <section id="section6">
            <title>示例</title>
            <p>创建一个由所有喜剧电影组成的视图：</p>
            <codeblock>CREATE VIEW comedies AS SELECT * FROM films
WHERE kind = 'comedy';</codeblock>
            <p>这将创建一个视图，其中包含在创建视图时<codeph>film</codeph>表中的列。
                尽管使用<codeph>*</codeph>来创建视图，但是稍后添加到表中的列将不属于视图。
            </p>
            <p>创建一个获取前十名婴儿名字的视图：
            </p>
            <codeblock>CREATE VIEW topten AS SELECT name, rank, gender, year FROM
names, rank WHERE rank &lt; '11' AND names.id=rank.id;</codeblock>
            <p>创建一个由1到100的数字组成的递归视图：
            </p>
            <codeblock>CREATE RECURSIVE VIEW public.nums_1_100 (n) AS
    VALUES (1)
UNION ALL
    SELECT n+1 FROM nums_1_100 WHERE n &lt; 100;</codeblock>
            <p>请注意，尽管此<codeph>CREATE VIEW</codeph>命令中的递归视图名称是模式限定的，但是其内部自引用不是模式限定的。
                这是因为隐式创建的CTE名称不能通过模式限定。
            </p>
        </section>
        <section id="section7">
            <title>兼容性</title>
            <p>SQL标准为<codeph>CREATE VIEW</codeph>语句指定了Greenplum数据库中没有的一些附加功能。
                标准中完整SQL命令的可选子句为：
            </p>
            <ul>
                <li id="cj152047">
                    <b>CHECK OPTION</b>
                    — 此选项与可更新视图有关。
                    将检查视图上的所有<codeph>INSERT</codeph>和<codeph>UPDATE</codeph>命令，
                    以确保数据满足视图定义条件（即，新数据将通过视图可见）。
                    如果不这样做，更新将被拒绝。
                </li>
                <li id="cj152050">
                    <b>LOCAL</b>
                    — 在此视图上检查完整性。
                </li>
                <li id="cj152053">
                    <b>CASCADED</b>
                    — 在此视图和任何从属视图上检查完整性。
                    如果未指定<codeph>CASCADED</codeph>或<codeph>LOCAL</codeph>，则假定为<codeph>CASCADED</codeph>。
                </li>
            </ul>
            <p><codeph>CREATE OR REPLACE VIEW</codeph>是Greenplum数据库语言的扩展。
                临时视图的概念也是如此。
            </p>
        </section>
        <section id="section8">
            <title>另见</title>
            <p>
                <codeph>
                    <xref href="./SELECT.xml#topic1" type="topic" format="dita"/>
                </codeph>
                ,
                <codeph>
                    <xref
                            href="./DROP_VIEW.xml#topic1" type="topic" format="dita"/>
                </codeph>
            </p>
        </section>
    </body>
</topic>
