<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
    <title id="ef20941">SAVEPOINT</title>
    <body>
        <p id="sql_command_desc">在当前事务中定义一个新的保存点。</p>
        <section id="section2">
            <title>概要</title>
            <codeblock id="sql_command_synopsis">SAVEPOINT <varname>savepoint_name</varname>
            </codeblock>
        </section>
        <section id="section3">
            <title>描述</title>
            <p><codeph>SAVEPOINT</codeph>在当前事务中建立一个新的保存点。
            </p>
            <p>保存点是事务内部的特殊标记，它允许回滚在建立事务后执行的所有命令，从而将事务状态恢复到保存点时的状态。
            </p>
        </section>
        <section id="section4">
            <title>参数</title>
            <parml>
                <plentry>
                    <pt><varname>savepoint_name</varname></pt>
                    <pd>新保存点的名称。</pd>
                </plentry>
            </parml>
        </section>
        <section id="section5">
            <title>注解</title>
            <p>使用<codeph>
                <xref href="ROLLBACK_TO_SAVEPOINT.xml#topic1" type="topic" format="dita"/>
            </codeph>回滚到保存点。
                使用<codeph>
                    <xref href="RELEASE_SAVEPOINT.xml#topic1"
                          type="topic" format="dita"/>
                </codeph>销毁一个保存点，并在建立保存点后保持命令执行的效果。
            </p>
            <p>只能在事务块内部建立保存点。
                事务中可以定义多个保存点。
            </p>
        </section>
        <section id="section6">
            <title>示例</title>
            <p>要建立一个保存点，然后撤消建立保存点后执行的所有命令的效果：
            </p>
            <codeblock>BEGIN;
                INSERT INTO table1 VALUES (1);
                SAVEPOINT my_savepoint;
                INSERT INTO table1 VALUES (2);
                ROLLBACK TO SAVEPOINT my_savepoint;
                INSERT INTO table1 VALUES (3);
COMMIT;</codeblock>
            <p>上面的事务将插入值1和3，但不插入2。</p>
            <p>要建立并随后销毁一个保存点：</p>
            <codeblock>BEGIN;
                INSERT INTO table1 VALUES (3);
                SAVEPOINT my_savepoint;
                INSERT INTO table1 VALUES (4);
                RELEASE SAVEPOINT my_savepoint;
COMMIT;</codeblock>
            <p>上述事务将同时插入3和4。</p>
        </section>
        <section id="section7">
            <title>兼容性</title>
            <p>建立另一个具有相同名称的保存点时，SQL要求自动删除一个保存点。
                在Greenplum数据库中，保留了旧的保存点，尽管在回滚或释放时仅使用较新的保存点。
                （释放较新的保存点将使较旧的保存点再次可用于<codeph><xref href="ROLLBACK_TO_SAVEPOINT.xml#topic1" type="topic" format="dita" /></codeph>和<codeph><xref href="RELEASE_SAVEPOINT.xml#topic1" type="topic" format="dita" /></codeph>。）
                否则，<codeph>SAVEPOINT</codeph>完全符合SQL。
            </p>
        </section>
        <section id="section8">
            <title>另见</title>
            <p>
                <codeph>
                    <xref href="BEGIN.xml#topic1" type="topic" format="dita"/>
                </codeph>
                ,
                <codeph>
                    <xref
                            href="COMMIT.xml#topic1" type="topic" format="dita"/>
                </codeph>
                ,
                <codeph>
                    <xref href="ROLLBACK.xml#topic1" type="topic" format="dita"
                    />
                </codeph>
                ,
                <codeph>
                    <xref href="RELEASE_SAVEPOINT.xml#topic1" type="topic"
                          format="dita"/>
                </codeph>
                ,
                <codeph>
                    <xref
                            href="ROLLBACK_TO_SAVEPOINT.xml#topic1" type="topic" format="dita"
                    />
                </codeph>
            </p>
        </section>
    </body>
</topic>
