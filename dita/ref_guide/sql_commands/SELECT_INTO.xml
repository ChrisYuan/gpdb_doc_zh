<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
    <title id="eh20941">SELECT INTO</title>
    <body>
        <p id="sql_command_desc">根据查询结果定义一个新表。</p>
        <section id="section2">
            <title>概要</title>
            <codeblock id="sql_command_synopsis">[ WITH [ RECURSIVE ] <varname>with_query</varname> [, ...] ]
SELECT [ALL | DISTINCT [ON ( <varname>expression</varname> [, ...] )]]
    * | <varname>expression</varname> [AS <varname>output_name</varname>] [, ...]
    INTO [TEMPORARY | TEMP | UNLOGGED ] [TABLE] <varname>new_table</varname>
    [FROM <varname>from_item</varname> [, ...]]
    [WHERE <varname>condition</varname>]
    [GROUP BY <varname>expression</varname> [, ...]]
    [HAVING <varname>condition</varname> [, ...]]
    [{UNION | INTERSECT | EXCEPT} [ALL | DISTINCT ] <varname>select</varname>]
    [ORDER BY <varname>expression</varname> [ASC | DESC | USING <varname>operator</varname>] [NULLS {FIRST | LAST}] [, ...]]
    [LIMIT {<varname>count</varname> | ALL}]
    [OFFSET <varname>start</varname> [ ROW | ROWS ] ]
    [FETCH { FIRST | NEXT } [ <varname>count</varname> ] { ROW | ROWS } ONLY ]
    [FOR {UPDATE | SHARE} [OF <varname>table_name</varname> [, ...]] [NOWAIT] 
    [...]]</codeblock>
        </section>
        <section id="section3">
            <title>描述</title>
            <p><codeph>SELECT INTO</codeph>创建一个新表，并用查询计算的数据填充该表。
                数据不会像常规<codeph>SELECT</codeph>一样返回给客户端。
                新表的列具有与<codeph>SELECT</codeph>的输出列关联的名称和数据类型。
                </p>
        </section>
        <section id="section4">
            <title>参数</title>
            <p><codeph>SELECT INTO</codeph>的大多数参数与<codeph><xref href="SELECT.xml#topic1" type="topic" format="dita" /></codeph>相同。
                </p>
            <parml>
                <plentry>
                    <pt>TEMPORARY</pt>
                    <pt>TEMP</pt>
                    <pd>如果指定，该表将创建为临时表。</pd>
                </plentry>
                <plentry>
                    <pt>UNLOGGED</pt>
                    <pd>如果指定，该表将创建为不计入日志表。
                        写入不计入日志表的数据不会写入预写（WAL）日志，这使它们比普通表快得多。
                        但是，不计入日志表的内容不会复制到mirror实例。
                        同样，不计入日志表也不是崩溃安全的。
                        segment实例崩溃或异常关闭后，该segment上不计入日志表的数据将被截断。
                        在不计入日志表上创建的所有索引也会自动取消计入日志。
                        </pd>
                </plentry>
                <plentry>
                    <pt><varname>new_table</varname></pt>
                    <pd>要创建的表的名称（可以用schema修饰）。</pd>
                </plentry>
            </parml>
        </section>
        <section id="section5">
            <title>示例</title>
            <p>创建一个新表<codeph>films_recent</codeph>，该表仅包含表<codeph>films</codeph>中的最新条目：
                </p>
            <codeblock>SELECT * INTO films_recent FROM films WHERE date_prod &gt;= 
'2016-01-01';</codeblock>
        </section>
        <section id="section6">
            <title>兼容性</title>
            <p>SQL标准使用<codeph>SELECT INTO</codeph>表示将值选择到主机程序的标量变量中，而不是创建新表。
                <codeph>SELECT INTO</codeph>在Greenplum数据库中用于表示表创建的用法是历史性的。
                为此，最好在新应用程序中使用<codeph><xref href="CREATE_TABLE_AS.xml#topic1" type="topic" format="dita"/></codeph>。
                </p>
        </section>
        <section id="section7">
            <title>另见</title>
            <p><codeph><xref href="SELECT.xml#topic1" type="topic" format="dita"/></codeph>,
                        <codeph><xref href="CREATE_TABLE_AS.xml#topic1" type="topic" format="dita"
                    /></codeph></p>
        </section>
    </body>
</topic>
