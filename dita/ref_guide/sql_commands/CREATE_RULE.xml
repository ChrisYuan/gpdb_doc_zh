<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
    <title id="ca20941">CREATE RULE</title>
    <body>
        <p id="sql_command_desc">定义新的重写规则。</p>
        <section id="section2">
            <title>概要</title>
            <codeblock id="sql_command_synopsis">CREATE [OR REPLACE] RULE <varname>name</varname> AS ON <varname>event</varname>
  TO <varname>table_name</varname> [WHERE <varname>condition</varname>]
  DO [ALSO | INSTEAD] { NOTHING | <varname>command</varname> | (<varname>command</varname>; <varname>command</varname>
  ...) }</codeblock>
        </section>
        <section id="section3">
            <title>描述</title>
            <p><codeph>CREATE RULE</codeph>定义了应用于指定表或视图的新规则。
                <codeph>CREATE OR REPLACE RULE</codeph>将创建一个新规则，或为同一表替换一个具有相同名称的现有规则。
            </p>
            <p>Greenplum数据库规则系统允许您定义对数据库表中的插入，更新或删除执行的另一种操作。
                当执行给定表上的给定命令时，规则将导致执行附加或替代命令。
                <codeph>INSTEAD</codeph>规则可以用另一个命令替换给定命令，或导致根本不执行命令。
                规则也可以用于实现SQL视图。
                重要的是要认识到规则实际上是命令转换机制或命令宏。
                转换发生在命令执行开始之前。
                它不会像触发器那样针对每个物理行独立运行。
            </p>
            <p><codeph>ON SELECT</codeph>规则必须是无条件的<codeph>INSTEAD</codeph>规则，并且必须具有由单个<codeph>SELECT</codeph>命令组成的操作。
                因此，<codeph>ON SELECT</codeph>规则有效地将表变成视图，
                其可见内容是规则的<codeph>SELECT</codeph>命令返回的行，而不是表中存储的内容（如果有的话）。
                与创建真实表并为其定义<codeph>ON SELECT</codeph>规则相比，
                写<codeph>CREATE VIEW</codeph>命令被认为是更好的样式。
            </p>
            <p>您可以通过定义<codeph>ON INSERT</codeph>，
                <codeph>ON UPDATE</codeph>和<codeph>ON DELETE</codeph>规则将视图上的更新操作替换为其他表上的适当更新，
                来创建可更新视图的错觉。
                如果要支持<codeph>INSERT RETURNING</codeph>等，请确保在每个规则中放入合适的<codeph>RETURNING</codeph>子句。
            </p>
            <p>如果尝试使用条件规则进行视图更新，则有一个陷阱：
                要允许在视图上执行的每个操作都必须有一个无条件的<codeph>INSTEAD</codeph>规则。
                如果规则是有条件的，或者不是<codeph>INSTEAD</codeph>，则系统仍将拒绝执行更新操作的尝试，
                因为它认为在某些情况下可能最终尝试对视图的虚拟表执行操作。
                如果要处理条件规则中的所有有用情况，请添加无条件的<codeph>DO INSTEAD NOTHING</codeph>规则，
                以确保系统理解它将永远不会被调用它来更新虚拟表。
                然后将条件规则设为non-<codeph>INSTEAD</codeph>；
                在应用它们的情况下，它们会添加到默认的<codeph>INSTEAD NOTHING</codeph>操作中。
                （但是，该方法当前不适用于支持<codeph>RETURNING</codeph>查询。）
            </p>
            <note>
                <p>这是很简单的自动更新的视图（参见<codeph><xref href="CREATE_VIEW.xml#topic1">CREATE VIEW</xref></codeph>）以可更新并不需要用户创建的规则。
                    尽管您仍然可以创建显式规则，但是自动更新转换通常会胜过显式规则。
                </p>
            </note>
        </section>
        <section id="section4">
            <title>参数</title>
            <parml>
                <plentry>
                    <pt>
                        <varname>name</varname>
                    </pt>
                    <pd>要创建的规则的名称。
                        此名称必须与同一表的任何其他规则的名称不同。
                        同一表和同一事件类型上的多个规则以字母名称顺序应用。
                    </pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>event</varname>
                    </pt>
                    <pd>该事件是<codeph>SELECT</codeph>，<codeph>INSERT</codeph>，<codeph>UPDATE</codeph>或<codeph>DELETE</codeph>之一。
                    </pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>table_name</varname>
                    </pt>
                    <pd>规则所适用的表或视图的名称（可以由模式指定）。
                    </pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>condition</varname>
                    </pt>
                    <pd>任何SQL条件表达式（返回布尔值）。
                        条件表达式可能不引用除<codeph>NEW</codeph>和<codeph>OLD</codeph>以外的任何表，并且可能不包含聚合函数。
                        <codeph>NEW</codeph>和<codeph>OLD</codeph>引用参考表中的值。
                        <codeph>NEW</codeph>在<codeph>ON INSERT</codeph>和<codeph>ON UPDATE</codeph>规则中有效，以引用要插入或更新的新行。
                        <codeph>OLD</codeph>在<codeph>ON UPDATE</codeph>和<codeph>ON DELETE</codeph>规则中有效，以引用要更新或删除的现有行。
                    </pd>
                </plentry>
                <plentry>
                    <pt>INSTEAD</pt>
                    <pd><codeph>INSTEAD NOTHING</codeph>指示应执行的命令而不是原始命令。
                    </pd>
                </plentry>
                <plentry>
                    <pt>ALSO</pt>
                    <pd><codeph>ALSO</codeph>指示除了原始命令外，还应该执行命令。
                        如果未指定<codeph>ALSO</codeph>或<codeph>INSTEAD</codeph>，则默认为<codeph>ALSO</codeph>。
                    </pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>command</varname>
                    </pt>
                    <pd>组成规则操作的一个或多个命令。
                        有效的命令是<codeph>SELECT</codeph>，<codeph>INSERT</codeph>，<codeph>UPDATE</codeph>或<codeph>DELETE</codeph>。
                        特殊表名<codeph>NEW</codeph>和<codeph>OLD</codeph>可以用来引用引用表中的值。
                        <codeph>NEW</codeph>在<codeph>ON INSERT</codeph>和<codeph>ON UPDATE</codeph>规则中有效，以引用要插入或更新的新行。
                        <codeph>OLD</codeph>在<codeph>ON UPDATE</codeph>和<codeph>ON DELETE</codeph>规则中有效，以引用要更新或删除的现有行。
                    </pd>
                </plentry>
            </parml>
        </section>
        <section id="section5">
            <title>注解</title>
            <p>您必须是表的所有者才能创建或更改该表的规则。</p>
            <p>注意避免循环规则非常重要。递归规则在规则创建时未得到验证，但是将在执行时报告错误。
            </p>
        </section>
        <section id="section6">
            <title>示例</title>
            <p>创建一个规则，当用户尝试向分区的父表<codeph>rank</codeph>中插入行时，将行插入到子表<codeph>b2001</codeph>中：
            </p>
            <codeblock>CREATE RULE b2001 AS ON INSERT TO rank WHERE gender='M' and
year='2001' DO INSTEAD INSERT INTO b2001 VALUES (NEW.id,
NEW.rank, NEW.year, NEW.gender, NEW.count);</codeblock>
        </section>
        <section id="section7">
            <title>兼容性</title>
            <p><codeph>CREATE RULE</codeph>是Greenplum数据库语言的扩展，整个查询重写系统也是如此。
            </p>
        </section>
        <section id="section8">
            <title>另见</title>
            <p>
                <codeph>
                    <xref href="ALTER_RULE.xml#topic1"/>
                </codeph>
                <codeph>
                    <xref href="./DROP_RULE.xml#topic1"
                          type="topic" format="dita"/>
                </codeph>
                ,
                <codeph>
                    <xref href="./CREATE_TABLE.xml#topic1"
                          type="topic" format="dita"/>
                </codeph>
                ,
                <codeph>
                    <xref href="./CREATE_VIEW.xml#topic1"
                          type="topic" format="dita"/>
                </codeph>
            </p>
        </section>
    </body>
</topic>
