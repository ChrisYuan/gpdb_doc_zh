<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
    <title id="dr20941">FETCH</title>
    <body>
        <p id="sql_command_desc">使用游标从查询中检索行。</p>
        <section id="section2">
            <title>概要</title>
            <codeblock id="sql_command_synopsis">FETCH [ <varname>forward_direction</varname> { FROM | IN } ]
                <varname>cursor_name</varname>
            </codeblock>
            <p>其中<varname>forward_direction</varname>可以为空或以下之一：
            </p>
            <codeblock>    NEXT
    FIRST
    LAST
    ABSOLUTE <varname>count</varname>
    RELATIVE <varname>count</varname>
    <varname>count</varname>
    ALL
    FORWARD
    FORWARD <varname>count</varname>
    FORWARD ALL</codeblock>
        </section>
        <section id="section3">
            <title>描述</title>
            <p><codeph>FETCH</codeph>使用先前创建的游标检索行。
            </p>
            <note>本页在SQL命令级别描述游标的用法。
                如果试图在PL/pgSQL函数中使用游标，则规则是不同的。
                参见<xref href="../extensions/pl_sql.xml#topic1"/>。
            </note>
            <p>游标具有关联的位置，该位置由<codeph>FETCH</codeph>使用。
                光标位置可以在查询结果的第一行之前，结果的任何特定行上，或者在结果的最后一行之后。
                创建后，光标将位于第一行之前。
                在获取了一些行之后，将光标定位在最近检索到的行上。
                如果<codeph>FETCH</codeph>在可用行的末尾运行，则光标将位于最后一行之后。
                <codeph>FETCH ALL</codeph>将始终使光标位于最后一行之后。
            </p>
            <p><codeph>NEXT</codeph>，<codeph>FIRST</codeph>，<codeph>LAST</codeph>，<codeph>ABSOLUTE</codeph>，
                <codeph>RELATIVE</codeph>形式在适当移动光标后获取单行。
                如果没有这样的行，则返回空结果，并且光标将视情况放在第一行之前或最后一行之后。
            </p>
            <p>使用<codeph>FORWARD</codeph>的表单将检索指示的向前行的行数，将光标留在最后返回的行上（如果计数超过可用行数，则在所有行之后）。
                请注意，由于不支持可滚动光标，因此无法在Greenplum数据库中后向移动光标位置。
                您只能使用<codeph>FETCH</codeph>向前移动光标。
            </p>
            <p><codeph>RELATIVE 0</codeph>和<codeph>FORWARD 0</codeph>在不移动光标的情况下请求获取当前行，即重新获取最近获取的行。
                除非光标位于第一行之前或最后一行之后，否则此操作将成功，在这种情况下不会返回任何行。
            </p>
            <sectiondiv id="section4">
                <b>输出</b>
                <p>成功完成后，<codeph>FETCH</codeph>命令将返回以下形式的命令标签：
                </p>
                <codeblock>FETCH <varname>count</varname></codeblock>
                <p>该计数是获取的行数（可能为零）。
                    请注意，在<codeph>psql</codeph>中，实际上不会显示command标记，因为<codeph>psql</codeph>只是显示提取的行。
                </p>
            </sectiondiv>
        </section>
        <section id="section5">
            <title>参数</title>
            <parml>
                <plentry>
                    <pt>
                        <varname>forward_direction</varname>
                    </pt>
                    <pd>定义获取方向和要获取的行数。Greenplum数据库中仅允许前向提取。可以是以下之一：
                    </pd>
                </plentry>
                <plentry>
                    <pt>NEXT</pt>
                    <pd>获取下一行。如果省略了方向，则为默认设置。</pd>
                </plentry>
                <plentry>
                    <pt>FIRST</pt>
                    <pd>提取查询的第一行（与<codeph>ABSOLUTE 1</codeph>相同）。
                        仅当它是使用此光标的第一个<codeph>FETCH</codeph>操作时才允许。
                    </pd>
                </plentry>
                <plentry>
                    <pt>LAST</pt>
                    <pd>获取查询的最后一行（与<codeph>ABSOLUTE -1</codeph>相同）。
                    </pd>
                </plentry>
                <plentry>
                    <pt>ABSOLUTE <varname>count</varname>
                    </pt>
                    <pd>获取查询的指定行。
                        如果计数超出范围，则在最后一行之后定位。
                        只有在被指定了<varname>count</varname>的行向前移动游标位置才能使用。
                    </pd>
                </plentry>
                <plentry>
                    <pt>RELATIVE <varname>count</varname>
                    </pt>
                    <pd>在当前光标位置之前获取查询<varname>count</varname>行的指定行。
                        <codeph>RELATIVE 0</codeph>重新获取当前行（如果有）。
                        仅当<varname>count</varname>向前移动光标位置时才允许。
                    </pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>count</varname>
                    </pt>
                    <pd>获取下一个<varname>count</varname>行数（与<codeph>FORWARD <varname>count</varname></codeph>相同）。
                    </pd>
                </plentry>
                <plentry>
                    <pt>ALL</pt>
                    <pd>提取所有剩余的行（与<codeph>FORWARD ALL</codeph>相同）。
                    </pd>
                </plentry>
                <plentry>
                    <pt>FORWARD</pt>
                    <pd>获取下一行（与<codeph>NEXT</codeph>相同）。
                    </pd>
                </plentry>
                <plentry>
                    <pt>FORWARD <varname>count</varname>
                    </pt>
                    <pd>获取下一个<varname>count</varname>行数。
                        <codeph>FORWARD 0</codeph>重新获取当前行。
                    </pd>
                </plentry>
                <plentry>
                    <pt>FORWARD ALL</pt>
                    <pd>提取所有剩余的行。</pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>cursor_name</varname>
                    </pt>
                    <pd>打开的游标的名称。</pd>
                </plentry>
            </parml>
        </section>
        <section id="section6">
            <title>注解</title>
            <p>Greenplum数据库不支持可滚动光标，因此只能使用<codeph>FETCH</codeph>向前移动光标位置。
            </p>
            <p><codeph>ABSOLUTE</codeph>获取并不比通过相对移动导航到所需行更快：底层实现无论如何都必须遍历所有中间行。
            </p>
            <p><codeph>DECLARE</codeph>用于定义游标。使用<codeph>MOVE</codeph>更改光标位置而不检索数据。
            </p>
        </section>
        <section id="section7">
            <title>示例</title>
            <p>-- 开始事务：</p>
            <codeblock>BEGIN;</codeblock>
            <p>-- 设置游标：</p>
            <codeblock>DECLARE mycursor CURSOR FOR SELECT * FROM films;</codeblock>
            <p>-- 获取游标<codeph>mycursor</codeph>中的前5行：
            </p>
            <codeblock>FETCH FORWARD 5 FROM mycursor;
code | title | did | date_prod | kind | len
-------+-------------------------+-----+------------+----------+-------
BL101 | The Third Man | 101 | 1949-12-23 | Drama | 01:44
BL102 | The African Queen | 101 | 1951-08-11 | Romantic | 01:43
JL201 | Une Femme est une Femme | 102 | 1961-03-12 | Romantic | 01:25
P_301 | Vertigo | 103 | 1958-11-14 | Action | 02:08
P_302 | Becket | 103 | 1964-02-03 | Drama | 02:28</codeblock>
            <p>-- 关闭游标并提交事务：</p>
            <codeblock>CLOSE mycursor;
COMMIT;</codeblock>
            <p>在<codeph>c_films</codeph>光标当前位置的行中更改表<codeph>films</codeph>的<codeph>kind</codeph>列：
            </p>
            <codeblock>UPDATE films SET kind = 'Dramatic' WHERE CURRENT OF c_films;</codeblock>
        </section>
        <section id="section8">
            <title>兼容性</title>
            <p>SQL标准仅允许在嵌入式SQL和模块中使用游标。
                Greenplum数据库允许以交互方式使用游标。
            </p>
            <p>这里描述的<codeph>FETCH</codeph>的变量将数据作为<codeph>SELECT</codeph>结果返回，而不是将其放在主机变量中。
                除此之外，<codeph>FETCH</codeph>与SQL标准完全向上兼容。
            </p>
            <p>涉及<codeph>FORWARD</codeph>的<codeph>FETCH</codeph>形式以及其中隐含<codeph>FORWARD</codeph>的<codeph>FETCH count</codeph>和<codeph>FETCH ALL</codeph>形式都是Greenplum数据库扩展。
                不支持<codeph>BACKWARD</codeph>。
            </p>
            <p>SQL标准只允许在游标名称之前使用<codeph>FROM</codeph>。
                使用<codeph>IN</codeph>或完全不使用它们的选项是扩展。
            </p>
        </section>
        <section id="section9">
            <title>另见</title>
            <p>
                <codeph>
                    <xref href="DECLARE.xml#topic1" type="topic" format="dita"/>
                </codeph>
                ,
                <codeph>
                    <xref
                            href="CLOSE.xml#topic1" type="topic" format="dita"/>
                </codeph>
                ,
                <codeph>
                    <xref
                            href="./MOVE.xml#topic1" type="topic" format="dita"/>
                </codeph>
            </p>
        </section>
    </body>
</topic>
