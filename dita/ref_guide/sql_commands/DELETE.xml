<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
    <title id="cn20941">DELETE</title>
    <body>
        <p id="sql_command_desc">从表中删除行。</p>
        <section id="section2">
            <title>概要</title>
            <codeblock id="sql_command_synopsis">[ WITH [ RECURSIVE ] <varname>with_query</varname> [, ...] ]
DELETE FROM [ONLY] <varname>table</varname> [[AS] <varname>alias</varname>]
      [USING <varname>usinglist</varname>]
      [WHERE <varname>condition</varname> | WHERE CURRENT OF <varname>cursor_name</varname>]
      [RETURNING * | <varname>output_expression</varname> [[AS] <varname>output_name</varname>] [, …]]</codeblock>
        </section>
        <section id="section3">
            <title>描述</title>
            <p><codeph>DELETE</codeph>从指定的表中删除满足<codeph>WHERE</codeph>子句的行。
                如果<codeph>WHERE</codeph>子句不存在，则结果是删除表中的所有行。
                结果是一个有效但空的表。
                </p>
            <p>默认情况下，<codeph>DELETE</codeph>将删除指定表及其所有子表中的行。
                如果只希望从提到的特定表中删除，则必须使用<codeph>ONLY</codeph>子句。
                </p>
            <p>使用数据库中其他表中包含的信息删除表中的行有两种方法：使用子选择，或在<codeph>USING</codeph>子句中指定其他表。
                哪种技术更合适取决于具体情况。
                </p>
            <p>如果指定了<codeph>WHERE CURRENT OF</codeph>子句，则删除的行是从指定游标中最新获取的行。
                </p>
            <p>复制表不支持<codeph>WHERE CURRENT OF</codeph>子句。
                </p>
            <p>可选的<codeph>RETURNING</codeph>子句使<codeph>DELETE</codeph>根据实际删除的每一行计算并返回值。
                可以计算使用该表的列和/或<codeph>USING</codeph>中提到的其他表的列的任何表达式。
                <codeph>RETURNING</codeph>列表的语法与<codeph>SELECT</codeph>的输出列表的语法相同。
                </p>
            <p>您必须对表具有<codeph>DELETE</codeph>特权才能从中删除。</p>
            <note>默认情况下，Greenplum数据库为堆表上的<codeph>DELETE</codeph>操作获取表上的<codeph>EXCLUSIVE</codeph>锁。
                启用全局死锁检测器后，堆表上<codeph>DELETE</codeph>操作的锁定模式为<codeph>ROW EXCLUSIVE</codeph>。
                请参阅<xref href="../../admin_guide/dml.xml#topic_gdd" format="dita"/>。</note>
            <sectiondiv id="section4">
                <b>输出</b>
                <p>成功完成后，<codeph>DELETE</codeph>命令将返回以下形式的命令标签：</p>
                <codeblock>DELETE <varname>count</varname></codeblock>
                <p><varname>count</varname>是已删除的行数。
                    如果<varname>count</varname>为0，则查询没有删除任何行（这不视为错误）。
                    </p>
                <p>如果<codeph>DELETE</codeph>命令包含<codeph>RETURNING</codeph>子句，则结果将类似于<codeph>SELECT</codeph>语句的结果，
                    该<codeph>SELECT</codeph>语句包含<codeph>RETURNING</codeph>列表中定义的列和值，该列和值是在该命令删除的行上计算的。
                    </p>
            </sectiondiv>
        </section>
        <section id="section5">
            <title>参数</title>
            <parml>
                <plentry>
                    <pt><varname>with_query</varname></pt>
                    <pd><codeph>WITH</codeph>子句允许您指定一个或多个子查询，这些子查询可以在<codeph>DELETE</codeph>查询中按名称引用。
                        </pd>
                    <pd>对于包含<codeph>WITH</codeph>子句的<codeph>DELETE</codeph>命令，该子句只能包含<codeph>SELECT</codeph>语句，
                        而<codeph>WITH</codeph>子句不能包含数据修改命令（<codeph>INSERT</codeph>，<codeph>UPDATE</codeph>或<codeph>DELETE</codeph>）。
                        </pd>
                    <pd>请参见<xref href="../../admin_guide/query/topics/CTE-query.xml#topic_zhs_r1s_w1b"/>和<codeph><xref href="SELECT.xml#topic1"/></codeph>获取详细信息。
                        </pd>
                </plentry>
                <plentry>
                    <pt>ONLY</pt>
                    <pd>如果指定，则仅从命名表中删除行。
                        如果未指定，还将处理从命名表继承的任何表。
                        </pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>table</varname>
                    </pt>
                    <pd>现有表的名称（可以用模式指定）。</pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>alias</varname>
                    </pt>
                    <pd>目标表的替代名称。提供别名后，它将完全隐藏表的实际名称。
                        例如，给定<codeph>DELETE FROM foo AS f</codeph>，<codeph>DELETE</codeph>语句的其余部分必须将此表称为<codeph>f</codeph>而不是<codeph>foo</codeph>。
                        </pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>usinglist</varname>
                    </pt>
                    <pd>表表达式的列表，允许其他表中的列以<codeph>WHERE</codeph>条件出现。
                        这类似于可以在<codeph><xref href="./SELECT.xml#topic1" type="topic" format="dita"/></codeph>语句的<codeph>FROM</codeph>子句中指定的表的列表。
                        例如，可以指定表名的别名。
                        除非您希望设置自连接，否则不要在<codeph>usinglist</codeph>中重复目标表。
                        </pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>condition</varname>
                    </pt>
                    <pd>该表达式返回一个布尔类型的值，该值确定要删除的行。</pd>
                </plentry>
                <plentry>
                    <pt>
                        <varname>cursor_name</varname>
                    </pt>
                    <pd>在<codeph>WHERE CURRENT OF</codeph>条件中使用的游标名称。
                        要删除的行是从该游标中最近获取的行。
                        游标必须是对<codeph>DELETE</codeph>目标表的简单非分组查询。
                        </pd>
                    <pd>不能与布尔条件一起指定<codeph>WHERE CURRENT OF</codeph>。
                        </pd>
                    <pd>游标语句的<codeph>DELETE...WHERE CURRENT OF</codeph>游标语句只能在服务器上执行，例如在交互式psql会话或脚本中。
                        语言扩展（例如PL/pgSQL）不支持可更新的游标。
                        </pd>
                    <pd>有关创建游标的更多信息，请参见<codeph><xref href="DECLARE.xml#topic1" type="topic" format="dita"/></codeph>。
                        </pd>
                </plentry>
                <plentry>
                    <pt><varname>output_expression</varname></pt>
                    <pd>删除每一行后，由<codeph>DELETE</codeph>命令计算并返回的表达式。
                        该表达式可以使用在<codeph>USING</codeph>中列出的一个或多个表的任何列名。
                        输入*以返回所有列。
                        </pd>
                </plentry>
                <plentry>
                    <pt><varname>output_name</varname></pt>
                    <pd>用于返回的列的名称。</pd>
                </plentry>
            </parml>
        </section>
        <section id="section6">
            <title>注解</title>
            <p>Greenplum数据库允许您通过在<codeph>USING</codeph>子句中指定其他表来引用<codeph>WHERE</codeph>条件下其他表的列。
                例如，从<codeph>rank</codeph>表中将其命名为<codeph>Hannah</codeph>，可以这样做：
                </p>
            <codeblock>DELETE FROM rank USING names WHERE names.id = rank.id AND 
name = 'Hannah';</codeblock>
            <p>这里实际上发生的是<codeph>rank</codeph>和<codeph>names</codeph>之间的联接，所有成功联接的行都标记为删除。
                此语法不是标准语法。但是，这种连接样式通常比更标准的子选择样式更易于编写和执行，例如：
                </p>
            <codeblock>DELETE FROM rank WHERE id IN (SELECT id FROM names WHERE name 
= 'Hannah');</codeblock>
            <p>当使用<codeph>DELETE</codeph>删除表的所有行时（例如：<codeph>DELETE * FROM <varname>table</varname>;</codeph>），
                Greenplum数据库会添加一个隐式的<codeph>TRUNCATE</codeph>命令（当用户权限允许时）。
                添加的<codeph>TRUNCATE</codeph>命令释放被删除的行占用的磁盘空间，而无需对表进行<codeph>VACUUM</codeph>。
                这提高了后续查询的扫描性能，并使经常在临时表中插入和删除的ELT工作负载受益。
                </p>
            <p>不支持在分区表的特定分区（子表）上直接执行<codeph>UPDATE</codeph>和<codeph>DELETE</codeph>命令。
                而是必须在根分区表（使用<codeph>CREATE TABLE</codeph>命令创建的表）上执行这些命令。
                </p>
        </section>
        <section id="section7">
            <title>示例</title>
            <p>删除除musicals以外的所有films：</p>
            <codeblock>DELETE FROM films WHERE kind &lt;&gt; 'Musical';</codeblock>
            <p>清除表films：</p>
            <codeblock>DELETE FROM films;</codeblock>
            <p>删除已完成的任务，返回已删除行的完整详细信息：
                <codeblock>DELETE FROM tasks WHERE status = 'DONE' RETURNING *;</codeblock></p>
            <p>使用联接删除：</p>
            <codeblock>DELETE FROM rank USING names WHERE names.id = rank.id AND 
name = 'Hannah';</codeblock>
        </section>
        <section id="section8">
            <title>兼容性</title>
            <p>该命令符合SQL标准，不同之处在于<codeph>USING</codeph>和<codeph>RETURNING</codeph>子句是Greenplum数据库扩展，
                以及将<codeph>WITH</codeph>和<codeph>DELETE</codeph>一起使用的功能。
                </p>
        </section>
        <section id="section9">
            <title>另见</title>
            <p><codeph><xref href="DECLARE.xml#topic1" type="topic" format="dita"/></codeph>,
                        <codeph><xref href="./TRUNCATE.xml#topic1" type="topic" format="dita"
                    /></codeph></p>
        </section>
    </body>
</topic>
