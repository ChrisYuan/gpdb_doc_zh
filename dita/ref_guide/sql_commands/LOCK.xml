<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
    <title id="dv20941">LOCK</title>
    <body>
        <p id="sql_command_desc">锁表。</p>
        <section id="section2">
            <title>概要</title>
            <codeblock id="sql_command_synopsis">LOCK [TABLE] [ONLY] name [ * ] [, ...] [IN <varname>lockmode</varname> MODE] [NOWAIT]</codeblock>
            <p>其中<varname>lockmode</varname>是以下之一：</p>
            <codeblock>    ACCESS SHARE | ROW SHARE | ROW EXCLUSIVE | SHARE UPDATE EXCLUSIVE 
  | SHARE | SHARE ROW EXCLUSIVE | EXCLUSIVE | ACCESS EXCLUSIVE</codeblock>
        </section>
        <section id="section3">
            <title>描述</title>
            <p><codeph>LOCK TABLE</codeph>获取表级别的锁，必要时等待释放任何冲突的锁。
                如果指定了<codeph>NOWAIT</codeph>，则<codeph>LOCK TABLE</codeph>不会等待获取所需的锁：如果无法立即获取，则命令将中止并发出错误。
                一旦获得，该锁将在当前事务的其余部分保持。
                没有<codeph>UNLOCK TABLE</codeph>命令；锁始终在事务结束时释放。
                </p>
            <p>当自动获取引用表的命令的锁时，Greenplum数据库始终使用限制最小的锁模式。
                <codeph>LOCK TABLE</codeph>提供了您可能需要更多限制性锁定的情况。
                例如，假设应用程序在<i>Read Committed</i>隔离级别上运行事务，并且需要确保表中的数据在事务期间保持稳定。
                为此，您可以在查询之前在表上获得<codeph>SHARE</codeph>锁定模式。
                这将防止并发数据更改，并确保后续读取表时都能看到已提交数据的稳定视图，
                因为<codeph>SHARE</codeph>锁定模式与写入者获取的<codeph>ROW EXCLUSIVE</codeph>锁冲突，
                并且您的<codeph>LOCK TABLE <varname>name</varname> IN SHARE MODE</codeph>语句将等待直到任何并发持有者<codeph>ROW EXCLUSIVE</codeph>模式的锁将锁定提交或回滚。
                因此，一旦获得了锁，就不会有未提交的未完成的写操作。
                此外，在您释放锁之前，任何人都无法开始。
                </p>
            <p>为了在<codeph>REPEATABLE READ</codeph>或<codeph>SERIALIZABLE</codeph>隔离级别下运行事务时达到类似的效果，
                必须在执行任何<codeph>SELECT</codeph>或数据修改语句之前执行<codeph>LOCK TABLE</codeph>语句。
                当<codeph>REPEATABLE READ</codeph>或<codeph>SERIALIZABLE</codeph>事务的数据视图的第一个<codeph>SELECT</codeph>或数据修改语句开始时，将被冻结。
                事务中稍后的<codeph>LOCK TABLE</codeph>仍将阻止并发写入 - 但不能确保事务读取的内容与最新的提交值相对应。
                </p>
            <p>如果此类事务要更改表中的数据，则应使用<codeph>SHARE ROW EXCLUSIVE</codeph>锁定模式而不是<codeph>SHARE</codeph>模式。
                这样可以确保一次仅运行一个这种类型的事务。
                否则，可能会导致死锁：两个事务可能都同时获取<codeph>SHARE</codeph>模式，然后又无法获取<codeph>ROW EXCLUSIVE</codeph>模式来实际执行其更新。
                请注意，事务自身的锁永远不会发生冲突，因此，当事务拥有<codeph>SHARE</codeph>模式时，它可以获取<codeph>ROW EXCLUSIVE</codeph>模式，但如果其他人拥有<codeph>SHARE</codeph>模式，则不行。
                为避免死锁，请确保所有事务以相同的顺序获取对相同对象的锁定，并且如果单个对象涉及多个锁定模式，则事务应始终首先获取限制性最强的模式。
                </p>
        </section>
        <section id="section4">
            <title>参数</title>
            <parml>
                <plentry>
                    <pt><varname>name</varname></pt>
                    <pd>要锁定的现有表的名称（可以是schema限定）。
                        如果指定<codeph>ONLY</codeph>，则仅锁定该表。
                        如果未指定<codeph>ONLY</codeph>，则表及其所有子表（如果有）将被锁定。
                        （可选）可以在表名称后指定<codeph>*</codeph>，以明确指示包括子表。
                        </pd>
                    <pd>如果给出了多个表，则表将按照<codeph>LOCK TABLE</codeph>命令中指定的顺序一张一张地锁定。
                        </pd>
                </plentry>
                <plentry>
                    <pt><varname>lockmode</varname></pt>
                    <pd>锁定模式指定与该锁定冲突的锁定。
                        如果未指定锁定模式，则使用限制最大的<codeph>ACCESS EXCLUSIVE</codeph>模式。
                        锁定方式如下：
                        <ul id="ul_cnt_mll_m4">
                            <li id="dv157736">ACCESS SHARE — 仅与<codeph>ACCESS EXCLUSIVE</codeph>锁定模式冲突。
                                <codeph>SELECT</codeph>命令在引用的表上获得此模式的锁定。
                                通常，任何仅读取表而不修改表的查询都将获得此锁定模式。
                                </li>
                            <li id="dv157739">ROW SHARE — 与<codeph>EXCLUSIVE</codeph>和<codeph>ACCESS EXCLUSIVE</codeph>锁定模式冲突。
                                <codeph>SELECT FOR SHARE</codeph>命令自动在目标表上获得此模式的锁定（除了在已引用但未选择<codeph>FOR SHARE</codeph>的任何其他表上的<codeph>ACCESS SHARE</codeph>锁定之外）。
                                </li>
                            <li id="dv157742">ROW EXCLUSIVE — 与<codeph>SHARE</codeph>，<codeph>SHARE ROW EXCLUSIVE</codeph>，
                                <codeph>EXCLUSIVE</codeph>和<codeph>ACCESS EXCLUSIVE</codeph>锁定模式冲突。
                                <codeph>INSERT</codeph>和<codeph>COPY</codeph>命令自动在目标表上获取此锁定模式（除了对任何其他引用表的<codeph>ACCESS SHARE</codeph>锁定外），
                                请参见<xref href="#topic1/lock_note" format="dita">注解</xref>。
                                </li>
                            <li id="dv157745">SHARE UPDATE EXCLUSIVE — 与<codeph>SHARE UPDATE EXCLUSIVE</codeph>，
                                <codeph>SHARE</codeph>，<codeph>SHARE ROW EXCLUSIVE</codeph>，<codeph>EXCLUSIVE</codeph>和<codeph>ACCESS EXCLUSIVE</codeph>锁定模式冲突。
                                此模式可防止表发生并发schema更改和<codeph>VACUUM</codeph>运行。
                                由<codeph>VACUUM</codeph>（无<codeph>FULL</codeph>）在堆表和<codeph>ANALYZE</codeph>上获取。
                                </li>
                            <li id="dv157748">SHARE — 与<codeph>ROW EXCLUSIVE</codeph>，<codeph>SHARE UPDATE EXCLUSIVE</codeph>，
                                <codeph>SHARE ROW EXCLUSIVE, EXCLUSIVE</codeph>和<codeph>ACCESS EXCLUSIVE</codeph>锁定模式冲突。
                                此模式可防止表发生并发数据更改。
                                由<codeph>CREATE INDEX</codeph>自动获取。
                                </li>
                            <li id="dv157751">SHARE ROW EXCLUSIVE — 与<codeph>ROW EXCLUSIVE</codeph>，<codeph>SHARE UPDATE EXCLUSIVE</codeph>，
                                <codeph>SHARE</codeph>，<codeph>SHARE ROW EXCLUSIVE</codeph>，<codeph>EXCLUSIVE</codeph>和<codeph>ACCESS EXCLUSIVE</codeph>锁定模式冲突。
                                任何Greenplum数据库命令都不会自动获取此锁定模式。
                                </li>
                            <li id="dv157754">EXCLUSIVE — 与<codeph>ROW SHARE</codeph>，<codeph>ROW EXCLUSIVE</codeph>，<codeph>SHARE UPDATE EXCLUSIVE</codeph>，
                                <codeph>SHARE</codeph>，<codeph>SHARE ROW EXCLUSIVE</codeph>，<codeph>EXCLUSIVE</codeph>和<codeph>ACCESS EXCLUSIVE</codeph>锁定模式冲突。
                                此模式仅允许并发的<codeph>ACCESS SHARE</codeph>锁定，即，只有从表中读取的数据才能与持有该锁定模式的事务并行进行。
                                对于Greenplum数据库中的<codeph>UPDATE</codeph>，<codeph>SELECT FOR UPDATE</codeph>和<codeph>DELETE</codeph>，
                                此锁定模式是自动获取的（与常规PostgreSQL相比，限制性更强）。
                                看<xref href="#topic1/lock_note" format="dita">注解</xref>。
                                </li>
                            <li id="dv157757">ACCESS EXCLUSIVE — 与所有模式的锁定（<codeph>ACCESS SHARE</codeph>，<codeph>ROW SHARE</codeph>，
                                <codeph>ROW EXCLUSIVE</codeph>，<codeph>SHARE UPDATE EXCLUSIVE</codeph>，<codeph>SHARE</codeph>，
                                <codeph>SHARE ROW EXCLUSIVE</codeph>，<codeph>EXCLUSIVE</codeph>和<codeph>ACCESS EXCLUSIVE</codeph>）冲突。
                                这种模式保证了持有者是唯一以任何方式访问表的事务。
                                由<codeph>ALTER TABLE</codeph>，<codeph>DROP TABLE</codeph>，<codeph>TRUNCATE</codeph>，
                                <codeph>REINDEX</codeph>，<codeph>CLUSTER</codeph>和<codeph>VACUUM FULL</codeph>命令自动获取。
                                这是未明确指定模式的<codeph>LOCK TABLE</codeph>语句的默认锁定模式。
                                <codeph>VACUUM</codeph>（无<codeph>FULL</codeph>）也会在处理过程中在追加优化表上短暂获取此锁。
                                </li>
                        </ul>
                        <note id="lock_note">默认情况下，Greenplum数据库为堆表上的<codeph>DELETE</codeph>，
                            <codeph>UPDATE</codeph>和<codeph>SELECT FOR UPDATE</codeph>操作获取表上的<codeph>EXCLUSIVE</codeph>锁。
                            启用全局死锁检测器后，堆表上操作的锁定模式为<codeph>ROW EXCLUSIVE</codeph>。
                            请参阅<xref href="../../admin_guide/dml.xml#topic_gdd" format="dita"/>。
                            </note></pd>
                </plentry>
                <plentry>
                    <pt>NOWAIT</pt>
                    <pd>指定<codeph>LOCK TABLE</codeph>不等待任何冲突的锁被释放：如果不等待就无法立即获取指定的锁，则事务中止。
                        </pd>
                </plentry>
            </parml>
        </section>
        <section id="section5">
            <title>注解</title>
            <p><codeph>LOCK TABLE ... IN ACCESS SHARE MODE</codeph>需要对目标表具有<codeph>SELECT</codeph>特权。
                所有其他形式的<codeph>LOCK</codeph>都需要表级<codeph>UPDATE</codeph>，<codeph>DELETE</codeph>或<codeph>TRUNCATE</codeph>特权。
                </p>
            <p><codeph>LOCK TABLE</codeph>在事务块之外是无用的：该锁定将仅在<codeph>LOCK</codeph>语句完成时就释放。
                因此，如果在事务块外部使用<codeph>LOCK</codeph>，Greenplum数据库将报告错误。
                使用<codeph>BEGIN</codeph>和<codeph>END</codeph>定义事务块。
                </p>
            <p><codeph>LOCK TABLE</codeph>仅处理表级锁，因此涉及<codeph>ROW</codeph>的模式名称都是错误的。
                这些模式名称通常应理解为指示用户获取锁定表中的行级锁定的意图。
                另外，<codeph>ROW EXCLUSIVE</codeph>模式是可共享的表锁。
                请记住，就<codeph>LOCK TABLE</codeph>而言，所有锁定模式都具有相同的语义，只是在哪些模式与哪个模式冲突的规则上有所不同。
                有关如何获取实际的行级锁的信息，请参见<codeph><xref href="./SELECT.xml#topic1" type="topic" format="dita"/></codeph>参考文档中的<codeph>FOR UPDATE/FOR SHARE</codeph>子句。
                </p>
        </section>
        <section id="section6">
            <title>示例</title>
            <p>在执行<codeph>films_user_comments</codeph>表中的插入操作时，在<codeph>films</codeph>表上获得<codeph>SHARE</codeph>锁定：
                </p>
            <codeblock>BEGIN WORK;
LOCK TABLE films IN SHARE MODE;
SELECT id FROM films
    WHERE name = 'Star Wars: Episode I - The Phantom Menace';
-- Do ROLLBACK if record was not returned
INSERT INTO films_user_comments VALUES
    (_id_, 'GREAT! I was waiting for it for so long!');
COMMIT WORK;</codeblock>
            <p>执行删除操作时，对表进行<codeph>SHARE ROW EXCLUSIVE</codeph>锁定：
                </p>
            <codeblock>BEGIN WORK;
LOCK TABLE films IN SHARE ROW EXCLUSIVE MODE;
DELETE FROM films_user_comments WHERE id IN
    (SELECT id FROM films WHERE rating &lt; 5);
DELETE FROM films WHERE rating &lt; 5;
COMMIT WORK;</codeblock>
        </section>
        <section id="section7">
            <title>兼容性</title>
            <p>SQL标准中没有<codeph>LOCK TABLE</codeph>，而是使用<codeph>SET TRANSACTION</codeph>来指定事务的并发级别。
                Greenplum数据库也支持这一点。
                </p>
            <p>除了<codeph>ACCESS SHARE</codeph>，<codeph>ACCESS EXCLUSIVE</codeph>和<codeph>SHARE UPDATE EXCLUSIVE</codeph>锁定模式外，
                Greenplum数据库锁定模式和<codeph>LOCK TABLE</codeph>语法与Oracle中的兼容。
                </p>
        </section>
        <section id="section8">
            <title>另见</title>
            <p><codeph><xref href="BEGIN.xml#topic1" type="topic" format="dita"/></codeph>,
                        <codeph><xref href="./SET_TRANSACTION.xml#topic1" type="topic" format="dita"
                    /></codeph>, <codeph><xref href="./SELECT.xml#topic1" type="topic" format="dita"
                    /></codeph></p>
        </section>
    </body>
</topic>
