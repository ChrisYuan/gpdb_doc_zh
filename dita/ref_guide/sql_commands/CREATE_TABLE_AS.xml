<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
  <title id="ce20941">CREATE TABLE AS</title>
  <body>
    <p id="sql_command_desc">根据查询结果定义一个新表。</p>
    <section id="section2">
      <title>概要</title>
      <codeblock id="sql_command_synopsis">CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE <varname>table_name</varname>
        [ (<varname>column_name</varname> [, ...] ) ]
        [ WITH ( <varname>storage_parameter</varname> [= <varname>value</varname>] [, ... ] ) | WITH OIDS | WITHOUT OIDS ]
        [ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]
        [ TABLESPACE <varname>tablespace_name</varname> ]
        AS <varname>query</varname>
        [ WITH [ NO ] DATA ]
        [ DISTRIBUTED BY (column [, ... ] ) | DISTRIBUTED RANDOMLY | DISTRIBUTED REPLICATED ]
      </codeblock>
      <p>其中<varname>storage_parameter</varname>是：</p>
      <codeblock>   appendoptimized={TRUE|FALSE}
   blocksize={8192-2097152}
   orientation={COLUMN|ROW}
   compresstype={ZLIB|ZSTD|QUICKLZ}
   compresslevel={1-19 | 1}
   fillfactor={10-100}
   oids[=TRUE|FALSE]</codeblock>
    </section>
    <section id="section3">
      <title>描述</title>
      <p><codeph>CREATE TABLE AS</codeph>创建一个表，
        并用<codeph><xref href="./SELECT.xml#topic1" type="topic" format="dita"/></codeph>命令计算的数据填充该表。
        表列具有与<codeph>SELECT</codeph>的输出列关联的名称和数据类型，但是您可以通过提供新列名称的显式列表来覆盖列名称。
        </p>
      <p><codeph>CREATE TABLE AS</codeph>创建一个新表并仅对查询进行一次取值以填充一次新表。
        新表将不会跟踪对查询源表的后续更改。
        </p>
    </section>
    <section id="section4">
      <title>参数</title>
      <parml>
        <plentry>
          <pt>GLOBAL | LOCAL</pt>
          <pd>忽略兼容性。
            这些关键字已弃用；有关详细信息，请参考<xref href="CREATE_TABLE.xml#topic1"/>。</pd>
        </plentry>
        <plentry>
          <pt>TEMPORARY | TEMP</pt>
          <pd>如果指定，则将新表创建为临时表。
            临时表在会话结束时或在当前事务结束时自动删除（请参见<codeph>ON COMMIT</codeph>）。
            临时表存在时，具有相同名称的现有永久表在当前会话中不可见，除非使用模式限定名称引用它们。
            在临时表上创建的所有索引也会自动成为临时索引。
            </pd>
        </plentry>
        <plentry>
          <pt>UNLOGGED</pt>
          <pd>如果指定，该表将创建为未记录表。
            写入未记录表的数据不会写入预写（WAL）日志，这使它们比普通表快得多。
            但是，未记录表的内容不会复制到mirror实例。
            同样，未记录的表也不是崩溃安全的。
            segment实例崩溃或异常关闭后，该segment上未记录表的数据将被截断。
            在未记录表上创建的所有索引也会自动成为未记录索引。
            </pd>
        </plentry>
        <plentry>
          <pt>
            <varname>table_name</varname>
          </pt>
          <pd>要创建的新表的名称（可以由模式指定）。</pd>
        </plentry>
        <plentry>
          <pt>
            <varname>column_name</varname>
          </pt>
          <pd>新表中的列名。如果未提供列名，则它们取自查询的输出列名。
            </pd>
        </plentry>
        <plentry>
          <pt>WITH ( <varname>storage_parameter=value</varname> )</pt>
          <pd><codeph>WITH</codeph>子句可用于设置表或其索引的存储选项。
            请注意，您还可以通过在分区规范中声明<codeph>WITH</codeph>子句，在特定分区或子分区上设置不同的存储参数。
            可以使用以下存储选项：
            </pd>
          <pd><b>appendoptimized</b> — 设置为<codeph>TRUE</codeph>可将表创建为追加优化的表。
            如果为<codeph>FALSE</codeph>或未声明，则将表创建为常规堆存储表。
            </pd>
          <pd><b>blocksize</b> — 设置为表中每个块的大小（以字节为单位）。
            <codeph>blocksize</codeph>必须介于8192和2097152字节之间，并且是8192的倍数。默认值为32768。
            </pd>
          <pd><b>orientation</b> — 设置为<codeph>column</codeph>以用于列式存储，或设置为<codeph>row</codeph>（默认）以用于行式存储。
            仅当<codeph>appendoptimized=TRUE</codeph>时，此选项才有效。
            堆存储表只能是面向行的。</pd>
          <pd><b>compresstype</b> — 设置为<codeph>ZLIB</codeph>（默认值），<codeph>ZSTD</codeph>或<codeph>QUICKLZ</codeph><sup>1</sup>以指定使用的压缩类型。
            值<codeph>NONE</codeph>禁用压缩。
            Zstd提供速度或良好的压缩率，可通过<codeph>compresslevel</codeph>选项进行调整。
            提供QuickLZ和zlib是为了向后兼容。
            在通常的工作负载上，Zstd的性能优于这些压缩类型。
            仅当<codeph>appendoptimized=TRUE</codeph>时，<codeph>compresstype</codeph>选项才有效。
            <note type="note"><sup>1</sup>QuickLZ压缩仅在Pivotal Greenplum数据库的商业版本中可用。</note></pd>
          <pd><b>compresslevel</b> — 对于附加优化表的Zstd压缩，请将其设置为1（最快压缩）到19（最高压缩率）之间的整数值。
            对于zlib压缩，有效范围是1到9。
            QuickLZ压缩级别只能设置为1。
            如果未声明，则默认值为1。
            <codeph>compresslevel</codeph>选项仅在<codeph>appendoptimized=TRUE</codeph>时有效。
            </pd>
          <pd><b>fillfactor</b> — 有关此索引存储参数的更多信息，请参见<codeph><xref href="CREATE_INDEX.xml#topic1" type="topic" format="dita"/></codeph>。</pd>
          <pd><b>oids</b> — 设置为<codeph>oids=FALSE</codeph>（默认值），以便不为行分配对象标识符。
            Greenplum强烈建议您在创建表时不要启用OIDS。
            在大型表上（例如典型的Greenplum数据库系统中的表），对表行使用OID可能会导致32位OID计数器的折回。
            一旦计数器回绕，就不能再认为OID是唯一的，这不仅使它们对用户应用程序无用，
            而且还会在Greenplum数据库系统catalog表中引起问题。
            此外，从表中排除OID会使表每行存储在磁盘上所需的空间减少了每行4个字节，从而略微提高了性能。
            面向列的表不允许使用OIDS。
            </pd>
        </plentry>
        <plentry>
          <pt>ON COMMIT</pt>
          <pd>可以使用<codeph>ON COMMIT</codeph>控制事务块末尾的临时表的行为。
            这三个选项是：</pd>
          <pd>PRESERVE ROWS — 临时表的事务结束时不会采取任何特殊操作。这是默认行为。
            </pd>
          <pd>DELETE ROWS — 临时表中的所有行将在每个事务块的末尾删除。
            本质上，每次提交都会自动执行一次<codeph>TRUNCATE</codeph>。
            </pd>
          <pd>DROP — 临时表将在当前事务块的末尾删除。</pd>
        </plentry>
        <plentry>
          <pt>TABLESPACE <varname>tablespace_name</varname></pt>
          <pd><varname>tablespace_name</varname>参数是要在其中创建新表的表空间的名称。
            如果未指定，则使用数据库的默认表空间。
            </pd>
        </plentry>
        <plentry>
          <pt>AS <varname>query</varname></pt>
          <pd><codeph><xref href="./SELECT.xml#topic1" type="topic" format="dita"/></codeph>，
            <codeph><xref href="SELECT.xml#topic1/table-command">TABLE</xref></codeph>或<codeph><xref href="./VALUES.xml#topic1" type="topic" format="dita"/></codeph>命令，
            或运行准备的<codeph>SELECT</codeph>或<codeph>VALUES</codeph>查询的<codeph><xref href="./EXECUTE.xml#topic1" type="topic" format="dita"/></codeph>命令。
            </pd>
        </plentry>
        <plentry>
          <pt>DISTRIBUTED BY ({<varname>column</varname> [<varname>opclass</varname>]}, [ ... ]
            )</pt>
          <pt>DISTRIBUTED RANDOMLY</pt>
          <pt>DISTRIBUTED REPLICATED</pt>
          <pd>用于声明表的Greenplum数据库分发策略。
            <codeph>DISTRIBUTED BY</codeph>使用具有一个或多个声明为分发键的列的哈希分发。
            为了获得最均匀的数据分配，分发键应为表的主键或唯一列（或一组列）。
            如果无法做到这一点，则可以选择<codeph>DISTRIBUTED RANDOMLY</codeph>，它将数据轮询发送到segment实例。
            </pd>
          <pd><codeph>DISTRIBUTED REPLICATED</codeph>将表中的所有行复制到所有Greenplum数据库segment。
            它不能与分区表或从其他表继承的表一起使用。
            </pd>
          <pd>如果在创建表时未指定<cmdname>DISTRIBUTED BY</cmdname>子句，
            则Greenplum数据库服务器配置参数<codeph>gp_create_table_random_default_distribution</codeph>将控制默认表分发策略。
            如果未指定分发策略，Greenplum数据库将遵循以下规则来创建表。
            <ul id="ul_ejv_m1b_kr">
              <li>如果Postgres查询优化器创建了表，并且该参数的值是<codeph>off</codeph>，则根据命令确定表分配策略。
                </li>
              <li>如果Postgres查询优化器创建了表，并且该参数的值为<codeph>on</codeph>，则表分配策略是随机的。
                </li>
              <li>如果GPORCA创建表，则表分配策略是随机的。参数值无效。
                </li>
            </ul></pd>
          <pd>有关设置默认表分发策略的更多信息，
            请参见<xref href="../config_params/guc-list.xml#gp_create_table_random_default_distribution"><codeph>gp_create_table_random_default_distribution</codeph></xref>。
            有关Postgres查询优化器和GPORCA的信息，
            请参阅<cite>Greenplum数据库管理员指南</cite>中的<xref href="../../admin_guide/query/topics/query.xml#topic1">查询数据</xref>。
            </pd>
        </plentry>
      </parml>
    </section>
    <section id="section5">
      <title>注解</title>
      <p>该命令在功能上类似于<codeph><xref href="./SELECT_INTO.xml#topic1" type="topic" format="dita"/></codeph>，但它是首选的，
        因为它不太可能与<codeph>SELECT INTO</codeph>语法的其他用法混淆。
        此外，<codeph>CREATE TABLE AS</codeph>提供了<codeph>SELECT INTO</codeph>提供的功能的超集。
        </p>
      <p><codeph>CREATE TABLE AS</codeph>可用于从外部表数据源快速加载数据。
        请参阅<codeph><xref href="CREATE_EXTERNAL_TABLE.xml#topic1" type="topic" format="dita"/></codeph>。
        </p>
    </section>
    <section id="section6">
      <title>示例</title>
      <p>创建一个新表<codeph>films_recent</codeph>，该表仅包含表<codeph>films</codeph>中的最新条目：
        </p>
      <codeblock>CREATE TABLE films_recent AS SELECT * FROM films WHERE 
date_prod &gt;= '2007-01-01';</codeblock>
      <p>使用预编译语句创建一个新的临时表<codeph>films_recent</codeph>，该表仅包含表films中的最新条目。
        新表具有OID，并将在提交时删除：
        </p>
      <codeblock>PREPARE recentfilms(date) AS SELECT * FROM films WHERE 
date_prod &gt; $1;
CREATE TEMP TABLE films_recent WITH (OIDS) ON COMMIT DROP AS 
EXECUTE recentfilms('2007-01-01');</codeblock>
    </section>
    <section id="section7">
      <title>兼容性</title>
      <p><codeph>CREATE TABLE AS</codeph>符合SQL标准，但以下情况除外：</p>
      <ul>
        <li id="ce151719">该标准要求在子查询子句两边加上括号；在Greenplum数据库中，这些括号是可选的。
          </li>
        <li id="ce151721">该标准定义了<codeph>WITH [NO] DATA</codeph>子句；Greenplum数据库当前未实现此功能。
          Greenplum数据库提供的行为等同于标准的<codeph>WITH DATA</codeph>情况。
          可以通过将<codeph>LIMIT 0</codeph>附加到查询来模拟<codeph>WITH NO DATA</codeph>。
          </li>
        <li id="ce151723">Greenplum数据库对临时表的处理方式与标准处理方式有所不同。
          有关详细信息，请参见<codeph>CREATE TABLE</codeph>。
          </li>
        <li id="ce151725"><codeph>WITH</codeph>子句是Greenplum数据库扩展。
          storage参数和<codeph>OIDs</codeph>都不在标准中。
          </li>
        <li id="ce151727">表空间的Greenplum数据库概念不是该标准的一部分。
          <codeph>TABLESPACE</codeph>子句是扩展。
          </li>
      </ul>
    </section>
    <section id="section8">
      <title>另见</title>
      <p><codeph><xref href="CREATE_EXTERNAL_TABLE.xml#topic1" type="topic" format="dita"
        /></codeph>, <codeph><xref href="CREATE_EXTERNAL_TABLE.xml#topic1" type="topic"
            format="dita"/></codeph>, <codeph><xref href="./EXECUTE.xml#topic1" type="topic"
            format="dita"/></codeph>, <codeph><xref href="./SELECT.xml#topic1" type="topic"
            format="dita"/></codeph>, <codeph><xref href="./SELECT_INTO.xml#topic1" type="topic"
            format="dita"/></codeph>, <codeph><xref href="./VALUES.xml#topic1" type="topic"
            format="dita"/></codeph></p>
    </section>
  </body>
</topic>
