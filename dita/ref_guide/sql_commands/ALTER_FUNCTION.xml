<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
  <title id="an20941">ALTER FUNCTION</title>
  <body>
    <p id="sql_command_desc">修改函数的定义。</p>
    <section id="section2"
        ><title>概要</title><codeblock id="sql_command_synopsis">ALTER FUNCTION <varname>name</varname> ( [ [<varname>argmode</varname>] [<varname>argname</varname>] <varname>argtype</varname> [, ...] ] ) 
   <varname>action</varname> [, ... ] [RESTRICT]

ALTER FUNCTION <varname>name</varname> ( [ [<varname>argmode</varname>] [<varname>argname</varname>] <varname>argtype</varname> [, ...] ] )
   RENAME TO <varname>new_name</varname>

ALTER FUNCTION <varname>name</varname> ( [ [<varname>argmode</varname>] [<varname>argname</varname>] <varname>argtype</varname> [, ...] ] ) 
   OWNER TO <varname>new_owner</varname>

ALTER FUNCTION <varname>name</varname> ( [ [<varname>argmode</varname>] [<varname>argname</varname>] <varname>argtype</varname> [, ...] ] ) 
   SET SCHEMA <varname>new_schema</varname></codeblock><p>where
          <varname>action</varname> is one
      of:</p><codeblock>{CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT}
{IMMUTABLE | STABLE | VOLATILE | [ NOT ] LEAKPROOF}
{[EXTERNAL] SECURITY INVOKER | [EXTERNAL] SECURITY DEFINER}
EXECUTE ON { ANY | MASTER | ALL SEGMENTS }
COST <varname>execution_cost</varname>
SET <varname>configuration_parameter</varname> { TO | = } { <varname>value</varname> | DEFAULT }
SET <varname>configuration_parameter</varname> FROM CURRENT
RESET <varname>configuration_parameter</varname>
RESET ALL</codeblock></section>
    <section id="section3"><title>描述</title><p><codeph>ALTER FUNCTION</codeph>修改函数的定义。</p>
		<p>你必须是函数的所有者才能使用<codeph>ALTER FUNCTION</codeph>。为了修改函数的模式，你还必须
		在新模式下拥有<codeph>CREATE</codeph>权限。为了修改所有者，你还必须是新角色的直接或间接成员，
		而且那个角色必须在函数模式上有用<codeph>CREATE</codeph>的权限。（这些限制强制执行
         改变所有者不会通过删除和重新创建函数做任何你不能做的事情，但是，超级用户无论如何都可以改变任何函数的所有权。）
	</p></section>
    <section id="section4"><title>参数</title><parml>
        <plentry>
          <pt><varname>name</varname></pt>
          <pd>一个存在的函数的名称（可能是模式限定的）。</pd>
        </plentry>
        <plentry>
          <pt><varname>argmode</varname></pt>
          <pd>参数的模式：<codeph>IN</codeph>, <codeph>OUT</codeph>,
              <codeph>INOUT</codeph>或者<codeph>VARIADIC</codeph>。如果省略，默认值为
              <codeph>IN</codeph>。请注意<codeph>ALTER FUNCTION</codeph>实际上并不关注<codeph>OUT</codeph>参数，
			  因为只需要输入参数来确定函数的身份。因此已经足够了对于只列出<codeph>IN</codeph>, <codeph>INOUT</codeph>
			  和 <codeph>VARIADIC</codeph>参数</pd>
        </plentry>
        <plentry>
          <pt><varname>argname</varname></pt>
          <pd>参数的名称。请注意，<codeph>ALTER FUNCTION</codeph>实际上并不关心参数名称，因为只需要参数数据类型来确定函数的身份。</pd>
        </plentry>
        <plentry>
          <pt><varname>argtype</varname></pt>
          <pd>函数参数（如果有）的数据类型（可以是方案限定）。
          </pd>
        </plentry>
        <plentry>
          <pt><varname>new_name</varname></pt>
          <pd>函数的新名称。</pd>
        </plentry>
        <plentry>
          <pt><varname>new_owner</varname></pt>		  
          <pd>函数的新拥有者。请注意，如果函数被标记为 <codeph>SECURITY
              DEFINER</codeph>, 随后它将作为新的所有者执行。 </pd>
        </plentry>
        <plentry>
          <pt><varname>new_schema</varname></pt>
          <pd>该函数的新模式。</pd>
        </plentry>
        <plentry>
          <pt>CALLED ON NULL INPUT</pt>
          <pt>RETURNS NULL ON NULL INPUT</pt>
          <pt>STRICT</pt>
			<pd><codeph>CALLED ON NULL INPUT</codeph>将该函数改为在某些 或者全部参数为空值时可以被调用。 <codeph>RETURNS NULL ON NULL INPUT</codeph>
            或者<codeph>STRICT</codeph> 更改函数，以便如果其任何参数为空，则不会调用该函数; 而是自动假设一个空的结果。参阅<codeph><xref
                href="CREATE_FUNCTION.xml#topic1">CREATE FUNCTION</xref></codeph> 获取更多信息。</pd>
        </plentry>
        <plentry>
          <pt>IMMUTABLE</pt>
          <pt>STABLE</pt>
          <pt>VOLATILE</pt>
          <pd>将函数的波动性改为指定的设置。参阅<codeph><xref
                href="CREATE_FUNCTION.xml#topic1">CREATE FUNCTION</xref></codeph> 获取更多信息</pd>
        </plentry>
        <plentry>
          <pt>[ EXTERNAL ] SECURITY INVOKER</pt>
          <pt>[ EXTERNAL ] SECURITY DEFINER</pt>
          <pd>更改该函数是否为一个安全性定义者。 关键词
              <codeph>EXTERNAL</codeph>为了SQL的一致性而被忽略。参阅<codeph>CREATE
              FUNCTION</codeph>获取更多有关此功能的信息。</pd>
        </plentry>
        <plentry>
          <pt>LEAKPROOF</pt>
          <pd> 更改函数是否被视为防漏的。参阅 <xref
              href="CREATE_FUNCTION.xml#topic1"/> 关于此功能的更多信息。</pd>
        </plentry>
        <plentry>
          <pt>EXECUTE ON ANY</pt>
          <pt>EXECUTE ON MASTER</pt>
          <pt>EXECUTE ON ALL SEGMENTS</pt>
          <pd><codeph>EXECUTE ON</codeph>属性指定函数在查询执行过程中调用时执行的位置（主实例或段实例）。</pd>
          <pd><codeph>EXECUTE ON ANY</codeph> （默认值）表示该函数可以在主服务器或任何段实例上执行，并且无论执行
		  的位置如何，它都会返回相同的结果。 Greenplum数据库确定函数执行的位置。</pd>
          <pd><codeph>EXECUTE ON MASTER</codeph>表示该函数必须只在主实例上执行。</pd>
          <pd><codeph>EXECUTE ON ALL SEGMENTS</codeph>表示对于每次调用，该函数必须在所有主段实例上执行，而不是在
		  主节点上执行。 该函数的总体结果是来自所有段实例的 <codeph>UNION ALL</codeph>结果。</pd>
          <pd><codeph>EXECUTE ON</codeph>属性的更多信息，请参阅<codeph><xref href="CREATE_FUNCTION.xml#topic1">CREATE
            FUNCTION</xref></codeph>.</pd>
        </plentry>

        <plentry>
          <pt>COST <varname>execution_cost</varname></pt>
          <pd>更改该函数的估计执行代价。参阅<codeph><xref
                href="CREATE_FUNCTION.xml#topic1">CREATE FUNCTION</xref></codeph> 获取更多信息。</pd>
        </plentry>
        <plentry>
          <pt><varname>configuration_parameter</varname></pt>
          <pt><varname>value</varname></pt>		  
          <pd>当该函数被调用时，要对一个配置参数做出增加或者更改的赋值。如果 <varname>value</varname> 是 <codeph>DEFAULT</codeph> 或者, 等价的 <codeph>RESET</codeph> 被使用, 该函数本地的设置将会被 移除，这样该函数会使用其环境中存在的值执行。 使用<codeph>RESET ALL</codeph>可以清除所有函数本地的设置。 <codeph>SET FROM CURRENT</codeph>应用会话的当前值当函数被输入时。</pd>
        </plentry>
        <plentry>
          <pt>RESTRICT</pt>
          <pd>忽略SQL标准。 </pd>
        </plentry>
      </parml></section>
    <section id="section5"><title>注意</title><p>Greenplum数据库对某些定义的函数有 <codeph>STABLE</codeph> 或者  <codeph>VOLATILE</codeph> 这样的限制。
	参阅<codeph><xref
            href="./CREATE_FUNCTION.xml#topic1" type="topic" format="dita"/></codeph>来获取更多信息。</p></section>
    <section id="section6"><title>示例</title><p>将<codeph>integer</codeph>类型的函数<codeph>sqrt</codeph>重命名为<codeph>square_root</codeph>：</p>
	<codeblock>ALTER FUNCTION sqrt(integer) RENAME TO square_root;</codeblock><p>更改integer 类型的 sqrt 函数的所有者为 joe
	</p><codeblock>ALTER FUNCTION sqrt(integer) OWNER TO joe;</codeblock><p>更改integer 类型的函数 sqrt 的 模式 为math:</p><codeblock>ALTER FUNCTION sqrt(integer) SET SCHEMA math;</codeblock>
      <p>要调整一个函数的自动搜索路径:</p>
      <codeblock>ALTER FUNCTION check_password(text) RESET search_path;</codeblock></section>
    <section id="section7"><title>兼容性</title><p>
	这个语句部分兼容 SQL 标准中的 <codeph>ALTER FUNCTION</codeph> 语句。该标准允许修改一个函数的更多属性，但是不提供重命名一个函数、标记一个函数为安全性定义者、为一个函数附加配置参数值或者更改一个函数的拥有者、模式或者稳定性等功能。 该标准还需要 <codeph>RESTRICT</codeph> 关键字, 它在Greenplum数据库中是可选的。 </p></section>
    <section id="section8"><title>另见</title><p><codeph><xref
            href="./CREATE_FUNCTION.xml#topic1" type="topic" format="dita"/></codeph>, <codeph><xref
            href="./DROP_FUNCTION.xml#topic1" type="topic" format="dita"/></codeph></p></section>
  </body>
</topic>
