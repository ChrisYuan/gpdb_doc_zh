<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_vcn_jkq_1bb">
 <title>hstore</title>
 <body>
  <p><codeph>hstore</codeph>模块实现了一种数据类型，用于在单个Greenplum数据库数据字段中存储（键，值）对的集合。
      这在各种情况下很有用，例如具有许多很少检查的属性的行或半结构化数据。
      </p>
  <p>在当前的实现中，键和值字符串的长度都不能超过65535个字节。
      如果超出此限制，将引发错误。
      这些最大长度可能会在将来的版本中更改。
      </p>
  <section>
   <title>安装hstore</title>
   <p>在使用<codeph>hstore</codeph>数据类型和函数之前，
       请在要查询其他数据库的每个数据库中运行安装脚本<codeph>$GPHOME/share/postgresql/contrib/hstore.sql</codeph>：
       <codeblock>$ psql -d testdb -f $GPHOME/share/postgresql/contrib/hstore.sql</codeblock></p>
  </section>
  <section>
   <title>hstore外部表示</title>
   <p><codeph>hstore</codeph>值的文本表示形式包括零个或多个<varname>key</varname><codeph>=&gt;</codeph><varname>value</varname>项，以逗号分隔。
       例如：
    <codeblock>k => v
foo => bar, baz => whatever
"1-a" => "anything at all"</codeblock>
       项目的顺序不重要（并且可能不会在输出中复制）。
       项目之间或<codeph>=&gt;</codeph>符号周围的空格将被忽略。
       如果键或值包含空格，逗号，<codeph>=</codeph>或<codeph>&gt;</codeph>，请使用双引号。
       要在键或值中包含双引号或反斜杠，请在其前面加上另一个反斜杠。
       （请记住，根据<varname>standard_conforming_strings</varname>的设置，您可能需要在SQL文字字符串中加双反斜杠。）
   </p><p>值（但不是键）可以是SQL NULL。
       这表示为
    <codeblock>key => NULL</codeblock>
      <codeph>NULL</codeph>关键字不区分大小写。
      同样，如果要将字符串<codeph>null</codeph>视为普通数据值，请使用双引号引起来。
      </p>
   <p>当前，即使不是绝对必要，双引号始终用于在输出中包含键和值字符串。
    </p>
  </section>
  <section>
   <title>hstore运算符和函数</title>
   <table id="hstore-op-table">
    <title>hstore运算符</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>运算符</entry>
       <entry>描述</entry>
       <entry>示例</entry>
       <entry>结果</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><codeph>hstore</codeph>
        <codeph>-&gt;</codeph>
        <codeph>text</codeph></entry>
       <entry>获取键的值（如果不存在，则为null）</entry>
       <entry><codeph>'a=&gt;x, b=&gt;y'::hstore -&gt; 'a'</codeph></entry>
       <entry><codeph>x</codeph></entry>
      </row>
      <row>
       <entry><codeph>text</codeph>
        <codeph>=&gt;</codeph>
        <codeph>text</codeph></entry>
       <entry>制作单项<codeph>hstore</codeph></entry>
       <entry><codeph>'a' =&gt; 'b'</codeph></entry>
       <entry><codeph>"a"=&gt;"b"</codeph></entry>
      </row>
      <row>
       <entry><codeph>hstore</codeph>
        <codeph>||</codeph>
        <codeph>hstore</codeph></entry>
       <entry>连接</entry>
       <entry><codeph>'a=&gt;b, c=&gt;d'::hstore || 'c=&gt;x, d=&gt;q'::hstore</codeph></entry>
       <entry><codeph>"a"=&gt;"b", "c"=&gt;"x", "d"=&gt;"q"</codeph></entry>
      </row>
      <row>
       <entry><codeph>hstore</codeph>
        <codeph>?</codeph>
        <codeph>text</codeph></entry>
       <entry><codeph>hstore</codeph>是否包含键？</entry>
       <entry><codeph>'a=&gt;1'::hstore ? 'a'</codeph></entry>
       <entry><codeph>t</codeph></entry>
      </row>
      <row>
       <entry><codeph>hstore</codeph>
        <codeph>@&gt;</codeph>
        <codeph>hstore</codeph></entry>
       <entry>左操作数是否包含右操作数？</entry>
       <entry><codeph>'a=&gt;b, b=&gt;1, c=&gt;NULL'::hstore @&gt; 'b=&gt;1'</codeph></entry>
       <entry><codeph>t</codeph></entry>
      </row>
      <row>
       <entry><codeph>hstore</codeph>
        <codeph>&lt;@</codeph>
        <codeph>hstore</codeph></entry>
       <entry>左操作数是否包含于右操作数？</entry>
       <entry><codeph>'a=&gt;c'::hstore &lt;@ 'a=&gt;b, b=&gt;1, c=&gt;NULL'</codeph></entry>
       <entry><codeph>f</codeph></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <note>不推荐使用<codeph>=&gt;</codeph>运算符，并且可能在以后的版本中将其删除。
       请改用<codeph>hstore(text, text)</codeph>函数。
       </note>
   <table id="hstore-func-table">
    <title>hstore函数</title>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>函数</entry>
       <entry>返回类型</entry>
       <entry>描述</entry>
       <entry>示例</entry>
       <entry>结果</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><codeph>hstore(text, text)</codeph></entry>
       <entry><codeph>hstore</codeph></entry>
       <entry>制作单项<codeph>hstore</codeph></entry>
       <entry><codeph>hstore('a', 'b')</codeph></entry>
       <entry><codeph>"a"=&gt;"b"</codeph></entry>
      </row>
      <row>
       <entry><codeph>akeys(hstore)</codeph></entry>
       <entry><codeph>text[]</codeph></entry>
       <entry>以数组形式获取<codeph>hstore</codeph>的键</entry>
       <entry><codeph>akeys('a=&gt;1,b=&gt;2')</codeph></entry>
       <entry><codeph>{a,b}</codeph></entry>
      </row>
      <row>
       <entry><codeph>skeys(hstore)</codeph></entry>
       <entry><codeph>setof text</codeph></entry>
       <entry>以集合形式获取<codeph>hstore</codeph>的键</entry>
       <entry><codeph>skeys('a=&gt;1,b=&gt;2')</codeph></entry>
       <entry>
        <codeblock>a
b</codeblock>
       </entry>
      </row>
      <row>
       <entry><codeph>avals(hstore)</codeph></entry>
       <entry><codeph>text[]</codeph></entry>
       <entry>以数组形式获取<codeph>hstore</codeph>的值</entry>
       <entry><codeph>avals('a=&gt;1,b=&gt;2')</codeph></entry>
       <entry><codeph>{1,2}</codeph></entry>
      </row>
      <row>
       <entry><codeph>svals(hstore)</codeph></entry>
       <entry><codeph>setof text</codeph></entry>
       <entry>以集合形式获取<codeph>hstore</codeph>的值</entry>
       <entry><codeph>svals('a=&gt;1,b=&gt;2')</codeph></entry>
       <entry>
        <codeblock>1
2</codeblock>
       </entry>
      </row>
      <row>
       <entry><codeph>each(hstore)</codeph></entry>
       <entry><codeph>setof (key text, value text)</codeph></entry>
       <entry>以集合形式获取<codeph>hstore</codeph>的键值</entry>
       <entry><codeph>select * from each('a=&gt;1,b=&gt;2')</codeph></entry>
       <entry>
        <codeblock> key | value
-----+-------
 a   | 1
 b   | 2</codeblock>
       </entry>
      </row>
      <row>
       <entry><codeph>exist(hstore,text)</codeph></entry>
       <entry><codeph>boolean</codeph></entry>
       <entry><codeph>hstore</codeph>是否包含键？</entry>
       <entry><codeph>exist('a=&gt;1','a')</codeph></entry>
       <entry><codeph>t</codeph></entry>
      </row>
      <row>
       <entry><codeph>defined(hstore,text)</codeph></entry>
       <entry><codeph>boolean</codeph></entry>
       <entry>对于键<codeph>hstore</codeph>是否包含非空值？</entry>
       <entry><codeph>defined('a=&gt;NULL','a')</codeph></entry>
       <entry><codeph>f</codeph></entry>
      </row>
      <row>
       <entry><codeph>delete(hstore,text)</codeph></entry>
       <entry><codeph>hstore</codeph></entry>
       <entry>删除匹配键的所有项</entry>
       <entry><codeph>delete('a=&gt;1,b=&gt;2','b')</codeph></entry>
       <entry><codeph>"a"=>"1"</codeph></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </section>
  <section>
   <title>Indexes</title>
   <p><codeph>hstore</codeph>对<codeph>@&gt;</codeph>和<codeph>?</codeph>运算符有索引支持。
       您可以使用GiST或GIN索引类型。例如：
    </p>
   <codeblock>
CREATE INDEX hidx ON testhstore USING GIST(h);

CREATE INDEX hidx ON testhstore USING GIN(h);
   </codeblock>
  </section>
  <section>
   <title>示例</title>
   <p>添加键，或使用新键更新现有键：</p>
   <codeblock>UPDATE tab SET h = h || ('c' => '3');</codeblock>
   <p>删除键：</p>
   <codeblock>UPDATE tab SET h = delete(h, 'k1');</codeblock>
  </section>
  <section>
   <title>统计</title>
   <p><codeph>hstore</codeph>类型由于其固有的自由度，可能包含许多不同的键。
       检查有效键是应用程序的任务。
       下面的示例演示了几种用于检查键和获取统计信息的技术。
       </p>
   <p>简单示例：</p>
   <codeblock>SELECT * FROM each('aaa=>bq, b=>NULL, ""=>1');</codeblock>
   <p>使用表：</p>
   <codeblock>SELECT (each(h)).key, (each(h)).value INTO stat FROM testhstore;</codeblock>
   <p>在线统计：</p>
   <codeblock>SELECT key, count(*) FROM
  (SELECT (each(h)).key FROM testhstore) AS stat
  GROUP BY key
  ORDER BY count DESC, key;
    key    | count
-----------+-------
 line      |   883
 query     |   207
 pos       |   203
 node      |   202
 space     |   197
 status    |   195
 public    |   194
 title     |   190
 org       |   189
...................</codeblock>
  </section>
 </body>
</topic>
