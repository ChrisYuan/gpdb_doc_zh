<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="ij138244">citext</title>
  <body>
    <p>citext 模块提供了一个不区分大小写的字符串数据类型, <codeph>citext</codeph>。 本质上，citext在比较值时在内部调用<codeph>lower</codeph> 函数。除此之外，它的操作几乎与<codeph>text</codeph>相同</p>
    <p>对文本值执行不区分大小写匹配的方法是曾经是在比较值时使用<codeph> lower </codeph>函数，例如</p>
    <codeblock>SELECT * FROM tab WHERE lower(col) = LOWER(?);</codeblock>
    <p>这种方法可行, 但是有缺点：</p>
    <ul id="ul_rbq_jk3_ccb">
      <li>它会使SQL语句变得冗长, 而且总是在列查询值中同时使用<codeph>lower</codeph>函数。</li>
      <li>除非已经使用<codeph>lower</codeph>函数创建一个函数索引，否则该函数不适用于索引。</li>
    </ul>
    <p><codeph>citext</codeph>数据类型允许您在SQL查询中不调用<codeph>lower</codeph>函数，并且可以在<codeph>citext</codeph>类型的列上创建不区分大小写的主键。类似于<codeph>ext</codeph>类型，<codeph>citext</codeph>是本地化识别匹配, 这意味着大写和小写字母的匹配依赖于数据库LC_CTYPE设置规则。这和在查询中使用<codeph>lower</codeph>函数功能相同，但它由数据类型透明地完成，因此您不必在查询中执行任何特殊操作。</p>
  </body>
  <topic id="topic_axc_qk4_ccb">
    <title>安装 citext</title>
    <body>
      <p>在使用<codeph>citext</codeph>类型之前，必须在要使用该类型的每个数据库中注册扩展名：</p>
      <codeblock>$ psql -d testdb -c "CREATE EXTENSION citext"</codeblock>
    </body>
  </topic>
  <topic id="topic_m4v_r5j_ccb">
    <title>使用citext类型</title>
    <body>
      <p>以下是一个定义一个<codeph>citext</codeph>类型数据列的简单的例子:</p>
      <codeblock>CREATE TABLE users (
    id bigint PRIMARY KEY,
    nick CITEXT NOT NULL,
    pass TEXT   NOT NULL
) DISTRIBUTED BY (id);

INSERT INTO users VALUES (1,  'larry',  md5(random()::text) );
INSERT INTO users VALUES (2,  'Tom',    md5(random()::text) );
INSERT INTO users VALUES (3,  'Damian', md5(random()::text) );
INSERT INTO users VALUES (4,  'NEAL',   md5(random()::text) );
INSERT INTO users VALUES (5,  'Bjørn',  md5(random()::text) );

SELECT * FROM users WHERE nick = 'Larry';
</codeblock>
      <p> <codeph>SELECT</codeph>语句将返回一个元组，尽管<codeph>nick</codeph>列被设置为<codeph>larry</codeph>并且查询指定为<codeph>Larry</codeph></p>
    </body>
  </topic>
  <topic id="topic_sz4_x5j_ccb">
    <title>字符串比较操作</title>
    <body>
      <p> <codeph>citext</codeph>通过将每个字符串的每个字符转换为小写（和调用<codeph>lower</codeph>函数相似）然后正常比较结果。如果调用<codeph>lower</codeph>函数后两个字符串的值一样，则认为两个字符串相等。</p>      
	  <p>为了尽可能地模拟不区分大小写的排序规则,<codeph>citext</codeph>提供了许多字符串处理运算符以及运算函数的特殊版本。例如正则表达式<codeph>~</codeph>和<codeph>~*</codeph>在应用到<codeph>citext</codeph>时表现出相同的操作：他们都是大小写不敏感的。相同的特性也表现在<codeph>!~</codeph>和<codeph>!~*</codeph>上，以及<codeph>LIKE</codeph>运算符<codeph>~~</codeph>，<codeph>~~*</codeph>，<codeph>!~~</codeph>和<codeph>!~~*</codeph>.如果您需要大小写敏感，可以将运算符的参数强制转换为<codeph>text</codeph>。</p>
		<p>类似，如果它们的参数为<codeph>citext</codeph>，以下函数执行不区分大小写匹配：</p>      
		<ul id="ul_yjj_z5j_ccb">
        <li><codeph>regexp_match()</codeph></li>
        <li><codeph>regexp_matches()</codeph></li>
        <li><codeph>regexp_replace()</codeph></li>
        <li><codeph>regexp_split_to_array()</codeph></li>
        <li><codeph>regexp_split_to_table()</codeph></li>
        <li><codeph>replace()</codeph></li>
        <li><codeph>split_part()</codeph></li>
        <li><codeph>strpos()</codeph></li>
        <li><codeph>translate()</codeph></li>
      </ul>
	<p>对于regexp函数，如果想要大小写敏感，可以声明“c”标志以强制大小写匹配。如果您想要大小写敏感操作，则在使用其中一个函数之前必须强制转换为<codeph>text</codeph>类型。</p></body>
  </topic>
  <topic id="topic_j4w_z5j_ccb">
    <title>局限性</title>
    <body>
      <ul id="ul_jmp_bvj_ccb">
        <li>
        <p><codeph>citext</codeph>类型的折叠操作依赖于数据库的<codeph>LC_CTYPE</codeph>设置。因此，在创建数据库时，应确定如何比较值。通过在Unicode标准定义的术语中并不是真正大小写不敏感的。实际上，只要您对您的排序规则感到满意，您应该对<codeph>citext</codeph>的比较感到满意。 但是，如果您的数据库中存储了不同语言的数据，则即使排序规则适用于其他语言，有一种语言的用户也可能会发现其查询结果与预期不符。</p></li>
        <!--<li><p>As of PostgreSQL 9.1, you can attach a <codeph>COLLATE</codeph> specification to <codeph>citext</codeph> columns or data values. Currently, <codeph>citext</codeph> operators will honor a non-default <codeph>COLLATE</codeph> specification while comparing case-folded strings, but the initial folding to lower case is always done according to the database's <codeph>LC_CTYPE</codeph> setting (that is, as though <codeph>COLLATE "default"</codeph> were given). This may be changed in a future release so that both steps follow the input <codeph>COLLATE</codeph> specification.</p></li>-->
        <li><codeph>citext</codeph>不如<codeph>text</codeph>高效，因为运算符函数和使用B树的比较函数必须拷贝一份数据并将它们转换为小写进行比较。但是，它比使用<codeph>lower</codeph>执行不区分大小写的匹配效率稍高一些。</li>        
		<li>如果你需要数据比较在某些情况中大小写敏感但其他情况中大小写不敏感<codeph>citext</codeph>不一定是一个最好的选择，建议的做法是使用<codeph>text</codeph>类型，然后在需要大小写不敏感的情况下手动使用<codeph>lower</codeph>函数。这种方法适用于较少需要大小写不敏感比较的情况下。如果您需要的大小写不敏感比较的频率明显大于大小写敏感，您可以将数据存储为<codeph>citext</codeph>类型，当想要进行大小写敏感比较时将数据类型强制转换为<codeph>text</codeph>类型。如果您希望在两种情况下都能高效的进行，您需要建立两个索引。</li>
        <li>包含<codeph>citext</codeph>运算的模式必须在当前的<codeph>search_path</codeph>中（通常是<codeph>public</codeph>）如果不是这样的话，请调用大小写敏感的<codeph>text</codeph>运算。</li>
      </ul>
    </body>
  </topic>
</topic>
