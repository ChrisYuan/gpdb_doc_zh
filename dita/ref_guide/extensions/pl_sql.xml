<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="pt212122">Greenplum PL/pgSQL过程语言</title>
  <body>
    <p>本节概述了Greenplum数据库PL/pgSQL语言。</p>
    <ul>
      <li id="pt222286">
        <xref href="#topic2" type="topic" format="dita"/>
      </li>
      <li id="pt222717">
        <xref href="#topic67" type="topic" format="dita"/>
      </li>
      <li id="pt222315">
        <xref href="#topic6" type="topic" format="dita"/>
      </li>
      <li id="pt222269">
        <xref href="#topic10" type="topic" format="dita"/>
      </li>
    </ul>
  </body>
  <topic id="topic2" xml:lang="en">
    <title id="pt218674">关于Greenplum数据库PL/pgSQL</title>
    <body>
      <p>Greenplum数据库PL/pgSQL是一种可加载的过程语言，默认情况下使用Greenplum数据库进行安装和注册。
          您可以使用SQL语句，函数和运算符创建用户定义的函数。
          </p>
      <p>使用PL/pgSQL，您可以在数据库服务器内对计算块和一系列SQL查询进行分组，从而具有过程语言的强大功能和SQL的易用性。
          此外，使用PL/pgSQL，您可以使用Greenplum数据库SQL的所有数据类型，运算符和函数。
          </p>
      <p>PL/pgSQL语言是Oracle PL/SQL的子集。
          Greenplum数据库PL/pgSQL基于Postgres PL/pgSQL。
          Postgres PL/pgSQL文档位于
          <xref
          href="https://www.postgresql.org/docs/9.4/plpgsql.html" scope="external"
          format="html">https://www.postgresql.org/docs/9.4/plpgsql.html</xref></p>
      <p>使用PL/pgSQL函数时，函数属性会影响Greenplum数据库创建查询计划的方式。
          您可以将属性<codeph>IMMUTABLE</codeph>，<codeph>STABLE</codeph>或<codeph>VOLATILE</codeph>指定为<codeph>LANGUAGE</codeph>子句的一部分，以对函数类型进行分类。
          有关创建函数和函数属性的信息，请参阅<cite>Greenplum数据库参考指南</cite>中的<codeph><xref
                  href="../sql_commands/CREATE_FUNCTION.xml#topic1"/></codeph>命令。
          </p>
      <p>您可以将PL/SQL代码块作为匿名代码块运行。
          请参阅<cite>Greenplum数据库参考指南</cite>中的<codeph><xref
                  href="../sql_commands/DO.xml#topic1"/></codeph>命令。
          </p>
    </body>
    <topic id="topic3" xml:lang="en">
      <title>Greenplum数据库SQL限制</title>
      <body>
        <p>使用Greenplum数据库PL/pgSQL时，限制包括</p>
        <ul>
          <li id="pt219857">不支持触发器</li>
          <li id="pt222490">游标只向前移动（不可滚动）</li>
          <li>不支持可更新游标（<codeph>UPDATE...WHERE CURRENT OF</codeph>和<codeph>DELETE...WHERE CURRENT OF</codeph>）。
              </li>
        </ul>
        <p>有关Greenplum数据库SQL一致性的信息，请参阅<cite>Greenplum数据库参考指南</cite>中的<xref
                href="../feature_summary.xml#topic1"/>。
            </p>
      </body>
    </topic>
    <topic id="topic4" xml:lang="en">
      <title>PL/pgSQL语言</title>
      <body>
        <p>PL/pgSQL是一种块结构语言。
            函数定义的完整文本必须是块。块定义为：
            </p>
        <codeblock>[ <varname>label</varname> ]
[ DECLARE
   declarations ]
BEGIN
   statements
END [ label ];</codeblock>
        <p>块中的每个声明和每个语句都以分号（;）结束。
            出现在另一个块中的块在END之后必须有分号，如上一个块所示。
            结束函数体的<codeph>END</codeph>不需要分号。
            </p>
        <p>仅当您要识别要在<codeph>EXIT</codeph>语句中使用的块或限定块中声明的变量的名称时，才需要<varname>label</varname>。
            如果在<codeph>END</codeph>之后提供label，则它必须与块开头的label匹配。
            </p>
        <note type="important">对于使用用于事务控制的数据库命令PL/pgSQL分组语句，不要混淆使用<codeph>BEGIN</codeph>和<codeph>END</codeph>关键字。
            PL/pgSQL <codeph>BEGIN</codeph>和<codeph>END</codeph>关键字仅用于分组; 他们不会开始或结束事务。
            函数总是在外部查询建立的事务中执行 - 它们无法启动或提交该事务，因为它们没有上下文可供执行。
            但是，包含<codeph>EXCEPTION</codeph>子句的PL/pgSQL块有效地形成了一个子事务，可以在不影响外部事务的情况下回滚。
            有关<codeph>EXCEPTION</codeph>子句的更多信息，请参阅
            <xref
            href="https://www.postgresql.org/docs/9.4/plpgsql-control-structures.html#PLPGSQL-ERROR-TRAPPING"
            scope="external" format="html"
            >https://www.postgresql.org/docs/9.4/plpgsql-control-structures.html#PLPGSQL-ERROR-TRAPPING</xref>。</note>
        <p>关键字不区分大小写。除非双引号，否则标识符将隐式转换为小写，就像在普通SQL命令中一样。
            </p>
        <p>PL/pgSQL代码中的注释与普通SQL中的注释相同：</p>
        <ul>
          <li id="pt219192">双短划线(--)开始一条延伸到该行末尾的注释。</li>
          <li id="pt219185">/* 启动一个块注释，扩展到匹配的 */。
              <p>阻止评论嵌套。</p>
              </li>
        </ul>
        <p>块的语句部分中的任何语句都可以是子块。
            子块可用于逻辑分组或将变量本地化为一小组语句。
            </p>
        <p>在子块中声明的变量在子块的持续时间内屏蔽外部块的任何类似命名的变量。
            如果使用块的标签限定其名称，则可以访问外部变量。
            例如，此函数多次声明一个名为<codeph>quantity</codeph>的变量：
            </p>
        <codeblock>CREATE FUNCTION testfunc() RETURNS integer AS $$
&lt;&lt; outerblock >>
DECLARE
   quantity integer := 30;
BEGIN
   RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 30
   quantity := 50;
   --
   -- Create a subblock
   --
   DECLARE
      quantity integer := 80;
   BEGIN
      RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 80
      RAISE NOTICE 'Outer quantity here is %', outerblock.quantity;  -- Prints 50
   END;
   RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 50
   RETURN quantity;
END;
$$ LANGUAGE plpgsql;</codeblock>
      </body>
      <topic id="topic5" xml:lang="en">
        <title>执行SQL命令</title>
        <body>
          <p>您可以使用PL/pgSQL语句执行SQL命令，例如<codeph>EXECUTE</codeph>，<codeph>PERFORM</codeph>和<codeph>SELECT ... INTO</codeph>。
              有关PL/pgSQL语句的信息，请参阅
              <xref
              href="https://www.postgresql.org/docs/9.4/plpgsql-statements.html"
              scope="external" format="html"
              >https://www.postgresql.org/docs/9.4/plpgsql-statements.html</xref>. </p>
          <note type="note"><codeph>EXECUTE</codeph>语句不支持PL/pgSQL语句<codeph>SELECT INTO</codeph>。
              </note>
        </body>
      </topic>
    </topic>
  </topic>
  <topic id="topic67" xml:lang="en">
    <title id="pt21749299">PL/pgSQL计划缓存</title>
    <body>
        <p>PL/pgSQL函数的波动率分类对Greenplum数据库如何缓存引用该函数的计划有影响。
            有关Greenplum数据库函数波动率类别的计划缓存注意事项的信息，请参阅<cite>Greenplum数据库管理员指南</cite>中的<xref href="../../admin_guide/query/topics/functions-operators.xml#topic281">函数波动率和计划缓存</xref>。
            </p>
        <p>当PL/pgSQL函数在数据库会话中第一次执行时，PL/pgSQL解释器会解析函数的SQL表达式和命令。
            解释器创建一个准备好的执行计划，因为每个表达式和SQL命令首先在函数中执行。
            PL/pgSQL解释器在数据库连接的生命周期中重用特定表达式和SQL命令的执行计划。
            虽然这种重用大大减少了解析和生成计划所需的总时间，但是直到执行该部分函数的运行时才能检测到特定表达式或命令中的错误。
            </p>
        <p>如果对查询中使用的任何关系进行任何架构更改，或者重新定义查询中使用的任何用户定义函数，Greenplum数据库将自动重新规划已保存的查询计划。
            这使得在大多数情况下重复使用准备好的计划是透明的。
            </p>
        <p>您在PL/pgSQL函数中使用的SQL命令必须在每次执行时引用相同的表和列。
            您不能将参数用作SQL命令中的表或列的名称。
            </p>
        <p>PL/pgSQL为实际参数类型的每个组合缓存一个单独的查询计划，您可以在其中调用多态函数以确保数据类型差异不会导致意外故障。
            </p>
        <p>有关PL/pgSQL语言中计划缓存注意事项的详细讨论，
            请参阅PostgreSQL<xref href="https://www.postgresql.org/docs/9.0/plpgsql-implementation.html#PLPGSQL-PLAN-CACHING" scope="external" format="html">计划缓存</xref>文档。
            </p>
    </body>
  </topic>
  <topic id="topic6" xml:lang="en">
    <title id="pt217492">PL/pgSQL示例</title>
    <body>
      <p>以下是PL/pgSQL用户定义函数的示例。</p>
    </body>
    <topic id="topic7" xml:lang="en">
      <title>示例：函数参数的别名</title>
      <body>
        <p>传递给函数的参数使用诸如<codeph>$1</codeph>，<codeph>$2</codeph>之类的标识符命名。
            （可选）可以为<codeph>$n</codeph>参数名称声明别名，以提高可读性。
            然后可以使用别名或数字标识符来引用参数值。
            </p>
        <p>有两种方法可以创建别名。
            首选方法是在<codeph>CREATE FUNCTION</codeph>命令中为参数指定名称，例如：
            </p>
        <codeblock>CREATE FUNCTION sales_tax(subtotal real) RETURNS real AS $$
BEGIN
   RETURN subtotal * 0.06;
END;
$$ LANGUAGE plpgsql;</codeblock>
        <p>您还可以使用声明语法显式声明别名：</p>
        <codeblock>name ALIAS FOR $n;</codeblock>
        <p>此示例使用<codeph>DECLARE</codeph>语法创建相同的函数。</p>
        <codeblock>CREATE FUNCTION sales_tax(real) RETURNS real AS $$
DECLARE
    subtotal ALIAS FOR $1;
BEGIN
    RETURN subtotal * 0.06;
END;
$$ LANGUAGE plpgsql;</codeblock>
      </body>
    </topic>
    <topic id="topic8" xml:lang="en">
      <title>示例：使用表列的数据类型</title>
      <body>
        <p>声明变量时，可以使用<codeph>%TYPE</codeph>构造指定变量或表列的数据类型。
            这是声明其类型是表列的数据类型的变量的语法：
            </p>
        <codeblock>name table.column_name%TYPE;</codeblock>
        <p>您可以使用<codeph>%TYPE</codeph>构造来声明将保存数据库值的变量。
            例如，假设您的<codeph>users</codeph>表中有一个名为<codeph>user_id</codeph>的列。
            声明名为<codeph>my_userid</codeph>的变量，其数据类型与<codeph>users.user_id</codeph>列相同：
            </p>
        <codeblock>my_userid users.user_id%TYPE;</codeblock>
        <p><codeph>%TYPE</codeph>在多态函数中特别有价值，因为内部变量所需的数据类型可能会从一个调用更改为下一个调用。
            通过将<codeph>%TYPE</codeph>应用于函数的参数或结果占位符，可以创建适当的变量。
            </p>
      </body>
    </topic>
    <topic id="topic9" xml:lang="en">
      <title>示例：基于表行的复合类型</title>
      <body>
        <p>复合类型的变量称为行变量。
            以下语法基于表行声明复合变量：</p>
        <codeblock>name table_name%ROWTYPE;</codeblock>
        <p>这样的行变量可以保存<codeph>SELECT</codeph>或<codeph>FOR</codeph>查询结果的整行，只要该查询的列集与变量的声明类型匹配即可。
            使用通常的点表示法访问行值的各个字段，例如<codeph>rowvar.column</codeph>。
            </p>
        <p>函数的参数可以是复合类型（完整的表行）。
            在这种情况下，相应的标识符<codeph>$n</codeph>将是行变量，并且可以从中选择字段，例如<codeph>$1.user_id</codeph>。
            </p>
        <p>只能在行类型变量中访问表行的用户定义列，而不能访问OID或其他系统列。
            行类型的字段为数据类型（如<codeph>char(n)</codeph>）继承表的字段大小或精度。
            </p>
        <p>下一个示例函数使用行变量复合类型。
            在创建函数之前，使用此命令创建函数使用的表。
            <codeblock>CREATE TABLE table1 (
  f1 text,
  f2 numeric,
  f3 integer
) distributed by (f1);</codeblock></p>
        <p>此<codeph>INSERT</codeph>命令将数据添加到表中。
            <codeblock>INSERT INTO table1 values
 ('test1', 14.1, 3),
 ('test2', 52.5, 2),
 ('test3', 32.22, 6),
 ('test4', 12.1, 4) ;</codeblock></p>
        <p>此函数使用基于<codeph>table1</codeph>的列<codeph>%TYPE</codeph>变量和<codeph>%ROWTYPE</codeph>复合变量。
            </p>
        <codeblock>CREATE OR REPLACE FUNCTION t1_calc( name text) RETURNS integer 
AS $$ 
DECLARE
    t1_row   table1%ROWTYPE;
    calc_int table1.f3%TYPE;
BEGIN
    SELECT * INTO t1_row FROM table1 WHERE table1.f1 = $1 ;
    calc_int = (t1_row.f2 * t1_row.f3)::integer ;
    RETURN calc_int ;
END;
$$ LANGUAGE plpgsql VOLATILE;</codeblock>
        <note>前一个函数被归类为<codeph>VOLATILE</codeph>函数，因为函数值可能在单个表扫描中发生变化。
            </note>
        <p>以下<codeph>SELECT</codeph>命令使用该函数。</p>
        <codeblock>select t1_calc( 'test1' );</codeblock>
        <note type="note">示例PL/pgSQL函数将<codeph>SELECT</codeph>与<codeph>INTO</codeph>子句一起使用。
            它与SQL命令<codeph>SELECT INTO</codeph>不同。
            如果要从PL/pgSQL函数内的<codeph>SELECT</codeph>结果创建表，请使用SQL命令<codeph>CREATE TABLE AS</codeph>。
            </note>
      </body>
    </topic>

    <topic xml:lang="en" id="topic_lsh_5n5_2z1717">
      <title>示例：使用可变数量的参数</title>
      <body>
        <p>只要所有可选参数都具有相同的数据类型，就可以声明PL/pgSQL函数接受可变数量的参数。
            必须将函数的最后一个参数标记为<codeph>VARIADIC</codeph>，并使用数组类型声明参数。
            您可以将包含<codeph>VARIADIC</codeph>参数的函数称为可变参数函数。
          </p>
        <p>例如，这个可变参数函数返回数值变量数组的最小值：
            </p>
        <p>
          <codeblock>CREATE FUNCTION mleast (VARIADIC numeric[]) 
    RETURNS numeric AS $$
  DECLARE minval numeric;
  BEGIN
    SELECT min($1[i]) FROM generate_subscripts( $1, 1) g(i) INTO minval;
    RETURN minval;
END;
$$ LANGUAGE plpgsql;
CREATE FUNCTION

SELECT mleast(10, -1, 5, 4.4);
 mleast
--------
     -1
(1 row)
</codeblock>
        </p>
        <p>实际上，<codeph>VARIADIC</codeph>位置或其以外的所有实际参数都被收集到一维数组中。
            </p>
        <p>您可以将已构造的数组传递给可变参数函数。
            当您想要在可变参数函数之间传递数组时，这尤其有用。
            在函数调用中指定<codeph>VARIADIC</codeph>，如下所示：
            </p>
          <codeblock>SELECT mleast(VARIADIC ARRAY[10, -1, 5, 4.4]);</codeblock>
        <p>这可以防止PL/pgSQL将函数的可变参数扩展为其元素类型。
            </p>
    </body>
  </topic>

    <topic xml:lang="en" id="topic_lsh_5n5_2z1313">
      <title>示例：使用默认参数值</title>
      <body>
        <p>您可以使用某些或所有输入参数的默认值声明PL/pgSQL函数。
            只要调用的函数少于声明的参数个数，就会插入默认值。
            因为参数只能从实际参数列表的末尾省略，所以必须在使用默认值定义的参数之后为所有参数提供默认值。
            </p>
        <p>示例：</p>
        <p>
          <codeblock>CREATE FUNCTION use_default_args(a int, b int DEFAULT 2, c int DEFAULT 3)
    RETURNS int AS $$
DECLARE
    sum int;
BEGIN
    sum := $1 + $2 + $3;
    RETURN sum;
END;
$$ LANGUAGE plpgsql;

SELECT use_default_args(10, 20, 30);
 use_default_args
------------------
               60
(1 row)

SELECT use_default_args(10, 20);
 use_default_args
------------------
               33
(1 row)

SELECT use_default_args(10);
 use_default_args
------------------
               15
(1 row)
</codeblock>
        </p>
        <p>您也可以使用<codeph>=</codeph>符号代替关键字<codeph>DEFAULT</codeph>。
            </p>
    </body>
  </topic>


    <topic xml:lang="en" id="topic_lsh_5n5_2z">
      <title>示例：使用多态数据类型</title>
      <body>
        <p>PL/pgSQL支持多态<i>anyelement</i>，<i>anyarray</i>，<i>anyenum</i>和<i>anynonarray</i>类型。
            使用这些类型，您可以创建一个可在多种数据类型上运行的PL/pgSQL函数。
            有关Greenplum数据库中多态类型支持的其他信息，请参阅<xref href="../data_types.xml#topic1">Greenplum数据库数据类型</xref>。
            </p>
        <p>当PL/pgSQL函数的返回类型声明为多态类型时，会创建一个名为<codeph>$0</codeph>的特殊参数。
            <codeph>$0</codeph>的数据类型标识从实际输入类型推导出的函数的返回类型。
            </p>
        <p>在此示例中，您将创建一个多态函数，该函数返回两个值的总和：
            </p>
        <p>
          <codeblock>CREATE FUNCTION add_two_values(v1 anyelement,v2 anyelement)
    RETURNS anyelement AS $$ 
DECLARE 
    sum ALIAS FOR $0;
BEGIN
    sum := v1 + v2;
    RETURN sum;
END;
$$ LANGUAGE plpgsql;</codeblock>
        </p>
        <p>执行<codeph>add_two_values()</codeph>，提供整数输入值：
            </p>
        <p>
          <codeblock>SELECT add_two_values(1, 2);
 add_two_values
----------------
              3
(1 row)</codeblock>
        </p>
        <p><codeph>add_two_values()</codeph>的返回类型是整数，即输入参数的类型。
            现在执行<codeph>add_two_values()</codeph>，提供浮点输入值：
            </p>
        <codeblock>SELECT add_two_values (1.1, 2.2);
 add_two_values
----------------
            3.3
(1 row)</codeblock>
        <p>在这种情况下，<codeph>add_two_values()</codeph>的返回类型是float。</p>
        <p>您还可以在多态函数中指定<codeph>VARIADIC</codeph>参数。</p>
    </body>
  </topic>
  <topic id="topic_isw_3sx_cz">
      <title>示例：匿名块</title>
      <body>
        <p>此示例使用<codeph>DO</codeph>命令将前一个示例中的<codeph>t1_calc()</codeph>函数中的语句作为匿名块执行。
            在该示例中，匿名块从临时表中检索输入值。
            <codeblock>CREATE TEMP TABLE list AS VALUES ('test1') DISTRIBUTED RANDOMLY;

DO $$ 
DECLARE
    t1_row   table1%ROWTYPE;
    calc_int table1.f3%TYPE;
BEGIN
    SELECT * INTO t1_row FROM table1, list WHERE table1.f1 = list.column1 ;
    calc_int = (t1_row.f2 * t1_row.f3)::integer ;
    RAISE NOTICE 'calculated value is %', calc_int ;
END $$ LANGUAGE plpgsql ;</codeblock></p>
      </body>
    </topic>
  </topic>
  <topic id="topic10" xml:lang="en">
    <title id="pt214450">参考</title>
    <body>
      <p>关于PL/pgSQL的PostgreSQL文档是在<xref
          href="https://www.postgresql.org/docs/9.4/plpgsql.html" scope="external"
          format="html">https://www.postgresql.org/docs/9.4/plpgsql.html</xref></p>
      <p>另请参阅<cite>Greenplum数据库参考指南</cite>中的<codeph><xref href="../sql_commands/CREATE_FUNCTION.xml#topic1"/></codeph>命令。
        </p>
      <p>有关内置Greenplum数据库函数的摘要，请参阅<cite>Greenplum数据库参考指南</cite>中的<xref
              href="../function-summary.xml#topic1"/>。
          有关使用Greenplum数据库函数的信息，请参阅<cite>Greenplum数据库管理员指南</cite>中的“查询数据”
          </p>
      <p>有关移植Oracle函数的信息，请参阅<xref
              href="https://www.postgresql.org/docs/9.4/plpgsql-porting.html" scope="external"
              format="html">https://www.postgresql.org/docs/9.4/plpgsql-porting.html</xref>。
          有关在Greenplum数据库中安装和使用Oracle兼容性函数的信息，
          请参阅<cite>Greenplum数据库实用程序指南</cite>中的“Oracle兼容性函数”。
          </p>
    </body>
  </topic>
</topic>
