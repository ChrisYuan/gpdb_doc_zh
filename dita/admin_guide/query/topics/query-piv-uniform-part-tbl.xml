<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="ih135496">关于统一多级分区表</title>
  <body>
	  <p>如果一个多级分区（MLP）表是一个统一分区表，GPORCA支持在该MLP上的查询。多级分区表是用<codeph>SUBPARTITION</codeph>子句创建的分区表。统一分区表必须满足下面这些条件。
 <ul id="ul_utn_5lt_zs">
        <li>分区表结构统一。同一层上的每一个分区节点必须具有相同的层次结构。</li>
        <li>分区键约束必须一致且统一。在每一个子分区层次上，为每个分支创建的子表上的约束集必须匹配。</li>
      </ul></p>
    <p>可以用几种方式显示分区表的信息，包括显示来自这些来源的信息：
  <ul id="ul_tlr_js1_1t">
	  <li><codeph>pg_partitions</codeph>系统视图包含分区表结构的信息。</li>
	  <li><codeph>pg_constraint</codeph>系统catalog包含表约束的信息。</li>
	  <li>psql元命令\d+ <varname>tablename</varname>显示一个分区表的叶子子表的表约束。</li>
      </ul></p>
  </body>
  <topic id="topic_zn1_m3m_ss">
    <title>示例</title>
    <body>
		<p>这个<codeph>CREATE TABLE</codeph>命令创建一个统一分区表。</p>
      <codeblock>CREATE TABLE mlp (id  int,  year int,  month int,  day int,
   region  text)
   DISTRIBUTED  BY (id)
    PARTITION BY RANGE ( year)
      SUBPARTITION  BY LIST (region)
        SUBPARTITION TEMPLATE (
          SUBPARTITION usa  VALUES ( 'usa'),
          SUBPARTITION europe  VALUES ( 'europe'),
          SUBPARTITION asia  VALUES ( 'asia'))
   (  START ( 2006)  END ( 2016) EVERY ( 5));</codeblock>
	  <p>下面这些是为表<codeph>mlp</codeph>创建的子表和分区层次。这个层次由一个包含两个分支的子分区构成。
        <codeblock>mlp_1_prt_11
   mlp_1_prt_11_2_prt_usa
   mlp_1_prt_11_2_prt_europe
   mlp_1_prt_11_2_prt_asia

mlp_1_prt_21
   mlp_1_prt_21_2_prt_usa
   mlp_1_prt_21_2_prt_europe
   mlp_1_prt_21_2_prt_asia</codeblock></p>
	  <p>该表的层次是统一的，每个分区包含三个子表（子分区）的集合。区域子分区的约束也是统一的，分支表<codeph>mlp_1_prt_11</codeph>的子表上的约束集和分支表<codeph>mlp_1_prt_21</codeph>的子表的约束相同。
     </p>
      <p>作为一种快速检查，这个查询显示这些分区的约束。<codeblock>WITH tbl AS (SELECT oid, partitionlevel AS level,
             partitiontablename AS part 
         FROM pg_partitions, pg_class 
         WHERE tablename = 'mlp' AND partitiontablename=relname 
            AND partitionlevel=1 ) 
  SELECT tbl.part, consrc 
    FROM tbl, pg_constraint 
    WHERE tbl.oid = conrelid ORDER BY consrc;</codeblock></p>
      <note>注意：您需要修改查询以获得更复杂的分区表。 例如，查询不考虑不同schema中的表名。</note>
	  <p><codeph>consrc</codeph>列显示子分区上的约束。<codeph>mlp_1_prt_1</codeph>中子分区的区域约束集合匹配<codeph>mlp_1_prt_2</codeph>中子分区的约束。year的约束继承自父分支表。</p>
      <codeblock>           part           |               consrc
--------------------------+------------------------------------
 mlp_1_prt_2_2_prt_asia   | (region = 'asia'::text)
 mlp_1_prt_1_2_prt_asia   | (region = 'asia'::text)
 mlp_1_prt_2_2_prt_europe | (region = 'europe'::text)
 mlp_1_prt_1_2_prt_europe | (region = 'europe'::text)
 mlp_1_prt_1_2_prt_usa    | (region = 'usa'::text)
 mlp_1_prt_2_2_prt_usa    | (region = 'usa'::text)
 mlp_1_prt_1_2_prt_asia   | ((year >= 2006) AND (year &lt; 2011))
 mlp_1_prt_1_2_prt_usa    | ((year >= 2006) AND (year &lt; 2011))
 mlp_1_prt_1_2_prt_europe | ((year >= 2006) AND (year &lt; 2011))
 mlp_1_prt_2_2_prt_usa    | ((year >= 2011) AND (year &lt; 2016))
 mlp_1_prt_2_2_prt_asia   | ((year >= 2011) AND (year &lt; 2016))
 mlp_1_prt_2_2_prt_europe | ((year >= 2011) AND (year &lt; 2016))
(12 rows)</codeblock>
      <p>如果用下面的命令对例子中的分区表增加一个默认分区：<codeblock>ALTER TABLE mlp ADD DEFAULT PARTITION def</codeblock></p>
        <p>该分区表仍然会是一个统一分区表。为默认分区创建的分支包含三个子表并且子表上的约束集匹配现有的子表约束集。</p>
		<p>在上面的示例中，如果删除子分区<codeph>mlp_1_prt_21_2_prt_asia</codeph>并为区域<codeph>canada</codeph>添加另一个子分区，则约束不再一致。
		<codeblock>ALTER TABLE mlp ALTER PARTITION FOR (RANK(2))
										  DROP PARTITION asia ;

ALTER TABLE mlp ALTER PARTITION FOR (RANK(2))
ADD PARTITION canada VALUES ('canada');</codeblock></p>
	  <p>但是，如果将子分区<codeph>canada</codeph>添加到原始分区表的<codeph>mlp_1_prt_21</codeph>和<codeph>mlp_1_prt_11</codeph>，它仍然是统一的分区表。</p>
      <note>只有分区级别的分区集上的约束必须相同。分区的名称可以不同。</note>
    </body>
  </topic>
</topic>
