<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="ip141161">配置客户端认证</title>
  <shortdesc>本主题讲解如何为Greenplum数据库配置客户端访问和身份验证。</shortdesc>
  <body>
    <p>当首次初始化Greenplum数据库系统时，系统包含一个预定义的<i>超级用户</i>角色。此角色与初始化Greenplum数据库系统的操作系统用户具有相同的名称。此角色被曾为<codeph>gpadmin</codeph>。默认情况下，系统被配置为仅允许从本地使用<codeph>gpadmin</codeph>角色连接到数据库。如果要允许其他角色访问或者允许来自远程主机的连接，则必须配置Greenplum数据库以允许此类访问。本节介绍如何为Greenplum数据库配置客户端访问和身份验证。</p>
  </body>
  <topic id="topic2" xml:lang="en">
    <title id="ip142171">允许访问Greenplum数据库</title>
    <body>
      <p>客户端访问和身份验证通过标准的PostgreSQL基于主机的身份验证文件<filepath>pg_hba.conf</filepath>控制。有关此文件的详细信息，请参阅PostgreSQL文档中的<xref href="https://www.postgresql.org/docs/9.1/auth-pg-hba-conf.html"
          scope="external" format="html">关于pg_hba.conf文件</xref>。</p>
      <p>在Greenplum数据库，主实例的<filepath>pg_hba.conf</filepath>文件控制对Greenplum数据库系统的客户端访问和身份验证。在Greenplum数据库分段中也有<filepath>pg_hba.conf</filepath>文件，但这些文件已经配置为仅允许来自主主机的客户端连接。这些段永远不会接受外部客户端连接，因此无需更改分段中的<filepath>pg_hba.conf</filepath>文件。
      pg_hba.conf文件的一般格式是一组记录，每行一个。Greenplum数据库忽略空白行和后面的任何文本＃ 评论字符。记录由许多由空格或制表符分隔的字段组成。如果引用字段值，则字段可以包含空格。记录不能跨行继续。每个远程客户端访问记录都具有以下格式：
      <p><filepath>pg_hba.conf</filepath> 文件的一般格式是一组记录，每行一个。Greenplum数据库忽略空行和<codeph>#</codeph>注释后的内容。每行记录由许多由空格或制表符分隔的字段组成。字段值如果被引号括起来，可以包含空格。每个远程客户端访问记录都具有以下格式：</p>
      <codeblock><i>host</i>   <i>database</i>   <i>role</i>   <i>address</i>   <i>authentication-method</i></codeblock>
      <p>每个UNIX域套接字访问记录都采用以下格式：</p>
      <codeblock><i>local</i>   <i>database</i>   <i>role</i>   <i>authentication-method</i></codeblock>
      <p>下表描述了每个字段的含义。 </p>
      <table id="ip141709">
        <title>pg_hba.conf文件</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="col1" colwidth="1*"/>
          <colspec colnum="2" colname="col2" colwidth="3*"/>
          <thead>
            <row>
              <entry colname="col1">字段</entry>
              <entry colname="col2">描述</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">local</entry>
              <entry colname="col2">匹配使用UNIX域套接字的连接尝试。如果没有此类记录，则不允许使用UNIX域套接字连接。</entry>
            </row>
            <row>
              <entry colname="col1">host</entry>
              <entry colname="col2">匹配使用TCP/IP进行的连接尝试。除非服务器以适当的值启动，否则将无法进行远程TCP/IP连接的<codeph>listen_addresses</codeph>服务器配置参数。</entry>
            </row>
            <row>
              <entry colname="col1">hostssl</entry>
              <entry colname="col2">匹配使用TCP/IP进行的连接尝试，但仅限于使用SSL加密进行连接时。必须通过设置<codeph>ssl</codeph>服务器配置参数，在服务器启动时启用SSL。</entry>
            </row>
            <row>
              <entry colname="col1">hostnossl</entry>
              <entry colname="col2">匹配使用TCP/IP进行的不使用SSL的连接尝试。</entry>
            </row>
            <row>
              <entry colname="col2">指定此记录匹配的数据库名称。取值为<codeph>all</codeph>指定匹配所有数据库。 多个数据库名称可以通过用逗号分隔。在文件名前加上<codeph>@</codeph>符号，可以指定一个含有数据库名的单独的文件。</entry>
            </row>
            <row>
              <entry colname="col1">role</entry>
              <entry colname="col2">指定该记录匹配的数据库角色名称。
                取值为<codeph>all</codeph>指定匹配所有角色。如果指定角色是一个分组，在角色名前加<codeph>+</codeph>前缀，
                可以匹配该组内所有成员。多个角色名称可以用逗号分隔。在文件名前加入<codeph>@</codeph>前缀，指定匹配文件内的
                包含的所有角色名。
              </entry>
            </row>
            <row>
              <entry colname="col1">address</entry>
              <entry colname="col2">
              指定该记录匹配的客户端机器地址。该字段包含IP地址、IP地址范围或主机名<p>
              指定IP地址范围，使用标准数组标识范围的其实地址，紧跟着一个斜线(<codeph>/</codeph>)，在跟上CIDR掩码长度。掩码长度表示必须匹配的客户端IP地址的高比特位。给定的IP地址中，右边的位应为零。在IP地址、斜线<codeph>/</codeph>和CIDR掩码长度三者之间不能有空格。</p>
              <p>以这种方式指定的IPv4地址范围的典型示例是，<codeph>172.20.143.89/32</codeph>代表单个主机，<codeph>172.20.143.0/24</codeph>代表小型网络，<codeph>10.6.0.0/16</codeph>代表更大网络。
              相应的IPv6地址范围典型案例是，<codeph>::1/128</codeph>代表单个主机(在这种情况下是IPv6环回地址)，<codeph>fe80::7a31:c1ff:0000:0000/96</codeph>代表小型网络。
              <codeph>0.0.0.0/0</codeph>代表全部IPv4地址，并且<codeph>::0/0</codeph>代表全部IPv6地址。要指定单个主机，对于IPv4使用32位掩码长度，对于IPv6使用128位掩码长度。在网络地址中，不要省略拖尾的0数字。</p>
              <p>使用IPv4格式给出的记录只匹配IPv4连接，使用IPv6格式给出的记录只匹配IPv6连接，即使所表示的地址在IPv4-in-IPv6范围内。
              <note>如果主机系统C库文件不支持IPv6地址，建拒绝所有IPv6格式记录。</note></p>
              <p>如果指定了主机名(不是IP地址或IP范围的地址被当做主机名)，则将该名称与客户端IP地址的反向名称解析结果进行比较（如反向DNS查找）。主机名比较不区分大小写。如果存在匹配，如果存在匹配主机名，则对主机名执行转发名称解析（如转发DNS查找），已检查主机名解析的任何地址是否是否等于客户端IP地址。如果双向都匹配，则认为该记录匹配。</p>
              <p>某些主机名数据库允许将IP地址与多个主机名关联，但解析IP地址是，操作系统只返回其中一个主机名。位于文件<codeph>pg_hba.conf</codeph>中的主机名必须是客户端IP地址，必须是客户端IP地址返回address-to-name解析结果，否则该行不会被视为匹配。</p>
              <p>当指定在<codeph>pg_hba.conf</codeph>文件中的主机名，应该确保名称解析足够快。设置如<codeph>nscd</codeph>本地名称解析缓存是有效的。而且可以启用服务器设置参数<codeph>log_hostname</codeph>客户端主机名而不是日志中的IP地址。</p></entry>
            </row>
            <row>
              <entry colname="col1">IP-address<p>IP-mask</p></entry>
              <entry colname="col2">该字段可以被用作CIDR地址记号的替代。
                不是指定掩码长度，而是在单独的列中指定实际掩码。
                例如，<codeph>255.0.0.0</codeph>表示IPv4的CIDR的掩码长度为8，
                而<codeph>255.255.255.255</codeph>表示CIDR的掩码长度为32。</entry>
            </row>
            <row>
              <entry colname="col1">authentication-method</entry>
              <entry colname="col2">指定建立连接时使用的认证方法。
                PostgreSQL 9.0支持的<xref href="https://www.postgresql.org/docs/9.0/auth-methods.html"
                  scope="external" format="html">认证方法</xref>Greenplum均支持。</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <note type="caution">针对更安全系统，记得移除<codeph>pg_hba.conf</codeph>文件中使用trust认证
        远程连接的配置记录。因trust认证授权能连接到服务器的任何用户，使用任何他们指定的任何角色访问数据库。
        针对本地UNIX-socket连接，可以使用ident认证，安全的替代trust认证。
        针对本地及远程TCP客户端，仍然可以使用ident认证，但是客户机主机必须运行ident服务，
        并且您必须信任该机器的完整性。</note>
    </body>
    <topic id="topic3" xml:lang="en">
      <title id="ip141322">编辑pg_hba.conf文件</title>
      <body>
        <p>首先，设置<codeph>pg_hba.conf</codeph>文件，需要具有gpadmin用户权限，并且没有其他Greenplum数据库访问角色。需要编辑<codeph>pg_hba.conf</codeph>以使用户能够访问数据库并保护gpadmin用户。可以考虑删除具有trust身份验证的记录，因为它们允许任何有服务器访问权限的人，使用其选择的任何角色建立连接。对于本地UNIX套接字连接，请使用ident身份验证，需要操作系统用户匹配特定角色。对于本地TCP和远程TCP链接，ident认证需要客户端主机运行ident服务。针对本地连接，如<codeph>127.0.0.1/28</codeph>可以安装ident服务到master主机上。
        针对远程TCP连接，使用ident认证其安全性极低，因为需要您信任master主机上ident服务的公正性。</p>
        <p>此示例显示了如何编辑master主机上的<filepath>pg_hba.conf</filepath>文件，通过加密密码认证，允许远程主机使用所有角色，访问所有数据库</p>
        <section id="ip144328">
          <title>编辑pg_hba.conf</title>
          <ol id="ol_xz4_x15_jp">
            <li id="ip142837">使用文本编辑器，打开<filepath>$MASTER_DATA_DIRECTORY/pg_hba.conf</filepath>
            文件。</li>
            <li id="ip141930">Add a line to the file for each type of connection you want to allow.
              Records are read sequentially, so the order of the records is significant. Typically,
              earlier records will have tight connection match parameters and weaker authentication
              methods, while later records will have looser match parameters and stronger
              authentication methods. For
              example:<codeblock># 允许gpadmin用户本地访问所有数据库
# 使用ident认证
local   all   gpadmin   ident         sameuser
host    all   gpadmin   127.0.0.1/32  ident
host    all   gpadmin   ::1/128       ident
# 允许'dba'角色，通过192.168.x.xIP地址，使用md5加密密码，授权用户访问任意数据库。
# 注意使用SHA-256加密，替换如下行记录中<i>md5</i>密码。
host    all   dba   192.168.0.0/32  md5
# allow all roles access to any database from any
# host and use ldap to authenticate the user. Greenplum role
# names must match the LDAP common name.
host    all   all   192.168.0.0/32  ldap ldapserver=usldap1 ldapport=1389 ldapprefix="cn=" ldapsuffix=",ou=People,dc=company,dc=com"</codeblock></li>
            <li id="ip141945">Save and close the file.</li>
            <li id="ip142080">Reload the <filepath>pg_hba.conf</filepath> configuration file for
              your changes to take effect:<p>
                <codeblock>$ gpstop -u</codeblock>
              </p></li>
          </ol>
          <note type="note">Note that you can also control database access by setting object
            privileges as described in <xref href="roles_privs.xml#topic6" type="topic"
              format="dita"/>. The <filepath>pg_hba.conf</filepath> file just controls who can
            initiate a database session and how those connections are authenticated.</note>
        </section>
      </body>
    </topic>
  </topic>
  <topic id="topic4" xml:lang="en">
    <title id="ip145021">Limiting Concurrent Connections</title>
    <shortdesc>Greenplum数据库 allocates some resources on a per-connection basis, so setting the
      maximum number of connections allowed is recommended.</shortdesc>
    <body>
      <p>To limit the number of active concurrent sessions to your Greenplum数据库 system, you
        can configure the <codeph>max_connections</codeph> server configuration parameter. This is a
          <i>local</i> parameter, meaning that you must set it in the
          <codeph>postgresql.conf</codeph> file of the master, the standby master, and each segment
        instance (primary and mirror). The recommended value of <codeph>max_connections</codeph> on
        segments is 5-10 times the value on the master.</p>
      <p>When you set <codeph>max_connections</codeph>, you must also set the dependent parameter
          <codeph>max_prepared_transactions</codeph>. This value must be at least as large as the
        value of <codeph>max_connections</codeph> on the master, and segment instances should be set
        to the same value as the master.</p>
      <p>For example:</p>
      <ul id="ul_jlg_3b5_jp">
        <li>
          <p>In <codeph>$MASTER_DATA_DIRECTORY/postgresql.conf</codeph> (including standby
            master):</p>
          <p>
            <codeblock>max_connections=100
max_prepared_transactions=100
</codeblock>
          </p>
        </li>
        <li>
          <p>In <codeph><i>SEGMENT_DATA_DIRECTORY</i>/postgresql.conf</codeph> for all segment
            instances:</p>
          <p>
            <codeblock>max_connections=500
max_prepared_transactions=100
</codeblock>
          </p>
        </li>
      </ul>
      <p>The following steps set the parameter values with the Greenplum数据库 utility
          <codeph>gpconfig</codeph>. </p>
      <p>For information about <codeph>gpconfig</codeph>, see the <i>Greenplum数据库 Utility
          Guide</i>.</p>
      <section id="ip142411">
        <title>To change the number of allowed connections</title>
        <ol id="ol_sty_r15_jp">
          <li id="ip146498">Log into the Greenplum数据库 master host as the Greenplum数据库
            administrator and source the file <codeph>$GPHOME/greenplum_path.sh</codeph>. </li>
          <li id="ip146499">Set the value of the <codeph>max_connections</codeph> parameter. This
              <codeph>gpconfig</codeph> command sets the value on the segments to 1000 and the value
            on the master to 200.<p>
              <codeblock>$ gpconfig -c max_connections -v 1000 -m 200
</codeblock>
            </p><p>The value on the segments must be greater than the value on the master. The
              recommended value of <codeph>max_connections</codeph> on segments is 5-10 times the
              value on the master. </p></li>
          <li id="ip146502">Set the value of the <codeph>max_prepared_transactions</codeph>
            parameter. This <codeph>gpconfig</codeph> command sets the value to 200 on the master
            and all segments.<p>
              <codeblock>$ gpconfig -c max_prepared_transactions -v 200
</codeblock>
            </p><p>The value of <codeph>max_prepared_transactions</codeph> must be greater than or
              equal to <codeph>max_connections</codeph> on the master.</p></li>
          <li id="ip146508">Stop and restart your Greenplum数据库 system.<p>
              <codeblock>$ gpstop -r
</codeblock>
            </p></li>
          <li id="ip146510">You can check the value of parameters on the master and segments with
            the <codeph>gpconfig</codeph>
            <codeph>-s</codeph> option. This <codeph>gpconfig</codeph> command displays the values
            of the <codeph>max_connections</codeph> parameter. <p>
              <codeblock>$ gpconfig -s max_connections
</codeblock>
            </p></li>
        </ol>
        <note type="note">Raising the values of these parameters may cause Greenplum数据库 to
          request more shared memory. To mitigate this effect, consider decreasing other
          memory-related parameters such as <codeph>gp_cached_segworkers_threshold</codeph>. </note>
      </section>
    </body>
  </topic>
  <topic id="topic5" xml:lang="en">
    <title id="ip142639">Encrypting Client/Server Connections</title>
    <shortdesc>Enable SSL for client connections to Greenplum数据库 to encrypt the data passed
      over the network between the client and the database.</shortdesc>
    <body>
      <p>Greenplum数据库 has native support for SSL connections between the client and the master
        server. SSL connections prevent third parties from snooping on the packets, and also prevent
        man-in-the-middle attacks. SSL should be used whenever the client connection goes through an
        insecure link, and must be used whenever client certificate authentication is used.</p>
      <p>To enable SSL requires that OpenSSL be installed on both the client and the master server
        systems. Greenplum数据库 can be started with SSL enabled by setting the server
        configuration parameter <codeph>ssl=on</codeph> in the master
          <codeph>postgresql.conf</codeph>. When starting in SSL mode, the server will look for the
        files <filepath>server.key</filepath> (server private key) and
          <filepath>server.crt</filepath> (server certificate) in the master data directory. These
        files must be set up correctly before an SSL-enabled Greenplum数据库 system can start. </p>
      <note type="important"> Do not protect the private key with a passphrase. The server does not
        prompt for a passphrase for the private key, and the database startup fails with an error if
        one is required.</note>
      <p>A self-signed certificate can be used for testing, but a certificate signed by a
        certificate authority (CA) should be used in production, so the client can verify the
        identity of the server. Either a global or local CA can be used. If all the clients are
        local to the organization, a local CA is recommended.</p>
    </body>
    <topic id="topic6" xml:lang="en">
      <title>Creating a Self-signed Certificate without a Passphrase for Testing Only</title>
      <body>
        <p>To create a quick self-signed certificate for the server for testing, use the following
          OpenSSL command:</p>
        <p>
          <codeblock># openssl req -new -text -out server.req
</codeblock>
        </p>
        <p>Enter the information requested by the prompts. Be sure to enter the local host name as
            <i>Common Name</i>. The challenge password can be left blank.</p>
        <p>The program will generate a key that is passphrase protected, and does not accept a
          passphrase that is less than four characters long. </p>
        <p>To use this certificate with Greenplum数据库, remove the passphrase with the following
          commands:</p>
        <p>
          <codeblock># openssl rsa -in privkey.pem -out server.key
# rm privkey.pem</codeblock>
        </p>
        <p>Enter the old passphrase when prompted to unlock the existing key. </p>
        <p>Then, enter the following command to turn the certificate into a self-signed certificate
          and to copy the key and certificate to a location where the server will look for them.</p>
        <codeblock># openssl req -x509 -in server.req -text -key server.key -out server.crt</codeblock>
        <p>Finally, change the permissions on the key with the following command. The server will
          reject the file if the permissions are less restrictive than these.</p>
        <p>
          <codeblock># chmod og-rwx server.key</codeblock>
        </p>
        <p>For more details on how to create your server private key and certificate, refer to the
            <xref href="https://www.openssl.org/docs/" format="html" scope="external">OpenSSL
            documentation</xref>.</p>
      </body>
    </topic>
  </topic>
</topic>
