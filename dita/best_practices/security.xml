<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_nyc_mdf_jr">
  <title>安全性</title>
  <shortdesc>最佳实践可以确保最高级别的系统安全性。</shortdesc>
  <body>
    <section>
      <title>基础安全最佳实践</title>
      <ul id="ul_ocm_zsx_kr">
        <li>保护好<codeph>gpadmin</codeph>系统用户。Greenplum要求一个UNIX用户ID来安装和初始化Greenplum
          数据库系统。这个系统用户在Greenplum文档中被称作<codeph>gpadmin</codeph>。<codeph>gpadmin</codeph>
          用户是Greenplum数据库中的默认数据库超级用户，也是Greenplum安装及其底层数据文件的文件系统拥有者。默认
          的管理员账户是Greenplum数据库设计的根本。没有它系统无法运行，并且也没有办法限制<codeph>gpadmin</codeph>
          用户ID的访问。这个<codeph>gpadmin</codeph>用户可以绕过Greenplum数据库的所有安全性特性。任何人通过这一
          用户ID登入到Greenplum主机，就可以读取、修改或者删除任何数据，包括系统目录数据和数据库访问权限。因此，非常
          有必要保护好<codeph>gpadmin</codeph>用户ID并且只允许必要的系统管理员可以接触到它。只有在执行特定系统维
          护任务（例如升级或扩展）时，管理员才应该作为<codeph>gpadmin</codeph>登入到Greenplum。数据库用户绝不应
          作为<codeph>gpadmin</codeph>登录，并且也绝不应以<codeph>gpadmin</codeph>运行ETL或者生产负载。</li>
        <li>为每个登入的用户分配一个不同的角色。为了日志和审计目的，每个被允许登入Greenplum数据库的用户应该被给定其
          自己的数据库角色。对于应用或者Web服务，考虑为每种应用或者服务创建一个不同的角色。详情请见<i>Greenplum数据库
            管理员指南</i>中的“创建新角色（用户）”部分。</li>
        <li>使用组来管理访问特权。详情请见<i>Greenplum数据库管理员指南</i>中的“创建组（角色的成员关系）”部分。</li>
        <li>限制拥有<codeph>SUPERUSER</codeph>角色属性的用户。作为超级用户的角色会绕过Greenplum数据库中的所有访问
          特权检查，也会绕过资源队列。只有系统管理员才应该被给予超级用户权利。详情请见<i>Greenplum数据库管理员指南</i>
          中的“修改角色属性”部分。</li>
      </ul>
    </section>
    <section id="password-strength-recommendations">
      <title>口令强度指导</title>
      <p>为了保护网络不受侵入，系统管理员应该验证组织中使用的口令是强口令。下面的建议可以增强口令：</p>
      <ul>
        <li> 最小口令强度推荐：至少9个字符。MD5口令应该为至少15个字符。</li>
        <li> 混合大小写字母。</li>
        <li> 混合字母和数字。</li>
        <li> 包括非字母数字字符。</li>
        <li> 选择一个用户可以记住的口令。</li>
      </ul>
      <p> 下面推荐了一些可以用来确定口令强度的口令破解软件。</p>
      <ul>
        <li> John The Ripper。一种快速灵活的口令破解程序。它允许使用多个单词列表并且可以进行蛮力口令破解。
          该程序可以从<xref href="http://www.commoncriteriaportal.org/products/?expand#ALL"
            format="html" scope="external">http://www.openwall.com/john/</xref>得到。</li>
        <li> Crack。可能是最著名的口令破解软件，Crack也非常快，但是可能不如John The Ripper那么易用。
          该软件可以在<xref href="http://www.commoncriteriaportal.org/products/?expand#ALL" format="html"
            scope="external">http://www.crypticide.com/alecm/security/crack/c50-faq.html</xref>
          得到。   
        </li>
      </ul>
      <p>整个系统的安全性依赖于root口令的强度。该口令应该至少长达12个字符并且包括大写字母、小写字母、特殊字符
        和数字的组合。它不能基于任何词典中的词。</p>
      <p> 应该配置口令过期参数。</p>
      <p> 确保下面的行存在于文件<codeph>/etc/libuser.conf</codeph>的<codeph>[import]</codeph>小节中。</p>
      <codeblock>login_defs = /etc/login.defs
</codeblock>
      <p> 确保在<codeph>[userdefaults]</codeph>小节中没有以下列文本开头的行，因为这些词会覆盖来自
        <codeph>/etc/login.defs</codeph>的设置：</p>
      <ul>
        <li>
          <codeph>LU_SHADOWMAX</codeph>
        </li>
        <li>
          <codeph>LU_SHADOWMIN</codeph>
        </li>
        <li>
          <codeph>LU_SHADOWWARNING</codeph>
        </li>
      </ul>
      <p> 确保下面的命令不会产生输出。通过这一命令列出的任何账号都应该被锁定。</p>
      <codeblock>
grep &quot;^+:&quot; /etc/passwd /etc/shadow /etc/group
</codeblock>
      <p> 注意：我们强烈推荐客户在初始设置后更改他们的口令。</p>
      <codeblock>
cd /etc
chown root:root passwd shadow group gshadow
chmod 644 passwd group
chmod 400 shadow gshadow
</codeblock>
      <p> 找出所有全域可写的文件以及没有设置其粘滞位的文件。</p>
      <codeblock>
find / -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print
</codeblock>
      <p> 为前一个命令结果中的所有目录设置其粘滞位(<codeph># chmod +t {dir}</codeph>)。</p>
      <p> 找出所有全域可写的文件并且修正每一个被列出的文件。</p>
      <codeblock>
find / -xdev -type f -perm -0002 -print
</codeblock>
      <p> 为前述命令给出的所有文件设置正确的权限(<codeph># chmod o-w {file}</codeph>)。</p>
      <p> 找出所有不属于有效用户或组的文件，然后为它们分配一个拥有者或者移除文件。</p>
      <codeblock>
find / -xdev \( -nouser -o -nogroup \) -print
</codeblock>
      <p> 找出所有全域可写的目录并且确认它们属于root或者某个系统账户（假定只有系统账户的用户ID低于500）。
        如果该命令生成输出，验证其分配是否正确或者将它们重新分配给root。</p>
      <codeblock>
find / -xdev -type d -perm -0002 -uid +500 -print
</codeblock>
      <p> 口令质量、口令过期策略、口令重用、口令重试尝试以及更多认证设置可以通过可插拔认证模块（PAM）框架配置。
        PAM在目录<codeph>/etc/pam.d</codeph>中查找应用相关的配置信息。运行<codeph>authconfig</codeph>
        或者<codeph>system-config-authentication</codeph>将重写PAM配置文件，这会毁掉任何手工更改并且将
        它们替换为系统默认配置。</p>
      <p> 默认的PAM模块<codeph>pam_cracklib</codeph>提供了口令的强度检查。要配置<codeph>pam_cracklib</codeph>
        以要求至少一个大写字符、小写字符、数字和特殊字符（U.S.国防部指导方针推荐），可编辑文件<codeph>/etc/pam.d/system-auth</codeph>
        并且在对应于口令前置条件<codeph>pam_cracklib.so try_first_pass</codeph>的行中包括下列参数。</p>
      <codeblock>retry=3:
dcredit=-1. Require at least one digit
ucredit=-1. Require at least one upper case character
ocredit=-1. Require at least one special character
lcredit=-1. Require at least one lower case character
minlen-14. Require a minimum password length of 14.</codeblock>
      <p> 例如：</p>
      <codeblock>
password required pam_cracklib.so try_first_pass retry=3\minlen=14 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1
</codeblock>
      <p>可以设置这些参数来反映用户的安全性策略需求。注意口令限制不适用于root口令。</p>
      <p>PAM模块<codeph>pam_tally2</codeph>提供了在指定失次数的败登录尝试之后锁住用户账户的功能。要实施口令封锁，
        可编辑文件<codeph>/etc/pam.d/system-auth</codeph>来包括下列行：<ul
          id="ul_ehw_ls2_lr">
          <li>第一个认证行应该包括：
            <codeblock>auth required pam_tally2.so deny=5 onerr=fail unlock_time=900</codeblock></li>
          <li>第一个账户行应该包括：
            <codeblock>account required pam_tally2.so</codeblock></li>
        </ul></p>
      <p>这里，deny参数被设置以限制重试次数为5并且<codeph>unlock_time</codeph>已经被设置为900秒来保持账户在
        被解锁前锁定900秒。请配置这些参数以反映用户的安全性策略需求。被锁定的账户可以用<codeph>pam_tally2</codeph>
        工具手工解锁：<codeblock>
/sbin/pam_tally2 --user {username} -reset
</codeblock></p>
      <p> 用户可以使用PAM限制重用最近用过的口令。可以设置<codeph>pam_ unix</codeph>模块的remember选项来记住最近
        的口令并且阻止重用它们。要做到这一点，可在<codeph>/etc/pam.d/system-auth</codeph>中编辑适当的行来包括
        remember选项。</p>
      <p> 例如：</p>
      <codeblock>
password sufficient pam_unix.so [ … existing_options …] 
remember=5
</codeblock>
      <p> 用户可以设置要记住的历史口令的数量以正确地反映其安全性策略需求。</p>
      <codeblock>
cd /etc
chown root:root passwd shadow group gshadow
chmod 644 passwd group
chmod 400 shadow gshadow
</codeblock>
    </section>

  </body>
</topic>
