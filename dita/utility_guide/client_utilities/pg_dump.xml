<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
  <title id="os137116">pg_dump</title>
  <body>
    <p id="client_util_desc">Extracts a database into a single script file or other archive
      file.</p>
    <section id="section2">
      <title>概要</title>
      <codeblock id="client_util_synopsis"><b>pg_dump</b> [<varname>connection-option</varname> ...] [<varname>dump_option</varname> ...] [<varname>dbname</varname>]

<b>pg_dump</b> <b>-? | --help</b>

<b>pg_dump</b> <b>-V | --version</b></codeblock>
    </section>
    <section id="section3">
      <title>描述</title>
      <p><codeph>pg_dump</codeph>是用于备份数据库的标准PostgreSQL工具，在Greenplum数据库中也受支持。
        它创建一个（非并行）转储文件。
        对于Greenplum数据库的常规备份，最好使用Greenplum数据库备份工具<codeph><xref href="../admin_utilities/gpbackup.xml#topic1"/></codeph>以获得最佳性能。
        </p>
      <p>如果要将数据迁移到另一个数据库供应商的系统或具有不同segment配置的另一个Greenplum数据库系统（例如，如果要迁移的系统具有更多或更少的segment实例），
        请使用<codeph>pg_dump</codeph>。
        要还原，必须使用相应的<xref href="./pg_restore.xml#topic1" type="topic" format="dita"/>工具（如果转储文件为归档格式），
        或者可以使用诸如<codeph><xref href="psql.xml#topic1" type="topic" format="dita"/></codeph>之类的客户端程序（如果转储文件为纯文本格式）。
        </p>
      <p>由于<codeph>pg_dump</codeph>与常规PostgreSQL兼容，因此可以用于将数据迁移到Greenplum数据库中。
        Greenplum数据库中的<codeph>pg_dump</codeph>工具与PostgreSQL <codeph>pg_dump</codeph>工具非常相似，但有以下例外和限制：
        </p>
      <ul>
        <li id="os142186">如果使用<codeph>pg_dump</codeph>备份Greenplum数据库数据库，请记住，对于大型数据库，转储操作可能需要很长时间（几个小时）。
          另外，必须确保您有足够的磁盘空间来创建转储文件。
          </li>
        <li id="os142181">如果要将数据从一个Greenplum数据库系统迁移到另一个系统，
          请使用<codeph>--gp-syntax</codeph>命令行选项在<codeph>CREATE TABLE</codeph>语句中包括<codeph>DISTRIBUTED BY</codeph>子句。
          这样可以确保在还原时使用正确的分发键列分发Greenplum数据库表数据。
          </li>
      </ul>
      <p>即使同时使用数据库，<codeph>pg_dump</codeph>也会进行一致的备份。
        <codeph>pg_dump</codeph>不会阻止其他用户访问数据库（读或写）。
        </p>
      <p>当与一种存档文件格式一起使用并与<codeph>pg_restore</codeph>结合使用时，<codeph>pg_dump</codeph>提供了一种灵活的归档和传输机制。
        <codeph>pg_dump</codeph>可用于备份整个数据库，然后<codeph>pg_restore </codeph>可用于检查存档和/或选择要还原数据库的哪些部分。
        最灵活的输出文件格式是自定义格式（<codeph>-Fc</codeph>）和目录格式（<codeph>-Fd</codeph>）。
        它们允许对所有已归档项目进行选择和重新排序，支持并行还原，并且默认情况下已压缩。
        目录格式是唯一支持并行转储的格式。
        </p>
      <note><codeph>--ignore-version</codeph>选项已弃用，在以后的版本中将被删除。
        </note>
    </section>
    <section id="section4">
      <title>选项</title>
      <parml>
        <plentry>
          <pt>dbname</pt>
          <pd>指定要转储的数据库的名称。
            如果未指定，则使用环境变量<codeph>PGDATABASE</codeph>。
            如果未设置，则使用为连接指定的用户名。
            </pd>
        </plentry>
      </parml>
      <sectiondiv id="section5">
        <b>转储选项</b>
        <parml>
          <plentry>
            <pt>-a | --data-only</pt>
            <pd>仅转储数据，而不转储模式（数据定义）。表数据和序列值将转储。
              </pd>
            <pd>此选项与<codeph>--section=data</codeph>相似，但由于历史原因不同。
              </pd>
          </plentry>
          <plentry>
            <pt>-b | --blobs</pt>
            <pd>在转储中包括大对象。
              这是默认行为，除非指定了<codeph>--schema</codeph>，<codeph>--table</codeph>或<codeph>--schema-only</codeph>。
              <codeph>-b</codeph>开关仅用于在选择性转储的时候添加大对象。
              请注意，blob被视为数据，因此，当使用<codeph>--data-only</codeph>时将包括这些blob，但在使用<codeph>--schema-only</codeph>时则不包括。
              <note>Greenplum数据库不支持PostgreSQL<xref
                      href="https://www.postgresql.org/docs/9.4/largeobjects.html" format="html"
                      scope="external">大对象工具</xref>来流存储在大对象结构中的用户数据。
                </note>
            </pd>
          </plentry>
          <plentry>
            <pt>-c | --clean</pt>
            <pd>在输出用于创建数据库对象的命令之前，将命令添加到文本输出文件中以清理（删除）数据库对象。
              （如果目标数据库中不存在任何对象，则恢复可能会生成一些无害的错误消息。）
              请注意，在转储操作开始之前不会删除对象，但是会将<codeph>DROP</codeph>命令添加到DDL转储输出文件中，
              以便在使用这些文件时要还原文件，要先执行<codeph>DROP</codeph>命令，再执行<codeph>CREATE</codeph>命令。
              此选项仅对纯文本格式有意义。
              对于归档格式，可以在调用<codeph><xref href="./pg_restore.xml#topic1" type="topic" format="dita"/></codeph>时指定该选项。
              </pd>
          </plentry>
          <plentry>
            <pt>-C | --create</pt>
            <pd>从命令开始输出，以创建数据库本身并重新连接到创建的数据库。
              （使用这种形式的脚本，在运行脚本之前连接到目标安装中的哪个数据库都没有关系。）
              如果还指定了<codeph>--clean</codeph>，则脚本会删除并在重新连接目标数据库之前重新创建它。
              此选项仅对纯文本格式有意义。
              对于归档格式，可以在调用<codeph><xref href="./pg_restore.xml#topic1" type="topic" format="dita"/></codeph>时指定该选项。
              </pd>
          </plentry>
          <plentry>
            <pt>-E <varname>encoding</varname> | --encoding=<varname>encoding</varname></pt>
            <pd>以指定的字符集编码创建转储。
              默认情况下，转储以数据库编码创建。
              （获得相同结果的另一种方法是将<codeph>PGCLIENTENCODING</codeph>环境变量设置为所需的转储编码。）
              </pd>
          </plentry>
          <plentry>
            <pt>-f <varname>file</varname> | --file=<varname>file</varname></pt>
            <pd>将输出发送到指定文件。
              对于基于文件的输出格式，可以省略此参数，在这种情况下，将使用标准输出。
              但是，必须为目录输出格式提供该格式，该格式指定目标目录而不是文件。
              在这种情况下，该目录是由<codeph>pg_dump</codeph>创建的，以前不能存在。
              </pd>
          </plentry>
          <plentry>
            <pt>-F p|c|d|t | --format=plain|custom|directory|tar</pt>
            <pd>选择输出格式。格式可以是以下之一：</pd>
            <pd>p | plain — 输出纯文本SQL脚本文件（默认）。</pd>
            <pd>c | custom — 输出适合输入到<codeph><xref href="./pg_restore.xml#topic1" type="topic" format="dita"/></codeph>的自定义存档。
              与目录输出格式一起使用时，这是最灵活的输出格式，因为它允许在还原过程中手动选择和重新排序已归档的项目。
              默认情况下，此格式为压缩格式，并且还支持并行转储。
              </pd>
            <pd>d | directory — 输出适合于输入<codeph>pg_restore</codeph>的目录格式档案。
              这将创建一个目录，其中包含要转储的每个表和blob的一个文件，
              以及一个所谓的目录文件，该表以<codeph>pg_restore</codeph>可以读取的机器可读格式描述了转储的对象。
              目录格式归档文件可以使用标准的Unix工具进行处理。
              例如，可以使用<codeph>gzip</codeph>工具压缩未压缩档案中的文件。
              默认情况下压缩此格式。
              </pd>
            <pd>t | tar — 输出适合输入到<codeph><xref
                    href="./pg_restore.xml#topic1" type="topic" format="dita"/></codeph>的tar格式的存档。
              tar格式与目录格式兼容；提取tar格式的存档会生成有效的目录格式的存档。
              但是，tar格式不支持压缩。
              同样，在使用tar格式时，在还原过程中不能更改表数据项的相对顺序。
              </pd>
          </plentry>
          <plentry>
            <pt>-i | --ignore-version</pt>
            <pd><note>此选项已被弃用，并将在以后的版本中删除。</note>
              忽略<codeph>pg_dump</codeph>和数据库服务器之间的版本不匹配。
              <codeph>pg_dump</codeph>可以从运行早期版本的Greenplum数据库（或PostgreSQL）的服务器中转储，但是可能不再支持非常旧的版本。
              如果您需要覆盖版本检查，请使用此选项。</pd>
          </plentry>
          <plentry>
            <pt>-j <varname>njobs</varname> | --jobs=<varname>njobs</varname></pt>
            <pd>通过同时转储<varname>njobs</varname>表来并行运行转储。
              此选项减少了转储时间，但同时也增加了数据库服务器上的负载。
              您只能将此选项与目录输出格式一起使用，因为这是多个进程可以同时写入其数据的唯一输出格式。
              </pd>
            <pd><note>使用<codeph>pg_dump</codeph>的并行转储仅在查询调度程序（master）节点上并行化，
              而不是在使用<codeph>gpbackup</codeph>时跨查询执行器（segment）节点并行化。
              </note></pd>
            <pd><codeph>pg_dump</codeph>将打开<varname>njobs</varname> + 1个到数据库的连接，
              因此请确保您的<codeph><xref href="../../ref_guide/config_params/guc-list.xml#max_connections"
                                   type="dita">max_connections</xref></codeph>设置足够高以容纳所有连接。
              </pd>
            <pd>在运行并行转储时请求对数据库对象的排他锁可能导致转储失败。
              原因是<codeph>pg_dump</codeph>主进程对工作进程稍后将要转储的对象请求共享锁，以确保没有人删除它们并在转储运行时使它们消失。
              如果另一个客户端随后请求对表进行排他锁，则该锁将不会被授予，但将排队等待主进程的共享锁被释放。
              因此，对该表的任何其他访问也不会被授予，并且将在排他锁定请求之后排队。
              这包括尝试转储表的工作进程。
              如果没有任何预防措施，这将是典型的死锁情况。
              为了检测到这种冲突，<codeph>pg_dump</codeph>工作进程使用<codeph>NOWAIT</codeph>选项请求另一个共享锁。
              如果未向工作进程授予此共享锁，则其他人在此期间必须申请到独占锁，并且无法继续进行转储，因此<codeph>pg_dump</codeph>别无选择，只能中止转储。
              </pd>
            <pd>为了保持一致的备份，数据库服务器需要支持同步快照，这是Greenplum数据库6.0中引入的功能。
              使用此特性，即使数据库客户端使用不同的连接，也可以确保他们看到相同的数据集。
              <codeph>pg_dump -j</codeph>使用多个数据库连接；它通过主进程一次连接到数据库，并针对每个工作者作业再次连接到数据库。
              如果没有同步快照特性，将无法保证不同的工作作业在每个连接中都看到相同的数据，这可能导致备份不一致。
              </pd>
            <pd>如果要运行6.0之前版本服务器的并行转储，
              则需要确保从主服务器连接到数据库到最后一个工作者作业连接到数据库之间的时间里，数据库的内容没有变化。
              最简单的方法是在开始备份之前，停止所有访问数据库的数据修改过程（DDL和DML）。
              在6.0之前的Greenplum数据库服务器上运行<codeph>pg_dump -j</codeph>时，还需要指定<codeph>--no-synchronized-snapshots</codeph>参数。
              </pd>
          </plentry>
          <plentry>
            <pt>-n <varname>schema</varname> | --schema=<varname>schema</varname></pt>
            <pd>仅转储与schema匹配的模式；这将同时选择模式本身及其所有包含的对象。
              如果未指定此选项，则将转储目标数据库中的所有非系统模式。
              通过编写多个<codeph>-n</codeph>开关可以选择多个模式。
              同样，根据<codeph>psql</codeph>的<codeph> \d</codeph>命令使用的相同规则，
              将schema参数解释为模式，因此也可以通过在模式中写入通配符来选择多个模式。
              使用通配符时，如果需要请小心引用该模式，以防止Shell扩展通配符。
              </pd>
            <pd>注意：当指定-n时，<codeph>pg_dump</codeph>不会尝试转储所选模式可能依赖的任何其他数据库对象。
              因此，不能保证特定模式转储的结果可以自己成功地恢复到干净的数据库中。
              <note>指定<codeph>-n</codeph>时，不转储非模式对象（例如blob）。
                您可以使用<codeph>--blobs</codeph>开关将blob添加回转储。
                </note></pd>
          </plentry>
          <plentry>
            <pt>-N <varname>schema</varname> | --exclude-schema=<varname>schema</varname></pt>
            <pd>不要转储任何与schema匹配的模式。
              根据与<codeph>-n</codeph>相同的规则解释该模式。
              <codeph>-N</codeph>可以多次给出，以排除与几种模式中的任何一种匹配的模式。
              当同时给出<codeph>-n</codeph>和<codeph>-N</codeph>时，行为是仅转储与至少一个<codeph>-n</codeph>开关匹配但不与<codeph>-N</codeph>开关匹配的模式。
              如果出现<codeph>-N</codeph>而没有<codeph>-n</codeph>，则与<codeph>-N</codeph>匹配的模式将从正常转储中排除。
              </pd>
          </plentry>
          <plentry>
            <pt>-o | --oids</pt>
            <pd>转储对象标识符（OID）作为每个表的数据的一部分。
              对于要还原到Greenplum数据库中的文件，建议不要使用此选项。
              </pd>
          </plentry>
          <plentry>
            <pt>-O | --no-owner</pt>
            <pd>不要输出命令来设置对象的所有权以匹配原始数据库。
              默认情况下，<codeph>pg_dump</codeph>发出<codeph>ALTER OWNER</codeph>或<codeph>SET SESSION AUTHORIZATION</codeph>语句来设置创建的数据库对象的所有权。
              除非由超级用户（或拥有脚本中所有对象的同一用户）启动脚本，否则运行脚本时这些语句将失败。
              要使脚本可以被任何用户恢复，但将赋予该用户所有对象的所有权，请指定<codeph>-O</codeph>。
              此选项仅对纯文本格式有意义。
              对于归档格式，可以在调用<codeph><xref href="./pg_restore.xml#topic1" type="topic" format="dita"/></codeph>时指定该选项。
              </pd>
          </plentry>
          <plentry>
            <pt>-s | --schema-only</pt>
            <pd>仅转储对象定义（模式），而不转储数据。</pd>
            <pd>此选项与<codeph>--data-only</codeph>相反。
              它类似于<codeph>--section = pre-data --section = post-data</codeph>，但由于历史原因不同。
              </pd>
            <pd>（不要将此与<codeph>--schema</codeph>选项混淆，该选项以不同的含义使用"schema"一词。）
              </pd>
            <pd>要仅排除数据库中一部分表的表数据，请参见<codeph>--exclude-table-data</codeph>。
              </pd>
          </plentry>
          <plentry>
            <pt>-S <varname>username</varname> | --superuser=<varname>username</varname></pt>
            <pd>指定禁用触发器时要使用的超级用户名。
              仅在使用<codeph>--disable-triggers</codeph>时才有意义。
              最好不要这样做，而是以超级用户身份启动生成的脚本。
              <note>Greenplum数据库不支持用户定义的触发器。</note></pd>
          </plentry>
          <plentry>
            <pt>-t <varname>table</varname> | --table=<varname>table</varname></pt>
            <pd>仅转储与表模式匹配的表（或视图，序列或外部表）。
              以<codeph>schema.table</codeph>格式指定表。
              </pd>
            <pd>通过写入多个<codeph>-t</codeph>开关可以选择多个表。
              而且，根据<codeph>psql</codeph>的<codeph>\d</codeph>命令使用的相同规则，
              将table参数解释为模式，因此也可以通过在模式中写入通配符来选择多个表。
              使用通配符时，如果需要请小心引用模式，以防止Shell扩展通配符。
              使用<codeph>-t</codeph>时<codeph>-n</codeph>和<codeph>-N</codeph>开关无效，
              因为<codeph>-t</codeph>选择的表将被转储，而与那些开关无关，并且非表对象也将不被转储。
              <note>当指定<codeph>-t</codeph>时，<codeph>pg_dump</codeph>不会尝试转储所选表可能依赖的任何其他数据库对象。
                因此，不能保证自己可以成功地将特定表转储的结果还原到干净的数据库中。
                <p>另外，<codeph>-t</codeph>不能用于指定子表分区。
                  要转储分区表，必须指定父表名称。
                  </p></note></pd>
          </plentry>
          <plentry>
            <pt>-T <varname>table</varname> | --exclude-table=<varname>table</varname></pt>
            <pd>不要转储任何与表模式匹配的表。
              该模式根据与<codeph>-t</codeph>相同的规则进行解释。
              <codeph>-T</codeph>可以多次给出，以排除与几种模式中的任何一种匹配的表。
              当同时给出<codeph>-t</codeph>和<codeph>-T</codeph>时，行为是仅转储与至少一个<codeph>-t</codeph>开关匹配但不与<codeph>-T</codeph>开关匹配的表。
              如果出现<codeph>-T</codeph>而没有<codeph>-t</codeph>，则与<codeph>-T</codeph>匹配的表将从正常转储中排除。
              </pd>
          </plentry>
          <plentry>
            <pt>-v | --verbose</pt>
            <pd>指定详细模式。
              这将导致<codeph>pg_dump</codeph>向转储文件输出详细的对象注释和开始/停止时间，并向标准错误输出消息。
              </pd>
          </plentry>
          <plentry>
          <pt>-V | --version</pt>
          <pd>打印<codeph>pg_dump</codeph>版本并退出。</pd>
        </plentry>
          <plentry>
            <pt>-x | --no-privileges | --no-acl</pt>
            <pd>防止转储访问权限（<codeph>GRANT/REVOKE</codeph>命令）。</pd>
          </plentry>
          <plentry>
            <pt>-Z 0..9 | --compress=0..9</pt>
            <pd>指定要使用的压缩级别。
              零表示无压缩。
              对于自定义存档格式，此选项指定压缩单个表数据段，并且默认设置为中等压缩。
              </pd>
            <pd>对于纯文本输出，设置非零压缩级别会使整个输出文件被压缩，就好像它是通过<codeph>gzip</codeph>馈送的一样。
              但默认设置为不压缩。
              tar存档格式当前根本不支持压缩。
              </pd>
          </plentry>
          <plentry>
            <pt>--binary-upgrade</pt>
            <pd>此选项供就地升级工具使用。
              不建议或不支持将其用于其他目的。
              该选项的行为在将来的版本中可能会更改，恕不另行通知。
              </pd>
          </plentry>
          <plentry>
            <pt>--column-inserts | --attribute-inserts</pt>
            <pd>将数据转储为带有显式列名（<codeph>(INSERT INTO</codeph><varname>table</varname><codeph>(</codeph><varname>column</varname><codeph>, ...) VALUES ...)</codeph>）的<codeph>INSERT</codeph>命令。
              这会使恢复非常缓慢。
              它主要用于制作可以装入非基于PostgreSQL的数据库的转储。
              但是，由于此选项为每一行生成一个单独的命令，因此在重新加载行时发生错误只会导致该行丢失，而不是整个表内容丢失。
              </pd>
          </plentry>
          <plentry>
            <pt>--disable-dollar-quoting</pt>
            <pd>此选项禁止对函数体使用美元引号，并强制使用SQL标准字符串语法对其进行引用。
              </pd>
          </plentry>
          <plentry>
            <pt>--disable-triggers</pt>
            <pd>仅当创建仅数据转储时，此选项才相关。
              它指示<codeph>pg_dump</codeph>包含一些命令，以在重新加载数据时临时禁用目标表上的触发器。
              如果不想在数据重装期间调用的表上有触发器，请使用此选项。
              为<codeph>--disable-triggers</codeph>发出的命令必须以超级用户身份执行。
              因此，您还应该使用<codeph>-S</codeph>指定超级用户名，或者最好小心地以超级用户身份启动生成的脚本。
              此选项仅对纯文本格式有意义。
              对于归档格式，可以在调用<codeph><xref href="./pg_restore.xml#topic1" type="topic" format="dita"/></codeph>时指定该选项。
              <note>Greenplum数据库不支持用户定义的触发器。</note></pd>
          </plentry>
          <plentry>
            <pt><codeph>--exclude-table-data=<varname>table</varname></codeph></pt>
            <pd>不要为与<varname>table</varname>模式匹配的任何表转储数据。
              该模式根据与<codeph>-t</codeph>相同的规则进行解释。
              <codeph>--exclude-table-data</codeph>可以多次给出，以排除与多种模式中的任何一种匹配的表。
              当您需要特定表的定义时，即使您不需要其中的数据，此选项也很有用。
              </pd>
            <pd>要排除数据库中所有表的数据，请参见<codeph>--schema-only</codeph>。
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>--if-exists</codeph></pt>
            <pd>清理数据库对象时，请使用条件命令（即添加<codeph>IF EXISTS</codeph>子句）。
              除非还指定了<codeph>--clean</codeph>，否则此选项无效。
              </pd>
          </plentry>         
          <plentry>
            <pt>--inserts</pt>
            <pd>将数据转储为<codeph>INSERT</codeph>命令（而不是<codeph>COPY</codeph>）。
              这会使恢复非常缓慢。
              它主要用于制作可以装入非基于PostgreSQL的数据库的转储。
              但是，由于此选项为每一行生成一个单独的命令，因此在重新加载行时发生错误只会导致该行丢失，而不是整个表内容丢失。
              请注意，如果您重新排列了列顺序，则还原可能会完全失败。
              <codeph>--column-inserts</codeph>选项可以安全地防止列顺序更改，尽管速度更慢。
              </pd>
          </plentry>
          <plentry>
            <pt>--lock-wait-timeout=<varname>timeout</varname></pt>
            <pd>不要在转储开始时一直等待获取共享表锁。
              相反，如果无法在指定的<varname>timeout</varname>时间内锁定表，则失败。
              将<varname>timeout</varname>指定为毫秒数。
              </pd>
          </plentry>
          <plentry>
            <pt>--no-security-labels</pt>
            <pd>不要转储安全标签。</pd>
          </plentry>
          <plentry>
            <pt>--no-synchronized-snapshots</pt>
            <pd>该选项允许在6.0之前版本的Greenplum数据库服务器上运行<codeph>pg_dump -j</codeph>。
              有关更多详细信息，请参见<codeph>-j</codeph>参数的文档。
              </pd>
          </plentry>

          <plentry>
            <pt>--no-tablespaces</pt>
            <pd>不输出命令以选择表空间。
              使用此选项，将在还原期间的默认表空间中创建所有对象。
              </pd>
            <pd>此选项仅对纯文本格式有意义。
              对于归档格式，可以在调用<codeph>pg_restore</codeph>时指定选项。
              </pd>
          </plentry>
          <plentry>
            <pt>--no-unlogged-table-data</pt>
            <pd>不要转储未记录表的内容。
              此选项对是否转储表定义（模式）没有影响。
              它仅禁止转储表数据。
              从备用服务器转储时，始终排除未记录表中的数据。
              </pd>
          </plentry>
          <plentry>
            <pt>--quote-all-identifiers</pt>
            <pd>强制给所有标识符加上引号。
              当从Greenplum数据库主版本不同于<codeph>pg_dump</codeph>的中转储数据库时，
              或者打算将输出加载到其他主版本的服务器中时，建议使用此选项。
              默认情况下，<codeph>pg_dump</codeph>仅为在其主版本中为保留字的标识符加引号。
              在处理其他版本的保留字可能略有不同的服务器时，有时会导致兼容性问题。
              使用<codeph>--quote-all-identifiers</codeph>可以防止此类问题，但代价是难以阅读的转储脚本。
              </pd>
          </plentry>
          <plentry>
            <pt>--section=<varname>sectionname</varname></pt>
            <pd>仅转储命名节。
              节名称可以是<codeph>pre-data</codeph>，<codeph>data</codeph>或<codeph>post-data</codeph>。
              可以多次指定此选项以选择多个节。
              默认为转储所有节。
              </pd>
            <pd><codeph>data</codeph>节包含实际的表数据和序列值。
              <codeph>post-data</codeph>项包括索引，触发器，规则和约束的定义，而不是经过验证的检查约束。
              <codeph>pre-data</codeph>项包括所有其他数据定义项。
              </pd>
          </plentry>
          <plentry>
            <pt>--serializable-deferrable</pt>
            <pd>对转储使用可序列化的事务，以确保使用的快照与以后的数据库状态一致；
              但这要通过等待事务流中不会出现异常的点来完成，这样就不会存在转储失败或导致其他事务因serialization_failure而回滚的风险。
              </pd>
            <pd>此选项对仅用于灾难恢复的转储无益。
              这对于在原始数据库继续更新的同时用于加载数据库副本以进行报告或其他只读负载共享的转储很有用。
              没有它，转储可能反映出与最终提交的事务的任何串行执行都不相符的状态。
              例如，如果使用批处理技术，则在转储中批次可能显示为已关闭，而批次中的所有项目都不会出现。
              </pd>
            <pd>如果在启动<codeph>pg_dump</codeph>时没有活动的读写事务，则此选项没有任何区别。
              如果读写事务处于活动状态，则转储的开始可能会延迟不确定的时间长度。
              运行后，无论有无选项，性能都是相同的。
              </pd>
            <pd><note>由于Greenplum数据库不支持可序列化的事务，因此<codeph>--serializable-deferrable</codeph>选项在Greenplum数据库中无效。
              </note></pd>
          </plentry>
          <plentry>
            <pt>--use-set-session-authorization</pt>
            <pd>输出SQL标准的<codeph>SET SESSION AUTHORIZATION</codeph>命令而不是<codeph>ALTER OWNER</codeph>命令来确定对象所有权。
              这使转储更加符合标准，但是依赖转储中对象的历史记录，可能无法正确还原。
              使用<codeph>SET SESSION AUTHORIZATION</codeph>进行的转储将需要超级用户权限才能正确还原，而<codeph>ALTER OWNER</codeph>则需要较少的权限。
              </pd>
          </plentry>
          <plentry>
            <pt>--gp-syntax | --no-gp-syntax </pt>
            <pd>使用<codeph>--gp-syntax</codeph>在<codeph>CREATE TABLE</codeph>语句中转储Greenplum数据库语法。
              这允许转储Greenplum数据库表的分发策略（<codeph>DISTRIBUTED BY</codeph>或<codeph>DISTRIBUTED RANDOMLY</codeph>子句），
              这对于还原到其他Greenplum数据库系统很有用。
              默认是在连接到Greenplum数据库系统时包括Greenplum数据库语法，而在连接到常规PostgreSQL系统时将其排除。
              </pd>
          </plentry>
          <plentry>
            <pt>--function-oids <varname>oids</varname></pt>
            <pd>转储对象标识符的<varname>oids</varname>列表中指定的函数。
              <note>仅提供此选项供其他管理工具使用。
                不建议或不支持将其用于任何其他目的。
                该选项的行为在将来的版本中可能会更改，恕不另行通知。
                </note></pd>
          </plentry>
          <plentry>
            <pt>--relation-oids <varname>oids</varname></pt>
            <pd>转储对象标识符的<varname>oids</varname>列表中指定的关系。
              <note>仅提供此选项供其他管理工具使用。
                不建议或不支持将其用于任何其他目的。
                该选项的行为在将来的版本中可能会更改，恕不另行通知。
                </note></pd>
          </plentry>
          <plentry>
            <pt>-? | --help</pt>
            <pd>显示有关<codeph>pg_dump</codeph>命令行参数的帮助，然后退出。
              </pd>
          </plentry>
        </parml>
      </sectiondiv>
      <sectiondiv id="section6">
        <b>连接选项</b>
        <parml>
          <plentry>
            <pt>-d <varname>dbname</varname> | --dbname=<varname>dbname</varname></pt>
            <pd>指定要连接的数据库的名称。
              这等效于在命令行上将<varname>dbname</varname>指定为第一个非选项参数。
              </pd>
            <pd>如果此参数包含<codeph>=</codeph>符号或以有效的URI前缀
              （<codeph>postgresql://</codeph>或<codeph>postgres://</codeph>）开头，则将其视为<varname>conninfo</varname>字符串。
              有关更多信息，请参见PostgreSQL文档中的<xref
                      href="https://www.postgresql.org/docs/9.4/libpq-connect.html#LIBPQ-CONNSTRING"
                      format="html" scope="external">连接字符串</xref>。
              </pd>
          </plentry>
          <plentry>
            <pt>-h <varname>host</varname> | --host=<varname>host</varname></pt>
            <pd>运行Greenplum数据库master数据库服务器的计算机的主机名。
              如果未指定，则从环境变量<codeph>PGHOST</codeph>读取或默认为localhost。
              </pd>
          </plentry>
          <plentry>
            <pt>-p <varname>port</varname> | --port=<varname>port</varname></pt>
            <pd>Greenplum master数据库服务器正在侦听连接的TCP端口。
              如果未指定，则从环境变量<codeph>PGPORT</codeph>读取或默认为5432。
              </pd>
          </plentry>
          <plentry>
            <pt>-U <varname>username</varname> | --username=<varname>username</varname></pt>
            <pd>要用作连接的数据库角色名称。
              如果未指定，则从环境变量<codeph>PGUSER</codeph>读取或默认为当前系统角色名称。
              </pd>
          </plentry>
          <plentry>
            <pt>-W | --password</pt>
            <pd>强制输入密码提示。</pd>
          </plentry>
          <plentry>
            <pt>-w | --no-password</pt>
            <pd>不发出密码提示。
              如果服务器要求密码验证，而其他方式（例如<codeph>.pgpass</codeph>文件）无法使用密码，则连接尝试将失败。
              此选项在没有用户输入密码的批处理作业和脚本中很有用。
              </pd>
          </plentry>
          <plentry>
            <pt>--role=<varname>rolename</varname></pt>
            <pd>指定用于创建转储的角色名称。
              此选项使<codeph>pg_dump</codeph>在连接到数据库后发出<codeph>SET ROLE <varname>rolename</varname></codeph>命令。
              当通过身份验证的用户（由<codeph>-U</codeph>指定）缺少<codeph>pg_dump</codeph>所需的特权，但可以切换到具有所需权限的角色时，此功能很有用。
              某些安装有禁止直接以超级用户身份登录的策略，并且使用此选项可以在不违反策略的情况下进行转储。
              </pd>
          </plentry>
        </parml>
      </sectiondiv>
    </section>
    <section id="section7">
      <title>注解</title>
      <p>当选择了仅数据转储并且使用了选项<codeph>--disable-triggers</codeph>时，
        <codeph>pg_dump</codeph>发出命令以在插入数据之前禁用用户表上的触发器，并在插入数据后发出命令以重新启用它们。
        如果还原在中间停止，则系统catalog可能处于错误状态。
        </p>
      <p><codeph>pg_dump</codeph>生成的转储文件不包含优化器用于制定查询计划决策的统计信息。
        因此，从转储文件还原后运行<codeph>ANALYZE</codeph>是明智的，以确保最佳性能。
        </p>
      <p><codeph>pg_dump</codeph>的数据库活动通常由统计信息收集器收集。
        如果不希望这样做，则可以通过<codeph>PGOPTIONS</codeph>或<codeph>ALTER USER</codeph>命令将参数<codeph>track_counts</codeph>设置为false。
        </p>
      <p>由于可以使用<codeph>pg_dump</codeph>将数据传输到较新的Greenplum数据库版本，
        因此可以预期<codeph>pg_dump</codeph>的输出将加载到比<codeph>pg_dump</codeph>的版本更高的Greenplum数据库版本中。
        <codeph>pg_dump</codeph>还可以从Greenplum数据库中转储早于其自身版本的版本。
        但是，<codeph>pg_dump</codeph>不能从Greenplum数据库版本中转储比其主要版本新的版本。
        它将拒绝尝试，而不是冒险进行无效的转储。
        另外，不能保证<codeph>pg_dump</codeph>的输出可以加载到主版本较旧的服务器上 - 即使转储是从该版本的服务器上获取的也不行。
        将转储文件加载到旧服务器中可能需要手动编辑转储文件，以删除旧服务器无法理解的语法。
        在交叉版本的情况下，建议使用<codeph>--quote-all-identifiers</codeph>选项，
        因为它可以防止由于不同的Greenplum数据库版本中的保留字列表不同而引起的问题。
        </p>
    </section>
    <section id="section8">
      <title>示例</title>
      <p>将名为<codeph>mydb</codeph>的数据库转储到SQL脚本文件中：</p>
      <codeblock>pg_dump mydb &gt; db.sql</codeblock>
      <p>要将这样的脚本重新加载到名为<codeph>newdb</codeph>的（新创建的）数据库中：</p>
      <codeblock>psql -d newdb -f db.sql</codeblock>
      <p>以tar文件格式转储Greenplum数据库，并包含分发策略信息：</p>
      <codeblock>pg_dump -Ft --gp-syntax mydb &gt; db.tar</codeblock>
      <p>要将数据库转储到自定义格式的存档文件中：</p>
      <codeblock>pg_dump -Fc mydb &gt; db.dump</codeblock>
      <p>要将数据库转储到目录格式的存档中：</p>
      <codeblock>pg_dump -Fd mydb -f dumpdir</codeblock>
      <p>要将数据库与5个工作作业并行转储到目录格式的存档中，请执行以下操作：</p>
      <codeblock>pg_dump -Fd mydb -j 5 -f dumpdir</codeblock>
      <p>要将存档文件重新加载到名为<codeph>newdb</codeph>的（新创建的）数据库中：</p>
      <codeblock>pg_restore -d newdb db.dump</codeblock>
      <p>要转储名为<codeph>mytab</codeph>的单个表：</p>
      <codeblock>pg_dump -t mytab mydb &gt; db.sql</codeblock>
      <p>要在<codeph>-t</codeph>和相关开关中指定大写或大小写混合的名称，您需要将名称加双引号；否则它将被折叠成小写。
        但是双引号对于shell来说是特殊的，因此反过来必须使用双引号。
        因此，要转储具有大小写混合名称的单个表，您需要执行以下操作：
        </p>
      <codeblock>pg_dump -t '"MixedCaseName"' mydb &gt; mytab.sql</codeblock>
    </section>
    <section id="section9">
      <title>另见</title>
      <p><codeph><xref href="./pg_dumpall.xml#topic1" type="topic" format="dita"/></codeph>,
            <codeph><xref href="pg_restore.xml#topic1" type="topic" format="dita"/></codeph>,
            <codeph><xref href="psql.xml#topic1" type="topic" format="dita"/></codeph></p>
    </section>
  </body>
</topic>
