<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
  <title id="ov137116">pg_restore</title>
  <body>
    <p id="client_util_desc">从<codeph>pg_dump</codeph>创建的存档文件中恢复数据库。
      </p>
    <section id="section2">
      <title>概要</title>
      <codeblock id="client_util_synopsis"><b>pg_restore</b> [<varname>connection-option</varname> ...] [<varname>restore_option</varname> ...] <varname>filename</varname>

<b>pg_restore</b> <b>-? | --help</b>

<b>pg_restore</b> <b>-V | --version</b></codeblock>
    </section>
    <section id="section3">
      <title>描述</title>
      <p><codeph>pg_restore</codeph>是一种工具，用于从<codeph><xref href="pg_dump.xml#topic1" type="topic" format="dita"/></codeph>创建的非明文格式之一的存档中恢复数据库。
        它将发出将数据库重建到保存时所处状态的必要命令。
        存档文件还允许<codeph>pg_restore</codeph>对恢复的内容具有选择性，甚至可以在恢复之前对项目进行重新排序。
        </p>
      <p><codeph>pg_restore</codeph>可以在两种模式下运行。
        如果指定了数据库名称，则存档将直接还原到数据库中。
        否则，将创建一个脚本，该脚本包含重建数据库所需的SQL命令，并将其写入文件或标准输出。
        脚本输出等效于<codeph>pg_dump</codeph>的纯文本输出格式。
        因此，控制输出的某些选项类似于<codeph>pg_dump</codeph>选项。
        </p>
      <p><codeph>pg_restore</codeph>无法恢复存档文件中不存在的信息。
        例如，如果使用“将数据作为<codeph>INSERT</codeph>命令转储”选项进行归档，则<codeph>pg_restore</codeph>将无法使用<codeph>COPY</codeph>语句加载数据。
        </p>
      <note><codeph>--ignore-version</codeph>选项已弃用，在以后的版本中将被删除。
        </note>
    </section>
    <section id="section4">
      <title>选项</title>
      <parml>
        <plentry>
          <pt>
            <varname>filename</varname>
          </pt>
          <pd>指定要还原的档案文件的位置（或目录，对于目录格式归档）。
            如果未指定，则使用标准输入。
            </pd>
        </plentry>
      </parml>
      <sectiondiv>
        <b>恢复选项</b>
        <parml>
          <plentry>
            <pt>-a | --data-only</pt>
            <pd>仅转储数据，而不转储模式（数据定义）。表数据和序列值将转储，如果在归档文件中有的话。
              <p>此选项与<codeph>--section=data</codeph>相似，但由于历史原因不同。
                </p></pd>
          </plentry>
          <plentry>
            <pt>-c | --clean</pt>
            <pd>在重新创建数据库对象之前，先对其进行清理（删除）。
              （如果目标数据库中不存在任何对象，则恢复可能会生成一些无害的错误消息。）
              </pd>
          </plentry>
          <plentry>
            <pt>-C | --create</pt>
            <pd>在还原到数据库之前先创建它。
              如果还指定了<codeph>--clean</codeph>，请在连接到目标数据库之前删除并重新创建目标数据库。
              </pd>
            <pd>使用此选项时，以<codeph>-d</codeph>命名的数据库仅用于发出初始<codeph>DROP DATABASE</codeph>和<codeph>CREATE DATABASE</codeph>命令。
              所有数据都将还原到存档中显示的数据库名称中。
              </pd>
          </plentry>
          <plentry>
            <pt>-d <varname>dbname</varname> | --dbname=<varname>dbname</varname></pt>
            <pd>连接到该数据库，然后直接还原到该数据库。
              与大多数其他Greenplum数据库工具一样，该工具也使用<codeph>libpq</codeph>支持的环境变量。
              但是，如果未提供数据库名称，它将不会读取<codeph>PGDATABASE</codeph>。
              </pd>
          </plentry>
          <plentry>
            <pt>-e | --exit-on-error</pt>
            <pd>如果在向数据库发送SQL命令时遇到错误，则退出。
              默认设置为继续并在还原结束时显示错误计数。
              </pd>
          </plentry>
          <plentry>
            <pt>-f <varname>outfilename</varname> | --file=<varname>outfilename</varname></pt>
            <pd>为生成的脚本或与<codeph>-l</codeph>一起使用的列表指定输出文件。默认为标准输出。
              </pd>
          </plentry>
          <plentry>
            <pt>-F c|d|t | --format={custom | directory | tar}</pt>
            <pd><codeph><xref href="pg_dump.xml#topic1" type="topic" format="dita"/></codeph>生成的归档文件格式。
              无需指定格式，因为<codeph>pg_restore</codeph>将自动确定格式。
              格式可以是<codeph>custom</codeph>，<codeph>directory</codeph>或<codeph>tar</codeph>。
              </pd>
          </plentry>
          <plentry>
            <pt>-i | --ignore-version</pt>
            <pd><note>此选项已被弃用，并将在以后的版本中删除。</note>
              忽略数据库版本检查。</pd>
          </plentry>
          <plentry>
            <pt>-I <varname>index</varname> | --index=<varname>index</varname></pt>
            <pd>仅还原命名索引的定义。</pd>
          </plentry>
          <plentry>
            <pt>-j | --number-of-jobs | --jobs=<varname>number-of-jobs</varname></pt>
            <pd>使用多个并发作业运行<codeph>pg_restore</codeph>中最耗时的部分 - 加载数据，创建索引或创建约束的部分。
              此选项可以大大减少将大型数据库还原到多处理器计算机上运行的服务器的时间。
              </pd>
            <pd>每个作业是一个进程或一个线程，具体取决于操作系统，并使用与服务器的单独连接。
              </pd>
            <pd>此选项的最佳值取决于服务器，客户端和网络的硬件设置。
              影响因素包括CPU内核数和磁盘设置。
              一个不错的起点是服务器上的CPU内核数量，但是在许多情况下，大于该数量的值也可以缩短还原时间。
              当然，太高的值会由于抖动而导致性能下降。
              </pd>
            <pd>此选项仅支持自定义存档格式。
              输入文件必须是常规文件（例如，不是管道）。
              发出脚本而不是直接连接到数据库服务器时，将忽略此选项。
              另外，不能将多个作业与<codeph>--single-transaction</codeph>选项一起使用。
              </pd>
          </plentry>
          <plentry>
            <pt>-l | --list</pt>
            <pd>列出归档的内容。
              此操作的输出可与<codeph>-L</codeph>选项一起使用，以限制和重新排序要还原的项目。
              </pd>
          </plentry>
          <plentry>
            <pt>-L <varname>list-file</varname> | --use-list=<varname>list-file</varname></pt>
            <pd>仅还原<varname>list-file</varname>中的元素，并还原它们在文件中出现的顺序。
              请注意，如果将<codeph>-n</codeph>或<codeph>-t</codeph>之类的过滤开关与<codeph>-L</codeph>一起使用，它们将进一步限制恢复的项目。
              <p>通常，通过编辑先前的<codeph>-l</codeph>操作的输出来创建<varname>list-file</varname>。
                可以移动或删除行，也可以通过在行的开头放置分号（;）来注释掉行。
                请参阅下面的示例。
                </p></pd>
          </plentry>
          <plentry>
            <pt>-n <varname>schema</varname> | --schema=<varname>schema</varname></pt>
            <pd>仅还原命名模式中的对象。
              可以将其与<codeph>-t</codeph>选项结合使用以仅还原特定表。
              </pd>
          </plentry>
          <plentry>
            <pt>-O | --no-owner</pt>
            <pd>不要输出命令来设置对象的所有权以匹配原始数据库。
              默认情况下，<codeph>pg_restore</codeph>发出<codeph>ALTER OWNER</codeph>或<codeph>SET SESSION AUTHORIZATION</codeph>语句来设置所创建模式元素的所有权。
              除非由超级用户（或拥有脚本中所有对象的同一用户）建立与数据库的初始连接，否则这些语句将失败。
              使用<codeph>-O</codeph>，可以将任何用户名用于初始连接，并且该用户将拥有所有创建的对象。
              </pd>
          </plentry>
          <plentry>
            <pt>-P '<varname>function-name</varname>(<varname>argtype</varname> [, ...])' |
                --function='<varname>function-name</varname>(<varname>argtype</varname> [,
              ...])'</pt>
            <pd>仅还原命名函数。
              函数名称必须用引号引起来。
              注意，函数名称和参数的拼写必须与转储文件的目录中的拼写完全相同（如<codeph>--list</codeph>选项所示）。
              </pd>
          </plentry>
          <plentry>
            <pt>-s | --schema-only</pt>
            <pd>如果模式条目存在于归档中，则仅还原模式（数据定义），而不还原数据。
              <p>此选项与<codeph>--data-only</codeph>相反。
                它类似于<codeph>--section=pre-data --section=post-data</codeph>，但由于历史原因不同。
                </p>
              <p>（不要将此与<codeph>--schema</codeph>选项混淆，该选项以不同的含义使用“schema”一词。）
                </p></pd>
          </plentry>
          <plentry>
            <pt>-S <varname>username</varname> | --superuser=<varname>username</varname></pt>
            <pd>指定禁用触发器时要使用的超级用户名。
              仅在使用<codeph>--disable-triggers</codeph>时才有意义。
              <note>Greenplum数据库不支持用户定义的触发器。</note></pd>
          </plentry>
          <plentry>
            <pt>-t <varname>table</varname> | --table=<varname>table</varname></pt>
            <pd>仅还原命名表的定义和/或数据。
              可以使用多个<codeph>-t</codeph>开关指定多个表。
              可以将它与<codeph>-n</codeph>选项结合使用以指定模式。
              </pd>
          </plentry>
          <plentry>
            <pt>-T <varname>trigger</varname> | --trigger=<varname>trigger</varname></pt>
            <pd>仅还原命名触发器。
              <note>Greenplum数据库不支持用户定义的触发器。</note></pd>
          </plentry>
          <plentry>
            <pt>-v | --verbose</pt>
            <pd>指定详细模式。</pd>
          </plentry>
          <plentry>
            <pt>-V | --version</pt>
            <pd>打印<codeph>pg_restore</codeph>版本并退出。</pd>
          </plentry>
          <plentry>
            <pt>-x | --no-privileges | --no-acl</pt>
            <pd>防止转储访问权限（<codeph>GRANT/REVOKE</codeph>命令）。
              </pd>
          </plentry>
          <plentry>
            <pt>-1 | --single-transaction</pt>
            <pd>作为单个事务执行还原。
              这样可以确保所有命令都成功完成，或者不应用任何更改。
              </pd>
          </plentry>
          <plentry>
            <pt>--disable-triggers</pt>
            <pd>仅当创建仅数据恢复时，此选项才相关。
              它指示<codeph>pg_restore</codeph>在重载数据时执行命令以临时禁用目标表上的触发器。
              如果不想在数据重装期间调用的表上有触发器，请使用此选项。
              为<codeph>--disable-triggers</codeph>发出的命令必须以超级用户身份执行。
              因此，您还应该使用<codeph>-S</codeph>指定超级用户名，或者最好以超级用户身份运行<codeph>pg_restore</codeph>。
              <note>Greenplum数据库不支持用户定义的触发器。</note></pd>
          </plentry>
          <plentry>
            <pt>--no-data-for-failed-tables</pt>
            <pd>默认情况下，即使表的创建命令失败（例如，因为它已经存在），表数据也将还原。
              使用此选项，将跳过此类表的数据。
              当目标数据库可能已经包含所需的表内容时，此行为很有用。
              指定此选项可防止加载重复或过时的数据。
              该选项仅在直接还原到数据库中时才有效，在生成 SQL 脚本输出时无效。
              </pd>
          </plentry>
          <plentry>
            <pt>--no-security-labels</pt>
            <pd>即使存档包含安全标签，也不要输出命令以还原安全标签。
              </pd>
          </plentry>
          <plentry>
            <pt>--no-tablespaces</pt>
            <pd>不输出命令以选择表空间。
              使用此选项，将在还原期间的默认表空间中创建所有对象。
              </pd>
          </plentry>
          <plentry>
            <pt>--section=<varname>sectionname</varname></pt>
            <pd>仅还原命名节。
              节名称可以是<codeph>pre-data</codeph>，<codeph>data</codeph>或<codeph>post-data</codeph>。
              可以多次指定此选项以选择多个节。
              </pd>
            <pd>默认为还原所有节。</pd>
          </plentry>
          <plentry>
            <pt>--use-set-session-authorization</pt>
            <pd>输出SQL标准的<codeph>SET SESSION AUTHORIZATION</codeph>命令而不是<codeph>ALTER OWNER</codeph>命令来确定对象所有权。
              这使转储更加符合标准，但是依赖转储中对象的历史记录，可能无法正确还原。
              </pd>
          </plentry>
          <plentry>
            <pt>-? | --help</pt>
            <pd>显示有关<codeph>pg_restore</codeph>命令行参数的帮助，然后退出。</pd>
          </plentry>
        </parml>
      </sectiondiv>
      <sectiondiv id="section5">
        <b>连接选项</b>
        <parml>
          <plentry>
            <pt>-h <varname>host</varname> | --host <varname>host</varname></pt>
            <pd>运行Greenplum数据库master数据库服务器的计算机的主机名。
              如果未指定，则从环境变量<codeph>PGHOST</codeph>读取或默认为localhost。
              </pd>
          </plentry>
          <plentry>
            <pt>-p <varname>port</varname> | --port <varname>port</varname></pt>
            <pd>Greenplum master数据库服务器正在侦听连接的TCP端口。
              如果未指定，则从环境变量<codeph>PGPORT</codeph>读取或默认为5432。
              </pd>
          </plentry>
          <plentry>
            <pt>-U <varname>username</varname> | --username <varname>username</varname></pt>
            <pd>要用作连接的数据库角色名称。
              如果未指定，则从环境变量<codeph>PGUSER</codeph>读取或默认为当前系统角色名称。
              </pd>
          </plentry>
          <plentry>
            <pt>-w | --no-password</pt>
            <pd>不发出密码提示。
              如果服务器要求密码验证，而其他方式（例如<codeph>.pgpass</codeph>文件）无法使用密码，则连接尝试将失败。
              此选项在没有用户输入密码的批处理作业和脚本中很有用。</pd>
          </plentry>
          <plentry>
            <pt>-W | --password</pt>
            <pd>强制输入密码提示。</pd>
          </plentry>
          <plentry>
            <pt>--role=<varname>rolename</varname></pt>
            <pd>指定用于执行还原的角色名称。
              此选项使<codeph>pg_restore</codeph>在连接到数据库后发出<codeph>SET ROLE <varname>rolename</varname></codeph>命令。
              当通过身份验证的用户（由<codeph>-U</codeph>指定）缺少<codeph>pg_restore</codeph>所需的特权，但可以切换到具有所需权限的角色时，此功能很有用。
              某些安装有禁止直接以超级用户身份登录的策略，并且使用此选项可以在不违反策略的情况下进行还原。
              </pd>
          </plentry>
        </parml>
      </sectiondiv>
    </section>
    <section id="section6">
      <title>注解</title>
      <p>如果您的安装对<codeph>template1</codeph>数据库有任何本地添加，请小心将<codeph>pg_restore</codeph>的输出加载到一个真正的空数据库中；
        否则，由于添加对象的重复定义，您很可能会出错。
        要创建没有任何本地添加的空数据库，请从<codeph>template0</codeph>而不是<codeph>template1</codeph>复制，例如：
        </p>
      <codeblock>CREATE DATABASE foo WITH TEMPLATE template0;</codeblock>
      <p>当将数据恢复到预先存在的表并使用选项<codeph>--disable-triggers</codeph>时，
        <codeph>pg_restore</codeph>在插入数据之前发出命令以禁用用户表上的触发器，然后在插入数据后发出命令以重新启用它们。
        如果还原在中间停止，则系统catalog可能处于错误状态。
        </p>
      <p>另请参阅<codeph>pg_dump</codeph>文档以获取有关<codeph>pg_dump</codeph>限制的详细信息。
        </p>
      <p>还原后，明智的做法是在每个还原的表上运行<codeph>ANALYZE</codeph>，以便查询优化器具有有用的统计信息。
        </p>
    </section>
    <section id="section7">
      <title>示例</title>
      <p>假设我们已经将名为<codeph>mydb</codeph>的数据库转储到了自定义格式的转储文件中：
        </p>
      <codeblock>pg_dump -Fc mydb &gt; db.dump</codeblock>
      <p>删除数据库并从转储中重新创建它：</p>
      <codeblock>dropdb mydb
pg_restore -C -d template1 db.dump</codeblock>
      <p>要将转储重新加载到名为<codeph>newdb</codeph>的新数据库中。
        请注意，这里没有<codeph>-C</codeph>，而是直接连接到要还原到的数据库。
        还要注意，我们从<codeph>template0</codeph>而不是<codeph>template1</codeph>克隆新数据库，以确保它最初是空的：
        </p>
      <codeblock>createdb -T template0 newdb
pg_restore -d newdb db.dump</codeblock>
      <p>要重新排序数据库项，首先必须转储归档的目录：
        </p>
      <codeblock>pg_restore -l db.dump &gt; db.list</codeblock>
      <p>清单文件由一个标题和每个项目的一行组成，例如，</p>
      <codeblock>; Archive created at Mon Sep 14 13:55:39 2009
;     dbname: DBDEMOS
;     TOC Entries: 81
;     Compression: 9
;     Dump Version: 1.10-0
;     Format: CUSTOM
;     Integer: 4 bytes
;     Offset: 8 bytes
;     Dumped from database version: 8.3.5
;     Dumped by pg_dump version: 8.3.8
;
; Selected TOC Entries:
;
3; 2615 2200 SCHEMA - public pasha
1861; 0 0 COMMENT - SCHEMA public pasha
1862; 0 0 ACL - public pasha
317; 1247 17715 TYPE public composite pasha
319; 1247 25899 DOMAIN public domain0 pasha2</codeblock>
      <p>分号开始注释，行开头的数字指代分配给每个项目的内部档案ID。
        文件中的行可以被注释掉，删除和重新排序。
        例如：
        </p>
      <codeblock>10; 145433 TABLE map_resolutions postgres
;2; 145344 TABLE species postgres
;4; 145359 TABLE nt_header postgres
6; 145402 TABLE species_records postgres
;8; 145416 TABLE ss_old postgres</codeblock>
      <p>可以用作<codeph>pg_restore</codeph>的输入，并且只能按以下顺序恢复项目10和6：
        </p>
      <codeblock>pg_restore -L db.list db.dump</codeblock>
    </section>
    <section id="section8">
      <title>另见</title>
      <p>
        <codeph>
          <xref href="pg_dump.xml#topic1" type="topic" format="dita"/>
        </codeph>
      </p>
    </section>
  </body>
</topic>
